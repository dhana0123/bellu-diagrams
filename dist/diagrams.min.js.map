{"version":3,"file":"diagrams.min.js","sources":["../src/vector.ts","../src/BBcode.ts","../src/tag_names.ts","../src/diagram.ts","../src/utils.ts","../src/color_palette.ts","../src/unicode_utils.ts","../src/draw_svg.ts","../src/shapes.ts","../src/shapes/shapes_geometry.ts","../src/alignment.ts","../src/html_interactivity.ts","../src/modifier.ts","../node_modules/@velipso/polybool/dist/polybool.js","../src/boolean.ts","../src/filter.ts","../src/shapes/shapes_graph.ts","../src/shapes/shapes_annotation.ts","../src/shapes/shapes_mechanics.ts","../src/shapes/shapes_bar.ts","../src/shapes/shapes_table.ts","../src/shapes/shapes_numberline.ts","../src/shapes/shapes_boxplot.ts","../src/geo_construct/geo_construct.ts","../src/shapes/utils_tree.ts","../src/shapes/shapes_tree.ts","../src/shapes/shapes_curves.ts","../src/encoding.ts"],"sourcesContent":["/**\r\n *  Class for 2D Vectors \r\n*/\r\nexport class Vector2 {\r\n    constructor(public x: number, public y: number) { }\r\n    add(v: Vector2) : Vector2 {\r\n        return new Vector2(this.x + v.x, this.y + v.y);\r\n    }\r\n    sub(v: Vector2) : Vector2 {\r\n        return new Vector2(this.x - v.x, this.y - v.y);\r\n    }\r\n    scale(s: number) : Vector2 {\r\n        return new Vector2(this.x * s, this.y * s);\r\n    }\r\n    mul(v: Vector2) : Vector2 {\r\n        return new Vector2(this.x * v.x, this.y * v.y);\r\n    }\r\n    rotate(angle: number) : Vector2 {\r\n        let x = this.x * Math.cos(angle) - this.y * Math.sin(angle);\r\n        let y = this.x * Math.sin(angle) + this.y * Math.cos(angle);\r\n        return new Vector2(x, y);\r\n    }\r\n    dot(v: Vector2) : number {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v: Vector2) : number {\r\n        return this.x * v.y - this.y * v.x;\r\n    }\r\n    equals(v: Vector2) : boolean {\r\n        return this.x == v.x && this.y == v.y;\r\n    }\r\n    length() : number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    length_sq() : number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    angle() : number {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n    normalize() : Vector2 {\r\n        let len = this.length();\r\n        return new Vector2(this.x / len, this.y / len);\r\n    }\r\n    copy() : Vector2 {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    apply(f : (v : Vector2) => Vector2) : Vector2 {\r\n        return f(this.copy());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to create a Vector2\r\n */\r\nexport function V2(x : number, y : number) : Vector2 {\r\n    return new Vector2(x, y);\r\n}\r\n\r\n/**\r\n * Helper function to create a Vector2 from an angle\r\n * @param angle angle in radians\r\n * @returns Vector2 with length 1\r\n */\r\nexport function Vdir(angle : number) : Vector2 {\r\n    return new Vector2(Math.cos(angle), Math.sin(angle));\r\n}\r\n\r\n\r\n// transformation functions\r\ntype TransformFunc = (p : Vector2) => Vector2;\r\nexport class Transform {\r\n    static translate(v : Vector2) : TransformFunc {\r\n        return (p : Vector2) => p.add(v);\r\n    }\r\n    static rotate(angle : number, pivot : Vector2) : TransformFunc {\r\n        return (p : Vector2) => p.sub(pivot).rotate(angle).add(pivot);\r\n    }\r\n    static scale(scale : Vector2, origin : Vector2) : TransformFunc {\r\n        return (p : Vector2) => p.sub(origin).mul(scale).add(origin);\r\n    }\r\n    static reflect_over_point(q : Vector2) : TransformFunc {\r\n        return (p : Vector2) => p.sub(q).rotate(Math.PI).add(q);\r\n    }\r\n    static reflect_over_line(p1 : Vector2, p2 : Vector2) : TransformFunc {\r\n        let v = p2.sub(p1);\r\n        let n = v.rotate(Math.PI / 2).normalize();\r\n        return (p : Vector2) => {\r\n            let d = n.dot(p.sub(p1));\r\n            return p.sub(n.scale(2*d));\r\n        }   \r\n    }\r\n    static skewX(angle : number, ybase : number) : TransformFunc {\r\n        return (p : Vector2) => {\r\n            let x = p.x + (ybase - p.y) * Math.tan(angle);\r\n            return new Vector2(x, p.y);\r\n        }\r\n    }\r\n    static skewY(angle : number, xbase : number) : TransformFunc {\r\n        return (p : Vector2) => {\r\n            let y = p.y + (xbase - p.x) * Math.tan(angle);\r\n            return new Vector2(p.x, y);\r\n        }\r\n    }\r\n};\r\n","import type { TextSpanData } from \"./diagram\";\r\n// BBCode parser for multiline text object\r\n//\r\n\r\nenum BB_TokenType {\r\n    TEXT      = \"TEXT\",\r\n    OPEN_TAG  = \"OPEN_TAG\",\r\n    CLOSE_TAG = \"CLOSE_TAG\",\r\n    EOF       = \"EOF\",\r\n}\r\ntype BB_Token = {\r\n    type       : BB_TokenType,\r\n    attributes : { [key: string]: string }\r\n}\r\n\r\nexport class BB_Lexer {\r\n    static parse_tag_content(str : string) : BB_Token {\r\n        if (str[0] === \"/\") {\r\n        // close tag\r\n            let name = str.substring(1);\r\n            return {\r\n                type: BB_TokenType.CLOSE_TAG,\r\n                attributes: {_tag_name : name}\r\n            }\r\n        }\r\n\r\n        // open tag\r\n        let space_id = str.indexOf(\" \");\r\n        let equal_id = str.indexOf(\"=\");\r\n        if (space_id === -1 && equal_id === -1) {\r\n        // [name]\r\n            return {\r\n                type: BB_TokenType.OPEN_TAG,\r\n                attributes: {_tag_name : str}\r\n            }\r\n        }\r\n        if (space_id === -1 && equal_id > 0) {\r\n        // [name=value]\r\n            let name = str.substring(0, equal_id);\r\n            let value = str.substring(equal_id + 1);\r\n            let attributes : any = {_tag_name : name}\r\n            attributes[name] = value;\r\n            return {\r\n                type: BB_TokenType.OPEN_TAG,\r\n                attributes\r\n            }\r\n        }\r\n        // [name attr1=value1 attr2=value2]\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    static parse(text : string) : BB_Token[] | null {\r\n        let tokens : BB_Token[] = [];\r\n\r\n        let pos = 0;\r\n        let len = text.length;\r\n        while (pos < len) {\r\n            // Find the next tag\r\n            // Find [\r\n            let TagLeft = text.indexOf(\"[\", pos);\r\n            if (TagLeft === -1) {\r\n            // no more tags, add the rest of the text\r\n                tokens.push({ \r\n                    type: BB_TokenType.TEXT, \r\n                    attributes: {_text : text.substring(pos)} \r\n                });\r\n                break;\r\n            }\r\n            if (TagLeft > pos) {\r\n            // add the text before the [\r\n                tokens.push({ \r\n                    type: BB_TokenType.TEXT, \r\n                    attributes: {_text : text.substring(pos, TagLeft)} \r\n                });\r\n            }\r\n\r\n            // find ]\r\n            let TagRight = text.indexOf(\"]\", TagLeft);\r\n            let nextTagLeft  = text.indexOf(\"[\", TagLeft + 1);\r\n            // make sure there is no [ between the [ and ]\r\n            if (nextTagLeft > 0 && nextTagLeft < TagRight) return null;\r\n            // make sure there is a ] after the [\r\n            if (TagRight === -1) return null;\r\n\r\n            let tag_content = text.substring(TagLeft + 1, TagRight);\r\n            tokens.push(BB_Lexer.parse_tag_content(tag_content));\r\n\r\n            pos = TagRight + 1;\r\n        }\r\n        return tokens;\r\n    }\r\n}\r\n\r\nexport class BB_multiline {\r\n    static from_BBCode(text : string, linespace : string = \"1em\") : TextSpanData[] {\r\n        let tspans : {text : string, style : {}}[]  = []\r\n        let tag_stack : { [key: string]: string }[] = [];\r\n        let tokens = BB_Lexer.parse(text);\r\n        if (tokens === null) {\r\n            console.error(\"Invalid BBCode\");\r\n            return [];\r\n        }\r\n        for (let token of tokens) {\r\n            switch (token.type) {\r\n                case BB_TokenType.OPEN_TAG: {\r\n                    // if the token is [br] then add a new line\r\n                    if (token.attributes['_tag_name'] === \"br\") {\r\n                        const style = BB_multiline.build_style(tag_stack);\r\n                        const dy = style['_line-height'] ?? linespace;\r\n                        tspans.push({text: \"\\n\", style: {dy}});\r\n                        break;\r\n                    }\r\n                    tag_stack.push(token.attributes);\r\n                } break;\r\n                case BB_TokenType.CLOSE_TAG: {\r\n                    if (tag_stack.length === 0) {\r\n                        console.error(\"Invalid BBCode\");\r\n                        return [];\r\n                    }\r\n                    let tag_top = tag_stack[tag_stack.length - 1];\r\n                    if (tag_top['_tag_name'] !== token.attributes['_tag_name']) {\r\n                        console.error(\"Invalid BBCode\");\r\n                        return [];\r\n                    }\r\n                    tag_stack.pop();\r\n                } break;\r\n                case BB_TokenType.TEXT: {\r\n                    let style = BB_multiline.build_style(tag_stack);\r\n                    tspans.push({text: token.attributes['_text'], style});\r\n                } break;\r\n            }\r\n        }\r\n\r\n        return tspans;\r\n    }\r\n    \r\n    static split_tspans_by_words(text_span_data: TextSpanData[]) : TextSpanData[] {\r\n      let new_text_span_data : TextSpanData[] = [];\r\n      for (let span of text_span_data){\r\n        const text = span.text;\r\n        let words = text.split(\" \");\r\n        for (let i = 0; i < words.length-1; i++) words[i] += \" \";\r\n        for (let word of words){\r\n          new_text_span_data.push({text: word, style: JSON.parse(JSON.stringify(span.style))});\r\n        }\r\n      }\r\n      return new_text_span_data;\r\n    }\r\n\r\n    static build_style(tag_stack : { [key: string]: string }[]) {\r\n        let style : {[key: string]: any} = {};\r\n        for (let tag of tag_stack) {\r\n            switch (tag['_tag_name']) {\r\n                case \"b\"          : style[\"font-weight\"] = \"bold\"; break;\r\n                case \"i\"          : style[\"font-style\"] = \"italic\"; break;\r\n                case \"color\"      : style[\"fill\"] = tag[\"color\"]; break;\r\n                case \"size\"       : style[\"font-size\"] = tag[\"size\"]; break;\r\n                case \"dx\"         : style[\"dx\"] = tag[\"dx\"]; break;\r\n                case \"dy\"         : style[\"dy\"] = tag[\"dy\"]; break;\r\n                case \"font\"       : style[\"font-family\"] = tag[\"font\"]; break;\r\n                case \"var\"        : style[\"textvar\"] = true; break;\r\n                case \"tag\"        : style[\"tag\"] = tag[\"tag\"]; break;\r\n                case \"lineheight\" : style[\"_line-height\"] = tag[\"lineheight\"]; break;\r\n                case \"sup\": {\r\n                    style[\"baseline-shift\"] = \"super\";\r\n                    style[\"font-size-scale-factor\"] = 0.7;\r\n                    style[\"is-prev-word\"] = true;\r\n                } break;\r\n                case \"sub\": {\r\n                    style[\"baseline-shift\"] = \"-20%\";\r\n                    style[\"font-size-scale-factor\"] = 0.7;\r\n                    style[\"is-prev-word\"] = true;\r\n                } break;\r\n            }\r\n        }\r\n        return style;\r\n    }\r\n}\r\n","/*\r\n* For objects that contain children, having a tag is useful so that the children can be easily accessed.\r\n*/\r\n\r\nexport enum TAG {\r\n    EMPTY = \"empty\",\r\n    LINE = \"line\",\r\n    CIRCLE = \"circle\",\r\n    TEXTVAR = \"textvar\",\r\n    \r\n    // prefix\r\n    ROW_ = \"row_\",\r\n    COL_ = \"col_\",\r\n    \r\n    // arrow\r\n    ARROW_LINE = \"arrow_line\",\r\n    ARROW_HEAD = \"arrow_head\",\r\n    \r\n    // table\r\n    TABLE = \"table\",\r\n    CONTAIN_TABLE = \"contain_table\",\r\n    TABLE_CELL = \"table_cell\",\r\n    TABLE_CONTENT = \"table_content\",\r\n    EMPTY_CELL = \"empty_cell\",\r\n    \r\n    //graph\r\n    GRAPH_AXIS = \"graph_axis_line\",\r\n    GRAPH_TICK = \"graph_tick\",\r\n    GRAPH_TICK_LABEL = \"graph_tick_label\",\r\n    GRAPH_GRID = \"graph_grid\",\r\n}\r\n","import { Vector2, V2, Transform } from './vector.js';\r\nimport { BB_multiline } from './BBcode.js'\r\nimport { TAG } from './tag_names.js'\r\n\r\nfunction assert(condition : boolean, message : string) : void {\r\n    if (!condition) {\r\n        throw new Error(message || \"Assertion failed\");\r\n    }\r\n}\r\n\r\nexport enum DiagramType {\r\n    Polygon = 'polygon',\r\n    Curve   = 'curve',\r\n    Text    = 'text',\r\n    Image   = 'image',\r\n    Diagram = 'diagram',\r\n    MultilineText = 'multilinetext',\r\n}\r\n\r\nexport const DEFAULT_FONTSIZE = \"16\"; // 16px (12pt) is the web default\r\n\r\nexport type Anchor = \r\n    'top-left'    | 'top-center'    | 'top-right'    | \r\n    'center-left' | 'center-center' | 'center-right' | \r\n    'bottom-left' | 'bottom-center' | 'bottom-right' ;\r\n\r\n/**\r\n * Make sure that every function return a new Diagram\r\n * Diagram is immutable to the user\r\n */\r\n\r\nexport type DiagramStyle = {\r\n    \"stroke\"           : string,\r\n    \"fill\"             : string | LinearGradient,\r\n    \"opacity\"          : string,\r\n    \"stroke-width\"     : string, // number\r\n    \"stroke-linecap\"   : string,\r\n    \"stroke-dasharray\" : string, // number[]\r\n    \"stroke-linejoin\"  : string,\r\n    \"vector-effect\"    : string,\r\n    \"filter\"?          : string\r\n    // TODO : add more style\r\n}\r\n\r\nexport type LinearGradient = {\r\n    type: 'linearGradient',\r\n    x1?: string,\r\n    y1?: string,\r\n    x2?: string,\r\n    y2?: string,\r\n    stops: Array<{offset: string, color: string, opacity?: number }>\r\n}\r\n\r\nexport type TextData = {\r\n    \"text\"             : string,\r\n    \"font-family\"      : string,\r\n    \"font-size\"        : string,\r\n    \"font-weight\"      : string,\r\n    \"font-style\"       : string,\r\n    \"text-anchor\"      : string,\r\n    \"dy\"               : string, // used to be \"dominant-baseline\": string,\r\n    \"angle\"            : string,\r\n    \"font-scale\"       : string, // this is a custom attribute that is not present in SVG\r\n    // \"letter-spacing\"   : string,\r\n    // \"word-spacing\"     : string,\r\n    // \"text-decoration\"  : string,\r\n    // \"writing-mode\"     : string,\r\n}\r\n\r\nexport type ImageData = {\r\n    \"src\"    : string,\r\n}\r\n\r\ntype ExtraTspanStyle = {\r\n    \"dy\" : string,\r\n    \"dx\" : string,\r\n    \"textvar\" : boolean,\r\n    \"tag\" : string,\r\n    \"baseline-shift\" : string,\r\n    \"font-size-scale-factor\": number,\r\n    \"is-prev-word\" : boolean, // tag to indicate that this is part of the previous word\r\n}\r\nexport type TextSpanData = {\r\n    \"text\"  : string,\r\n    \"style\" : Partial<TextData> & Partial<DiagramStyle> & Partial<ExtraTspanStyle>,\r\n}\r\nexport type MultilineTextData = {\r\n    \"content\" : TextSpanData[],\r\n    \"scale-factor\" : number,\r\n}\r\n\r\nfunction anchor_to_textdata(anchor : Anchor) : Partial<TextData> {\r\n    // TODO : might want to look at\r\n    // hanging vs text-before-edge\r\n    // ideographic vs text-after-edge\r\n    switch (anchor) {\r\n        case \"top-left\"      : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.75em\"};\r\n        case \"top-center\"    : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.75em\"};\r\n        case \"top-right\"     : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.75em\"};\r\n        case \"center-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.25em\"};\r\n        case \"center-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.25em\"};\r\n        case \"center-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.25em\"};\r\n        case \"bottom-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"-0.25em\"};\r\n        case \"bottom-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"-0.25em\"};\r\n        case \"bottom-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"-0.25em\"};\r\n        default: throw new Error(\"Unknown anchor \" + anchor);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* Diagram Class \r\n*\r\n* Diagram is a tree structure\r\n* Diagram can be a polygon, curve, text, image, or diagram\r\n* Polygon is a closed path\r\n* Curve is an open path\r\n* Diagram is a tree of Diagrams\r\n*/\r\nexport class Diagram {\r\n    type          : DiagramType;\r\n    children      : Diagram[] = [];\r\n    path          : Path | undefined = undefined; // Polygon and Curve have a path\r\n    origin        : Vector2 = new Vector2(0, 0); // position of the origin of the diagram\r\n    style         : Partial<DiagramStyle>      = {};\r\n    textdata      : Partial<TextData>          = {};\r\n    multilinedata : Partial<MultilineTextData> = {};\r\n    imgdata       : Partial<ImageData>         = {};\r\n    mutable       : boolean   = false;\r\n    tags          : string[] = [];\r\n    \r\n    private _bbox_cache : [Vector2, Vector2] | undefined = undefined;\r\n\r\n    constructor(type_ : DiagramType, \r\n        args : { \r\n            path?     : Path, \r\n            children? : Diagram[], \r\n            textdata? : Partial<TextData>, \r\n            imgdata?  : Partial<ImageData>,\r\n            multilinedata? : Partial<MultilineTextData>,\r\n            tags?     : string[],\r\n        } = {}\r\n    ) {\r\n        this.type = type_;\r\n        this.path = args.path;\r\n        if (args.children) { this.children = args.children; }\r\n        if (args.textdata) { this.textdata = args.textdata; }\r\n        if (args.imgdata)  { this.imgdata  = args.imgdata; }\r\n        if (args.tags)     { this.tags     = args.tags; }\r\n        if (args.multilinedata) { this.multilinedata = args.multilinedata; }\r\n    }\r\n\r\n    /**\r\n     * Turn the diagram into a mutable diagram\r\n     */\r\n    public mut() : Diagram {\r\n        this.mutable = true;\r\n        // make path mutable\r\n        if (this.path != undefined) this.path.mutable = true;\r\n        // make all of the children mutable\r\n        for (let i = 0; i < this.children.length; i++) this.children[i].mut();\r\n        return this;\r\n    }\r\n\r\n    public mut_parent_only() : Diagram {\r\n        this.mutable = true;\r\n        // make path mutable\r\n        if (this.path != undefined) this.path.mutable = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Create a copy of the diagram that is immutable\r\n     */\r\n    public immut() : Diagram {\r\n        let newd : Diagram = this.copy();\r\n        newd.mutable = false;\r\n        // make path immutable\r\n        if (this.path != undefined) this.path.mutable = false;\r\n        // make all of the children immutable\r\n        for (let i = 0; i < newd.children.length; i++) newd.children[i].immut();\r\n        return newd;\r\n    }\r\n\r\n    private static deep_setPrototypeOf(obj : any) : void {\r\n        Object.setPrototypeOf(obj, Diagram.prototype);\r\n        let objd : Diagram = obj;\r\n        // convert position and origin_offset to Vector2\r\n        objd.origin = Object.setPrototypeOf(objd.origin, Vector2.prototype);\r\n        // make sure all of the children are Diagram\r\n        for (let c = 0; c < objd.children.length; c++)\r\n            Diagram.deep_setPrototypeOf(objd.children[c]);\r\n\r\n        // set path to Path\r\n        if (objd.path != undefined) {\r\n            Object.setPrototypeOf(objd.path, Path.prototype);\r\n            objd.path = objd.path.copy();\r\n        }\r\n        \r\n        // bbox cache \r\n        if (objd._bbox_cache != undefined && objd._bbox_cache.length == 2) {\r\n            Object.setPrototypeOf(objd._bbox_cache[0], Vector2.prototype);\r\n            Object.setPrototypeOf(objd._bbox_cache[1], Vector2.prototype);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Copy the diagram\r\n     * @return { Diagram }\r\n     */\r\n    public copy() : Diagram {\r\n        // do deepcopy with JSON\r\n        let newd : Diagram = JSON.parse(JSON.stringify(this));\r\n        // turn newd into Diagram\r\n        Diagram.deep_setPrototypeOf(newd);\r\n        return newd;\r\n    }\r\n\r\n    public copy_if_not_mutable() : Diagram {\r\n        return this.mutable ? this : this.copy();\r\n    }\r\n\r\n    /**\r\n     * Append tags to the diagram\r\n     */\r\n    public append_tags(tags : string | string[]) : Diagram {\r\n        let newd = this.copy_if_not_mutable();\r\n        if (!Array.isArray(tags)) tags = [tags];\r\n        for (let tag of tags){\r\n            if(!newd.tags.includes(tag)) newd.tags.push(tag);\r\n        }\r\n        return newd;\r\n    }\r\n    /**\r\n     * Remove tags from the diagram\r\n     */\r\n    public remove_tags(tags : string | string[]) : Diagram {\r\n        let newd = this.copy_if_not_mutable();\r\n        newd.tags = newd.tags.filter(t => !tags.includes(t));\r\n        return newd;\r\n    }\r\n    /**\r\n     * Reset all tags of the diagram\r\n     */\r\n    public reset_tags() : Diagram {\r\n        let newd = this.copy_if_not_mutable();\r\n        newd.tags = [];\r\n        return newd;\r\n    }\r\n    /**\r\n    * Check if the diagram contains a tag\r\n    */\r\n    public contain_tag(tag : string) : boolean {\r\n        return this.tags.includes(tag);\r\n    }\r\n    public contain_all_tags(tags : string[]) : boolean {\r\n        for (let tag of tags){\r\n            if (!this.tags.includes(tag)) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Collect all children and subchildren of the diagram\r\n     * helper function for flatten()\r\n     */\r\n    private collect_children() : Diagram[] {\r\n        let children : Diagram[] = [];\r\n        if (this.type == DiagramType.Diagram) {\r\n            for (let c of this.children) {\r\n                children = children.concat(c.collect_children());\r\n            }\r\n        } else {\r\n            children.push(this);\r\n        }\r\n        return children;\r\n    }\r\n\r\n    /**\r\n     * Flatten the children structure of the diagram\r\n     * so that the diagram only has one level of children\r\n     * \\* implemented for performance reason\r\n     */\r\n    public flatten() : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        newd.children = newd.collect_children();\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Apply a function to the diagram\r\n     * @param func function to apply\r\n     * func takes in a diagram and returns a diagram\r\n     */\r\n    public apply(func : (d : Diagram) => Diagram) : Diagram {\r\n        return func(this.copy_if_not_mutable());\r\n    }\r\n\r\n    /**\r\n     * Apply a function to the diagram and all of its children recursively\r\n     * @param func function to apply\r\n     * func takes in a diagram and returns a diagram\r\n     */\r\n    public apply_recursive(func : (d : Diagram) => Diagram) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        // apply to self\r\n        newd = func(newd);\r\n        // apply to children\r\n        for (let i = 0; i < newd.children.length; i++) {\r\n            newd.children[i] = newd.children[i].apply_recursive(func);\r\n        }\r\n        return newd;\r\n    }\r\n    \r\n    /**\r\n    * Apply a function to the diagram and all of its children recursively\r\n    * The function is only applied to the diagrams that contain a specific tag\r\n    * @param tags the tag to filter the diagrams\r\n    * @param func function to apply\r\n    * func takes in a diagram and returns a diagram\r\n    */ \r\n    public apply_to_tagged_recursive(tags : string | string[], func : (d : Diagram) => Diagram) : Diagram {\r\n        if (!Array.isArray(tags)) tags = [tags];\r\n        \r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        // if the diagram has the tag, apply the function to self\r\n        if (newd.contain_all_tags(tags)) newd = func(newd);\r\n        // apply to children\r\n        for (let i = 0; i < newd.children.length; i++) {\r\n            newd.children[i] = newd.children[i].apply_to_tagged_recursive(tags, func);\r\n        }\r\n        return newd;\r\n    }\r\n    \r\n    /**\r\n    * Get all the diagrams that contain a specific tag\r\n    * @param tags the tag to filter the diagrams\r\n    * @return a list of diagrams\r\n    */\r\n    public get_tagged_elements(tags : string | string[] ) : Diagram[] {\r\n        if (!Array.isArray(tags)) tags = [tags];\r\n        let result = [];\r\n        \r\n        if (this.contain_all_tags(tags)) result.push(this.copy_if_not_mutable());\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            result = result.concat(this.children[i].get_tagged_elements(tags));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Combine another diagram with this diagram\r\n     * @param diagrams a diagram or a list of diagrams\r\n     */\r\n    public combine(...diagrams : Diagram[]) : Diagram {\r\n        return diagram_combine(this, ...diagrams);\r\n    }\r\n\r\n    /**\r\n     * Convert the diagram to a curve\r\n     * If the diagram is a polygon, convert it to a curve\r\n     * If the diagram is a Diagram, convert all of the children to curves\r\n     */\r\n    public to_curve() : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Polygon) {\r\n            newd.type = DiagramType.Curve;\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.to_curve());\r\n            for (let i = 0; i < newd.children.length; i++) \r\n                newd.children[i] = newd.children[i].to_curve();\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Convert the diagram to a polygon\r\n     * If the diagram is a curve, convert it to a polygon\r\n     * If the diagram is a Diagram, convert all of the children to polygons\r\n     */\r\n    public to_polygon() : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Curve) {\r\n            newd.type = DiagramType.Polygon;\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.to_polygon());\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].to_polygon();\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Add points to the diagram\r\n     * if the diagram is a polygon or curve, add points to the path\r\n     * if the diagram is a diagram, add points to the last polygon or curve child\r\n     * @param points points to add\r\n     */\r\n    public add_points(points : Vector2[]) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\r\n            if (newd.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n            newd.path = newd.path.add_points(points);\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // add point to the last polygon or curve child\r\n            let last_child = newd.children[newd.children.length - 1];\r\n            newd.children[newd.children.length - 1] = last_child.add_points(points);\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    private update_style(stylename : keyof Diagram['style'], stylevalue : string | LinearGradient, excludedType? : DiagramType[]) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (excludedType?.includes(newd.type)) { \r\n            return newd; \r\n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve \r\n            || newd.type == DiagramType.Text || newd.type == DiagramType.Image \r\n            || newd.type == DiagramType.MultilineText\r\n        ) {\r\n           if(stylename === \"fill\") {\r\n            newd.style[stylename] = stylevalue;\r\n           } else { \r\n            newd.style[stylename] = stylevalue as string;\r\n           }\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.update_style(stylename, stylevalue, excludedType));\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].update_style(stylename, stylevalue, excludedType);\r\n        } else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\r\n        }\r\n        return newd;\r\n    }\r\n    \r\n    /* * Clone style from another diagram */\r\n    public clone_style_from(diagram : Diagram) : Diagram {\r\n        return this.apply_recursive(d => {\r\n            d.style = {...diagram.style};\r\n            return d;\r\n        });\r\n    }\r\n\r\n    public fill(color : string | LinearGradient) : Diagram { \r\n        return this.update_style('fill', color, [DiagramType.Text]);\r\n    }\r\n    public stroke(color : string) : Diagram { \r\n        return this.update_style('stroke', color, [DiagramType.Text]);\r\n    }\r\n    public opacity(opacity : number) : Diagram {\r\n        return this.update_style('opacity', opacity.toString());\r\n    }\r\n    public strokewidth(width : number) : Diagram { \r\n        return this.update_style('stroke-width', width.toString(), [DiagramType.Text]);\r\n    }\r\n    public strokelinecap(linecap : 'butt' | 'round' | 'square') : Diagram {\r\n        return this.update_style('stroke-linecap', linecap);\r\n    }\r\n    public strokelinejoin(linejoin : 'arcs' | 'bevel' | 'miter' | 'miter-clip' | 'round') : Diagram {\r\n        return this.update_style('stroke-linejoin', linejoin);\r\n    }\r\n    public strokedasharray(dasharray : number[]) : Diagram {\r\n        return this.update_style('stroke-dasharray', dasharray.join(','));\r\n    }\r\n    public vectoreffect(vectoreffect : 'none' | 'non-scaling-stroke' | 'non-scaling-size' | 'non-rotation' | 'fixed-position'\r\n) : Diagram {\r\n        return this.update_style('vector-effect', vectoreffect);\r\n    }\r\n    public filter(filter : string) : Diagram {\r\n        return this.update_style('filter', `url(#${filter})`);\r\n    }\r\n\r\n    public textfill(color : string) : Diagram {\r\n        return this.update_style('fill', color, [DiagramType.Polygon, DiagramType.Curve]);\r\n    }\r\n    public textstroke(color : string) : Diagram {\r\n        return this.update_style('stroke', color, [DiagramType.Polygon, DiagramType.Curve]);\r\n    }\r\n    public textstrokewidth(width : number) : Diagram {\r\n        return this.update_style('stroke-width', width.toString(), [DiagramType.Polygon, DiagramType.Curve]);\r\n    }\r\n\r\n\r\n    private update_textdata(textdataname : keyof Diagram['textdata'], textdatavalue : string) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Text || newd.type == DiagramType.MultilineText) {\r\n            newd.textdata[textdataname] = textdatavalue;\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.update_textdata(textdataname, textdatavalue));\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].update_textdata(textdataname, textdatavalue);\r\n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\r\n            // do nothing\r\n        } else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\r\n        }\r\n        return newd;\r\n    }\r\n    public fontfamily(fontfamily : string) : Diagram {\r\n        return this.update_textdata('font-family', fontfamily);\r\n    }\r\n    public fontstyle(fontstyle : string) : Diagram {\r\n        return this.update_textdata('font-style', fontstyle);\r\n    }\r\n    public fontsize(fontsize : number) : Diagram {\r\n        return this.update_textdata('font-size', fontsize.toString());\r\n    }\r\n    public fontweight(fontweight : 'normal' | 'bold' | 'bolder' | 'lighter' | number ) : Diagram {\r\n        return this.update_textdata('font-weight', fontweight.toString());\r\n    }\r\n    public fontscale(fontscale : number | 'auto') : Diagram {\r\n        return this.update_textdata('font-scale', fontscale.toString());\r\n    }\r\n    public textanchor(textanchor : 'start' | 'middle' | 'end' ) : Diagram {\r\n        return this.update_textdata('text-anchor', textanchor);\r\n    }\r\n    public textdy(dy : string) : Diagram {\r\n        return this.update_textdata('dy', dy);\r\n    }\r\n    public textangle(angle : number){\r\n        return this.update_textdata('angle', angle.toString());\r\n    }\r\n    public text_tovar() : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Text) {\r\n            newd = newd.append_tags(TAG.TEXTVAR);\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.text_tovar());\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].text_tovar();\r\n        }\r\n        return newd;\r\n    }\r\n    public text_totext() : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (newd.type == DiagramType.Text) {\r\n            newd = newd.remove_tags('textvar');\r\n        } else if (newd.type == DiagramType.Diagram) {\r\n            // newd.children = newd.children.map(c => c.text_totext());\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].text_totext();\r\n        }\r\n        return newd;\r\n    }\r\n            \r\n\r\n\r\n    /**\r\n     * Get the bounding box of the diagram\r\n     * @returns [min, max] where min is the top left corner and max is the bottom right corner\r\n     */\r\n    public bounding_box() : [Vector2, Vector2] {\r\n        if (this._bbox_cache != undefined) return this._bbox_cache;\r\n        let minx = Infinity, miny = Infinity;\r\n        let maxx = -Infinity, maxy = -Infinity;\r\n        if (this.type == DiagramType.Diagram){\r\n                for (let c = 0; c < this.children.length; c++){\r\n                    let child = this.children[c];\r\n                    let [min, max] = child.bounding_box();\r\n                    minx = Math.min(minx, min.x);\r\n                    miny = Math.min(miny, min.y);\r\n                    maxx = Math.max(maxx, max.x);\r\n                    maxy = Math.max(maxy, max.y);\r\n                }\r\n                const bbox = [new Vector2(minx, miny), new Vector2(maxx, maxy)] as [Vector2, Vector2];\r\n                this._bbox_cache = bbox;\r\n                return bbox;\r\n        }\r\n        else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon \r\n            || this.type == DiagramType.Image){\r\n                if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n                for (let p = 0; p < this.path.points.length; p++) {\r\n                    let point = this.path.points[p];\r\n                    minx = Math.min(minx, point.x);\r\n                    miny = Math.min(miny, point.y);\r\n                    maxx = Math.max(maxx, point.x);\r\n                    maxy = Math.max(maxy, point.y);\r\n                }\r\n                const bbox = [new Vector2(minx, miny), new Vector2(maxx, maxy)] as [Vector2, Vector2];\r\n                this._bbox_cache = bbox;\r\n                return bbox;\r\n        } \r\n        else if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText){\r\n            const bbox = [this.origin.copy(), this.origin.copy()] as [Vector2, Vector2];\r\n            this._bbox_cache = bbox;\r\n            return bbox;\r\n        }\r\n        else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform the diagram by a function\r\n     * @param transform_function function to transform the diagram\r\n     */\r\n    public transform(transform_function : (p : Vector2) => Vector2) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        newd._bbox_cache = undefined;\r\n        // transform all children\r\n        // newd.children = newd.children.map(c => c.transform(transform_function));\r\n        for (let i = 0; i < newd.children.length; i++)\r\n            newd.children[i] = newd.children[i].transform(transform_function);\r\n        // transform path\r\n        if (newd.path != undefined) newd.path = newd.path.transform(transform_function);\r\n        // transform origin\r\n        newd.origin = transform_function(newd.origin);\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Translate the diagram by a vector\r\n     * @param v vector to translate\r\n     */\r\n    public translate(v : Vector2) : Diagram {\r\n        // return this.transform(Transform.translate(v));\r\n        const prev_cached_bbox = this._bbox_cache;\r\n        const newd = this.transform(Transform.translate(v));\r\n        if (prev_cached_bbox != undefined) {\r\n            newd._bbox_cache = prev_cached_bbox.map(p => Transform.translate(v)(p)) as [Vector2, Vector2];\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * move the diagram to a position\r\n     * @param v position to move to (if left undefined, move to the origin)\r\n     */\r\n    public position(v : Vector2 = new Vector2(0,0)) : Diagram {\r\n        let dv = v.sub(this.origin)\r\n        return this.translate(dv);\r\n    }\r\n\r\n    /**\r\n     * Rotate the diagram by an angle around a pivot\r\n     * @param angle angle to rotate\r\n     * @param pivot pivot point, if left undefined, rotate around the origin\r\n     */\r\n    public rotate(angle : number, pivot : Vector2 | undefined = undefined) : Diagram {\r\n        if (pivot == undefined) { pivot = this.origin; }\r\n        return this.transform(Transform.rotate(angle, pivot));\r\n    }\r\n\r\n    /**\r\n     * Scale the diagram by a scale around a origin\r\n     * @param scale scale to scale (x, y)\r\n     * @param origin origin point, if left undefined, scale around the origin\r\n     */\r\n    public scale(scale : Vector2 | number, origin? : Vector2) : Diagram {\r\n        if (origin == undefined) { origin = this.origin; }\r\n        if (typeof scale == 'number') { scale = new Vector2(scale, scale); }\r\n        return this.transform(Transform.scale(scale, origin));\r\n    }\r\n\r\n    /**\r\n     * Scale texts contained in the diagram by a scale\r\n     * @param scale scaling factor\r\n     */\r\n    public scaletext(scale : number) : Diagram {\r\n        return this.apply_recursive(d => {\r\n            switch (d.type) {\r\n                case DiagramType.Text: {\r\n                    let fontsize = parseFloat(d.textdata['font-size'] || DEFAULT_FONTSIZE);\r\n                    let newd = d.copy_if_not_mutable();\r\n                    newd.textdata['font-size'] = (fontsize * scale).toString();\r\n                    return newd;\r\n                }\r\n                case DiagramType.MultilineText: {\r\n                    let newd = d.copy_if_not_mutable();\r\n                    newd.multilinedata['scale-factor'] = (newd.multilinedata['scale-factor'] || 1) * scale;\r\n                    return newd;\r\n                }\r\n                default: return d;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Skew the diagram in the x direction by an angle around a base\r\n     * @param angle angle to skew\r\n     * @param base base point, if left undefined, skew around the origin\r\n     */\r\n    public skewX(angle : number, base? : Vector2) : Diagram {\r\n        if (base == undefined) { base = this.origin; }\r\n        return this.transform(Transform.skewX(angle, base.y));\r\n    }\r\n\r\n    /**\r\n     * Skew the diagram in the y direction by an angle around a base\r\n     * @param angle angle to skew\r\n     * @param base base point, if left undefined, skew around the origin\r\n     */\r\n    public skewY(angle : number, base? : Vector2) : Diagram {\r\n        if (base == undefined) { base = this.origin; }\r\n        return this.transform(Transform.skewY(angle, base.x));\r\n    }\r\n\r\n    /**\r\n     * Reflect the diagram over a point\r\n     * @param p point to reflect over\r\n     */\r\n    public reflect_over_point(p : Vector2) {\r\n        return this.transform(Transform.reflect_over_point(p));\r\n    }\r\n\r\n    /**\r\n     * Reflect the diagram over a line defined by two points\r\n     * @param p1 point on the line\r\n     * @param p2 point on the line\r\n     */\r\n    public reflect_over_line(p1 : Vector2, p2 : Vector2) {\r\n        return this.transform(Transform.reflect_over_line(p1, p2));\r\n    }\r\n\r\n    /**\r\n     * Reflect the diagram\r\n     * if given 0 arguments, reflect over the origin\r\n     * if given 1 argument, reflect over a point p1\r\n     * if given 2 arguments, reflect over a line defined by two points p1 and p2\r\n     * @param p1 point\r\n     * @param p2 point\r\n     */\r\n    public reflect(p1? : Vector2, p2? : Vector2){\r\n        if (p1 == undefined && p2 == undefined) {\r\n            return this.reflect_over_point(this.origin);\r\n        } else if (p1 != undefined && p2 == undefined) {\r\n            return this.reflect_over_point(p1);\r\n        } else if (p1 != undefined && p2 != undefined) {\r\n            return this.reflect_over_line(p1, p2);\r\n        } else {\r\n            throw new Error(\"Unreachable\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Vertical flip\r\n     * Reflect the diagram over a horizontal line y = a\r\n     * @param a y value of the line\r\n     * if left undefined, flip over the origin\r\n     */\r\n    public vflip(a? : number) {\r\n        if (a == undefined) { a = this.origin.y; }\r\n        return this.reflect(new Vector2(0, a), new Vector2(1, a));\r\n    }\r\n\r\n    /**\r\n     * Horizontal flip\r\n     * Reflect the diagram over a vertical line x = a\r\n     * @param a x value of the line\r\n     * if left undefined, flip over the origin\r\n     */\r\n    public hflip(a? : number){\r\n        if (a == undefined) { a = this.origin.x; }\r\n        return this.reflect(new Vector2(a, 0), new Vector2(a, 1));\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the position of the anchor of the diagram\r\n     * @param anchor anchor to get, anchors can be\r\n     *   'top-left', 'top-center', 'top-right'\r\n     *   'center-left', 'center-center', 'center-right'\r\n     *   'bottom-left', 'bottom-center', 'bottom-right'\r\n     * @returns the position of the anchor\r\n     */\r\n    public get_anchor(anchor : Anchor) : Vector2 {\r\n        let [min, max] = this.bounding_box();\r\n        let minx = min.x, miny = min.y;\r\n        let maxx = max.x, maxy = max.y;\r\n        let midx = (minx + maxx) / 2;\r\n        let midy = (miny + maxy) / 2;\r\n        switch (anchor) {\r\n            case \"top-left\"      : return new Vector2(minx, maxy);\r\n            case \"top-center\"    : return new Vector2(midx, maxy);\r\n            case \"top-right\"     : return new Vector2(maxx, maxy);\r\n            case \"center-left\"   : return new Vector2(minx, midy);\r\n            case \"center-center\" : return new Vector2(midx, midy);\r\n            case \"center-right\"  : return new Vector2(maxx, midy);\r\n            case \"bottom-left\"   : return new Vector2(minx, miny);\r\n            case \"bottom-center\" : return new Vector2(midx, miny);\r\n            case \"bottom-right\"  : return new Vector2(maxx, miny);\r\n            default: throw new Error(\"Unknown anchor \" + anchor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the origin of the diagram to a position or anchor\r\n     * @param pos position to move the origin to (Vector2), or anchor to move the origin to.\r\n     * anchors can be\r\n     *  'top-left', 'top-center', 'top-right'\r\n     *  'center-left', 'center-center', 'center-right'\r\n     *  'bottom-left', 'bottom-center', 'bottom-right'\r\n     * * for texts, use `move_origin_text()`\r\n     */\r\n    public move_origin(pos : Vector2 | Anchor) : Diagram {\r\n        let newd : Diagram = this.copy_if_not_mutable();\r\n        if (pos instanceof Vector2) {\r\n            newd.origin = pos;\r\n        } else {\r\n            newd.origin = newd.get_anchor(pos);\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Move the origin of text diagram to an anchor\r\n     * @param anchor anchor to move the origin to.\r\n     * anchors can be\r\n     * 'top-left', 'top-center', 'top-right'\r\n     * 'center-left', 'center-center', 'center-right'\r\n     * 'bottom-left', 'bottom-center', 'bottom-right'\r\n     */\r\n    private __move_origin_text(anchor : Anchor) : Diagram {\r\n        // for text, use text-anchor and dominant-baseline\r\n        let newd = this.copy_if_not_mutable();\r\n        let textdata = anchor_to_textdata(anchor);\r\n        newd.textdata['text-anchor'] = textdata['text-anchor'];\r\n        newd.textdata['dy'] = textdata['dy'];\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Move the origin of text diagram to a position\r\n     * @param anchor anchor to move the origin to.\r\n     * anchors can be\r\n     * 'top-left', 'top-center', 'top-right'\r\n     * 'center-left', 'center-center', 'center-right'\r\n     * 'bottom-left', 'bottom-center', 'bottom-right'\r\n     *\r\n     */\r\n    public move_origin_text(anchor : Anchor) : Diagram {\r\n        let newd = this.copy_if_not_mutable();\r\n        if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText) {\r\n            newd = newd.__move_origin_text(anchor);\r\n        } else if (this.type == DiagramType.Diagram) {\r\n            //newd.children = newd.children.map(c => c.move_origin_text(anchor));\r\n            for (let i = 0; i < newd.children.length; i++)\r\n                newd.children[i] = newd.children[i].move_origin_text(anchor);\r\n        } else {\r\n            // do nothing\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    public path_length() : number {\r\n        if (this.type == DiagramType.Diagram) {\r\n            let length = 0;\r\n            for (let c = 0; c < this.children.length; c++) {\r\n                length += this.children[c].path_length();\r\n            }\r\n            return length;\r\n        } else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon) {\r\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n            return this.path.length();\r\n        } else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Reverse the order of the points in the path\r\n    */\r\n    public reverse_path() {\r\n        let newd = this.copy_if_not_mutable();\r\n        if (newd.path) {\r\n            newd.path = newd.path?.reverse();\r\n        }\r\n        return newd;\r\n    }\r\n\r\n    /**\r\n     * Get the point on the path at t\r\n     * Path can be described parametrically in the form of (x(t), y(t))\r\n     * Path starts at t=0 and ends at t=1\r\n     * @param t parameter\r\n     * @param segment_index (only works for polygon and curves)\r\n     * If segment_index (n) is defined, get the point at the nth segment\r\n     * If segment_index (n) is defined, t can be outside of [0, 1] and will return the extrapolated point\r\n     * @returns the position of the point\r\n     */\r\n    public parametric_point(t : number, segment_index? : number) : Vector2 {\r\n        if (this.type == DiagramType.Diagram) {\r\n            // use entire length, use the childrens\r\n            let cumuative_length = [];\r\n            let length   = 0.0;\r\n            for (let c = 0; c < this.children.length; c++) {\r\n                length += this.children[c].path_length();\r\n                cumuative_length.push(length);\r\n            }\r\n            let total_length = length;\r\n            let cumulative_t = cumuative_length.map(l => l / total_length);\r\n\r\n            // figure out which children t is in\r\n            for (let i = 0; i < cumulative_t.length; i++) {\r\n                if (t <= cumulative_t[i]) {\r\n                    let child_id = i;\r\n\r\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\r\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\r\n                    return this.children[child_id].parametric_point(segment_t);\r\n                }\r\n            }\r\n            throw Error(\"Unreachable\");\r\n        } else if (this.type == DiagramType.Curve) {\r\n            // get the point on the path\r\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n            return this.path.parametric_point(t, false, segment_index);\r\n        } else if (this.type == DiagramType.Polygon) {\r\n            // get the point on the path\r\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n            return this.path.parametric_point(t, true, segment_index);\r\n        } else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\r\n        }\r\n    }\r\n\r\n    public debug_bbox() : Diagram {\r\n        // TODO : let user supply the styling function\r\n        let style_bbox = (d : Diagram) => {\r\n            return d.fill('none').stroke('gray').strokedasharray([5,5])\r\n        };\r\n\r\n        let [min, max] = this.bounding_box();\r\n        let rect_bbox = polygon([\r\n            new Vector2(min.x, min.y), new Vector2(max.x, min.y), \r\n            new Vector2(max.x, max.y), new Vector2(min.x, max.y)\r\n        ]).apply(style_bbox);\r\n\r\n        let origin_x = text('+').position(this.origin)\r\n\r\n        return rect_bbox.combine(origin_x);\r\n    }\r\n\r\n    public debug(show_index : boolean = true) : Diagram {\r\n        // TODO : let user supply the styling function\r\n        let style_path = (d : Diagram) => {\r\n            return d.fill('none').stroke('red').strokedasharray([5,5])\r\n        };\r\n        let style_index = (d : Diagram) => {\r\n            let bg = d.textfill('white').textstroke('white').textstrokewidth(5);\r\n            let dd = d.fill('black');\r\n            return bg.combine(dd);\r\n        };\r\n\r\n        // handle each type separately\r\n        if (this.type == DiagramType.Diagram) {\r\n            return this.debug_bbox();\r\n        } \r\n        else if (this.type == DiagramType.Text){\r\n            // return empty at diagram origin\r\n            return empty(this.origin);\r\n        }\r\n        else if (this.type == DiagramType.Polygon || this.type == DiagramType.Curve \r\n            || this.type == DiagramType.Image){\r\n            let f_obj = this.type == DiagramType.Polygon || DiagramType.Image ? polygon : curve;\r\n\r\n            let deb_bbox = this.debug_bbox();\r\n\r\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\r\n            let deb_object = f_obj(this.path.points).apply(style_path);\r\n\r\n            // if show_index is false, return only the bbox and polygon\r\n            if (show_index == false) { return deb_bbox.combine(deb_object); }\r\n\r\n            // iterate for all path points\r\n            let points = this.path.points;\r\n            // let point_texts = points.map((p, i) => text(i.toString()).position(p).apply(style_index));\r\n            let point_texts : Diagram[] = [];\r\n            let prev_point : Vector2 | undefined = undefined;\r\n\r\n            let [min, max] = this.bounding_box();\r\n            let minimum_dist_tolerance = Math.min(max.x - min.x, max.y - min.y) / 10;\r\n            for (let i = 0; i < points.length; i++) {\r\n                // push to point_texts only if far enough from prev_point\r\n                let dist_to_prev = prev_point == undefined ? Infinity : points[i].sub(prev_point).length();\r\n                if (dist_to_prev < minimum_dist_tolerance) continue;\r\n\r\n                point_texts.push(text(i.toString()).position(points[i]).apply(style_index));\r\n                prev_point = points[i];\r\n            }\r\n\r\n            return deb_bbox.combine(deb_object,...point_texts);\r\n        }\r\n        else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\r\n        }\r\n    }\r\n    \r\n    public is_empty() : boolean {\r\n        return this.contain_tag(TAG.EMPTY);\r\n    }\r\n}\r\n\r\nexport class Path {\r\n    mutable : boolean = false;\r\n    constructor(public points : Vector2[]) { }\r\n\r\n    copy() : Path {\r\n        let newpoints = this.points.map(p => new Vector2(p.x,p.y));\r\n        return new Path(newpoints);\r\n    }\r\n    copy_if_not_mutable() : Path {\r\n        return this.mutable ? this : this.copy();\r\n    }\r\n    \r\n    /**\r\n    * Reverse the order of the points in the path\r\n    */\r\n    public reverse() : Path {\r\n        let newp : Path = this.copy_if_not_mutable();\r\n        newp.points = newp.points.reverse();\r\n        return newp;\r\n    }\r\n\r\n    /**\r\n     * Get the length of the path\r\n     */\r\n    public length() : number {\r\n        let length = 0;\r\n        for (let i = 1; i < this.points.length; i++) {\r\n            length += this.points[i].sub(this.points[i-1]).length();\r\n        }\r\n        return length;\r\n    }\r\n\r\n    /**\r\n     * add points to the path\r\n     * @param points points to add\r\n     */\r\n    public add_points(points : Vector2[]) : Path {\r\n        let newp : Path = this.copy_if_not_mutable();\r\n        newp.points = newp.points.concat(points);\r\n        return newp;\r\n    }\r\n\r\n    /**\r\n     * Get the point on the path at t \r\n     * Path can be described parametrically in the form of (x(t), y(t))\r\n     * Path starts at t=0 and ends at t=1\r\n     * @param t parameter\r\n     * @param closed if true, the path is closed\r\n     * @param segment_index \r\n     * If `segment_index` (n) is defined, get the point at the nth segment.\r\n     * If `segment_index` (n) is defined, t can be outside of [0, 1] and will return the extrapolated point.\r\n     * @returns the position of the point\r\n    */\r\n    public parametric_point(t : number, closed : boolean = false, segment_index? : number) : Vector2 {\r\n        let extended_points = this.points;\r\n        if (closed) extended_points = this.points.concat(this.points[0]);\r\n        // for a closed path, there's an extra segment connecting the last point to the first point\r\n\r\n        if (segment_index == undefined) { \r\n            if (t < 0 || t > 1) { throw Error(\"t must be between 0 and 1\"); }\r\n            // use entire length\r\n            let cumulative_length = [];\r\n            let length   = 0.0;\r\n            for (let i = 1; i < extended_points.length; i++) {\r\n                length += extended_points[i].sub(extended_points[i-1]).length();\r\n                cumulative_length.push(length);\r\n            }\r\n            let total_length = length;\r\n            let cumulative_t = cumulative_length.map(l => l / total_length);\r\n            // figure out which segment t is in\r\n            for (let i = 0; i < cumulative_t.length; i++) {\r\n                if (t <= cumulative_t[i]) {\r\n                    let segment_id = i;\r\n\r\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\r\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\r\n                    return this.parametric_point(segment_t, closed, segment_id);\r\n                }\r\n            }\r\n            // segment must have been retrieved at this point\r\n            throw Error(\"Unreachable\");\r\n        } else {\r\n            // take nth segment\r\n            if (segment_index < 0 || segment_index > extended_points.length - 1) { \r\n                throw Error(\"segment_index must be between 0 and n-1\"); \r\n            }\r\n            let start = extended_points[segment_index];\r\n            let end   = extended_points[segment_index + 1];\r\n            let dir : Vector2 = end.sub(start);\r\n            return start.add(dir.scale(t));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tranfrom the path by a function\r\n     * @param transform_function function to transform the path\r\n     */\r\n    public transform(transform_function : (p : Vector2) => Vector2) : Path {\r\n        let newp : Path = this.copy_if_not_mutable();\r\n        // transform all the points\r\n        // newp.points = newp.points.map(p => transform_function(p));\r\n        for (let i = 0; i < newp.points.length; i++) newp.points[i] = transform_function(newp.points[i]);\r\n        return newp;\r\n    }\r\n}\r\n\r\n/**\r\n * Combine multiple diagrams into one diagram\r\n * @param diagrams list of diagrams to combine\r\n * @returns a diagram\r\n */\r\nexport function diagram_combine(...diagrams : Diagram[]) : Diagram {\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = diagrams.map(d => d.copy_if_not_mutable());\r\n\r\n    // check if all children is mutable\r\n    // if they are, then set the new diagram to be mutable\r\n    let all_children_mutable = true;\r\n    for (let i = 0; i < newdiagrams.length; i++) {\r\n        if (!newdiagrams[i].mutable) { \r\n            all_children_mutable = false; \r\n            break; \r\n        }\r\n    }\r\n\r\n    let newd = new Diagram(DiagramType.Diagram, {children : newdiagrams});\r\n    newd.mutable = all_children_mutable;\r\n    return newd.move_origin(diagrams[0].origin);\r\n    // return newd.move_origin(Anchor.CenterCenter);\r\n    // i think it's better to keep the origin at the origin of the first diagram\r\n}\r\n\r\n// ====== function helpers to create primitives =========\r\n\r\n\r\n/**\r\n * Create a curve from a list of points\r\n * @param points list of points\r\n * @returns a curve diagram\r\n */\r\nexport function curve(points : Vector2[]) : Diagram {\r\n    let path : Path = new Path(points);\r\n    let curve = new Diagram(DiagramType.Curve, {path : path});\r\n    return curve;\r\n}\r\n\r\n/**\r\n * Create a line from start to end \r\n * @param start start point\r\n * @param end end point\r\n * @returns a line diagram\r\n */\r\nexport function line(start : Vector2, end : Vector2) : Diagram {\r\n    return curve([start, end]).append_tags(TAG.LINE);\r\n}\r\n\r\n\r\n/**\r\n * Create a polygon from a list of points\r\n * @param points list of points\r\n * @returns a polygon diagram\r\n */\r\nexport function polygon(points: Vector2[]) : Diagram {\r\n    assert(points.length >= 3, \"Polygon must have at least 3 points\");\r\n    let path : Path = new Path(points);\r\n\r\n    // create diagram\r\n    let polygon = new Diagram(DiagramType.Polygon, {path : path});\r\n    return polygon;\r\n}\r\n\r\n/**\r\n * Create an empty diagram, contain just a single point\r\n * @param v position of the point\r\n * @returns an empty diagram\r\n */\r\nexport function empty(v : Vector2 = V2(0,0)) : Diagram {\r\n    let emp = curve([v]).append_tags(TAG.EMPTY);\r\n    return emp;\r\n}\r\n\r\n/**\r\n * Create a text diagram\r\n * @param str text to display\r\n * @returns a text diagram\r\n */\r\nexport function text(str : string) : Diagram {\r\n    let dtext = new Diagram(DiagramType.Text, {\r\n        textdata : { text : str, \"font-size\" : DEFAULT_FONTSIZE },\r\n        path : new Path([new Vector2(0, 0)]),\r\n    });\r\n    return dtext;\r\n}\r\n\r\n/**\r\n * Create an image diagram\r\n * @param src image source\r\n * @param width width of the image\r\n * @param height height of the image\r\n * @returns an image diagram\r\n */\r\nexport function image(src : string, width : number, height: number){\r\n    let imgdata : ImageData = { src }\r\n    // path: bottom-left, bottom-right, top-right, top-left\r\n    let path    : Path      = new Path([\r\n        V2(-width/2, -height/2), V2(width/2, -height/2),\r\n        V2(width/2, height/2), V2(-width/2, height/2),\r\n    ]);\r\n    let img = new Diagram(DiagramType.Image, {imgdata : imgdata, path : path});\r\n    return img;\r\n}\r\n\r\n/**\r\n * Create a multiline text diagram\r\n * @param strs list of text to display\r\n */\r\nexport function multiline(spans : ([string] | [string,Partial<TextData>])[]) : Diagram {\r\n    let tspans : TextSpanData[] = [];\r\n    for (let i = 0; i < spans.length; i++) {\r\n        let text = spans[i][0];\r\n        let style = spans[i][1] ?? {};\r\n        tspans.push({text, style});\r\n    }\r\n    let dmulti = new Diagram(DiagramType.MultilineText, {\r\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\r\n        path : new Path([new Vector2(0, 0)]),\r\n    });\r\n    return dmulti;\r\n}\r\n\r\nexport function multiline_bb(bbstr : string, linespace? : string, split_by_word : boolean = false) : Diagram {\r\n    let tspans : TextSpanData[] = BB_multiline.from_BBCode(bbstr,linespace) as TextSpanData[];\r\n    if (split_by_word) tspans = BB_multiline.split_tspans_by_words(tspans);\r\n    let dmulti = new Diagram(DiagramType.MultilineText, {\r\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\r\n        path : new Path([new Vector2(0, 0)]),\r\n    });\r\n    return dmulti;\r\n}\r\n\r\n\r\n// END primitives =============================\r\n\r\nexport function diagram_from_jsonstring(str : string) : Diagram {\r\n    try {\r\n        // turn str into JSON object\r\n        let d : Diagram = JSON.parse(str);\r\n        // turn d into Diagram\r\n        Object.setPrototypeOf(d, Diagram.prototype);\r\n        d = d.copy();\r\n        return d;\r\n    } catch (e) {\r\n        // if there's a mistake, return an empty diagram\r\n        console.warn(e);\r\n        return empty(new Vector2(0,0));\r\n    }\r\n}\r\n","import { Vector2, V2 } from \"./vector.js\";\r\n\r\n/**\r\n * Helper function to convert from degrees to radians\r\n */\r\nexport function to_radian(angle: number) : number {\r\n    return angle * Math.PI / 180;\r\n}\r\n\r\n/**\r\n * Helper function to convert from radians to degrees\r\n */\r\nexport function to_degree(angle: number) : number {\r\n    return angle * 180 / Math.PI;\r\n}\r\n\r\n\r\n\r\nexport function array_repeat<T>(arr : T[], len : number) : T[] {\r\n    let new_arr : T[] = [];\r\n    for (let i = 0; i < len; i++) {\r\n        new_arr.push(arr[i % arr.length]);\r\n    }\r\n    return new_arr;\r\n}\r\n\r\n/**\r\n * Create a equivalently spaced array of numbers from start to end (inclusive) \r\n * [start, end]\r\n * @param start start value\r\n * @param end end value\r\n * @param n number of points\r\n */\r\nexport function linspace(start: number, end: number, n: number = 100) : number[] {\r\n    let result = [];\r\n    let step = (end - start) / (n - 1);\r\n    for (let i = 0; i < n; i++) {\r\n        result.push(start + step * i);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Create a equivalently spaced array of numbers from start to end (exclusice) \r\n * [start, end)\r\n * @param start start value\r\n * @param end end value\r\n * @param n number of points\r\n */\r\nexport function linspace_exc(start: number, end: number, n: number = 100) : number[] {\r\n    let result = [];\r\n    let step = (end - start) / n;\r\n    for (let i = 0; i < n; i++) {\r\n        result.push(start + step * i);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Create a equivalently spaced array of numbers from start to end (exclusive)\r\n * [start, end)\r\n * @param start start value\r\n * @param end end value\r\n * @param step step size\r\n */\r\nexport function range(start: number, end: number, step: number = 1) : number[] {\r\n    // step cannot be 0 and cannot be in the wrong direction\r\n    if (step == 0) return [];\r\n    let n = Math.floor((end - start) / step);\r\n    if (n <= 0) return [];\r\n\r\n    let result = [];\r\n    if (step > 0){\r\n        for (let i = start; i < end; i += step) {\r\n            result.push(i);\r\n        }\r\n    } else {\r\n        for (let i = start; i > end; i += step) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Create a equivalently spaced array of numbers from start to end (inc)\r\n * [start, end]\r\n * @param start start value\r\n * @param end end value\r\n * @param step step size\r\n */\r\nexport function range_inc(start: number, end: number, step: number = 1) : number[] {\r\n    // step cannot be 0 and cannot be in the wrong direction\r\n    if (step == 0) return [];\r\n    let n = Math.floor((end - start) / step);\r\n    if (n <= 0) return [];\r\n\r\n    let result = [];\r\n    if (step > 0){\r\n        for (let i = start; i <= end; i += step) {\r\n            result.push(i);\r\n        }\r\n    } else {\r\n        for (let i = start; i >= end; i += step) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Transpose a 2D array\r\n * if the array is not a rectangle, the transposed array will be padded with undefined\r\n * @param arr 2D array\r\n * @returns transposed 2D array\r\n */\r\nexport function transpose<T>(arr : T[][]) : (T|undefined)[][] {\r\n    let result : T[][] = [];\r\n    let n = Math.max(...arr.map(a => a.length));\r\n    for (let i = 0; i < n; i++) {\r\n        result.push([]);\r\n        for (let j = 0; j < arr.length; j++) {\r\n            result[i].push(arr[j][i]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/* @return [top, right, bottom, left] */\r\nexport function expand_directional_value(padding : number | number[]) : [number,number,number,number] {\r\n    let p = padding;\r\n    if (typeof p === 'number') return [p,p,p,p];\r\n    if (!Array.isArray(p)) return [0,0,0,0];\r\n    if (p.length === 1) return [p[0], p[0], p[0], p[0]];\r\n    if (p.length === 2) return [p[0], p[1], p[0], p[1]];\r\n    if (p.length === 3) return [p[0], p[1], p[2], p[1]];\r\n    if (p.length >= 4)  return [p[0], p[1], p[2], p[3]];\r\n    return [0,0,0,0];\r\n}\r\n","// color from matpltlib's tab20\r\nexport const tab_color : {[key : string]: string} = {\r\n    'blue'        : '#1f77b4',\r\n    'lightblue'   : '#aec7e8',\r\n    'orange'      : '#ff7f0e',\r\n    'lightorange' : '#ffbb78',\r\n    'green'       : '#2ca02c',\r\n    'lightgreen'  : '#98df8a',\r\n    'red'         : '#d62728',\r\n    'lightred'    : '#ff9896',\r\n    'purple'      : '#9467bd',\r\n    'lightpurple' : '#c5b0d5',\r\n    'brown'       : '#8c564b',\r\n    'lightbrown'  : '#c49c94',\r\n    'pink'        : '#e377c2',\r\n    'lightpink'   : '#f7b6d2',\r\n    'grey'        : '#7f7f7f',\r\n    'lightgrey'   : '#c7c7c7',\r\n    'gray'        : '#7f7f7f',\r\n    'lightgray'   : '#c7c7c7',\r\n    'olive'       : '#bcbd22',\r\n    'lightolive'  : '#dbdb8d',\r\n    'cyan'        : '#17becf',\r\n    'lightcyan'   : '#9edae5',\r\n}\r\n\r\nexport function get_color(colorname : string, palette : {[key : string]: string}) : string {\r\n    return palette[colorname] ?? colorname;\r\n}\r\n","const unicode_mathematical_italic = {\r\n    'A' : '𝐴', 'B' : '𝐵', 'C' : '𝐶', 'D' : '𝐷', 'E' : '𝐸',\r\n    'F' : '𝐹', 'G' : '𝐺', 'H' : '𝐻', 'I' : '𝐼', 'J' : '𝐽',\r\n    'K' : '𝐾', 'L' : '𝐿', 'M' : '𝑀', 'N' : '𝑁', 'O' : '𝑂',\r\n    'P' : '𝑃', 'Q' : '𝑄', 'R' : '𝑅', 'S' : '𝑆', 'T' : '𝑇',\r\n    'U' : '𝑈', 'V' : '𝑉', 'W' : '𝑊', 'X' : '𝑋', 'Y' : '𝑌', 'Z' : '𝑍',\r\n    'a' : '𝑎', 'b' : '𝑏', 'c' : '𝑐', 'd' : '𝑑', 'e' : '𝑒',\r\n    'f' : '𝑓', 'g' : '𝑔', 'h' : 'ℎ', 'i' : '𝑖', 'j' : '𝑗',\r\n    'k' : '𝑘', 'l' : '𝑙', 'm' : '𝑚', 'n' : '𝑛', 'o' : '𝑜',\r\n    'p' : '𝑝', 'q' : '𝑞', 'r' : '𝑟', 's' : '𝑠', 't' : '𝑡',\r\n    'u' : '𝑢', 'v' : '𝑣', 'w' : '𝑤', 'x' : '𝑥', 'y' : '𝑦', 'z' : '𝑧',\r\n\r\n    'Α' : '𝛢', 'Β' : '𝛣', 'Γ' : '𝛤', 'Δ' : '𝛥', 'Ε' : '𝛦',\r\n    'Ζ' : '𝛧', 'Η' : '𝛨', 'Θ' : '𝛩', 'Ι' : '𝛪', 'Κ' : '𝛫',\r\n    'Λ' : '𝛬', 'Μ' : '𝛭', 'Ν' : '𝛮', 'Ξ' : '𝛯', 'Ο' : '𝛰',\r\n    'Π' : '𝛱', 'Ρ' : '𝛲', 'Σ' : '𝛴', 'Τ' : '𝛵', 'Υ' : '𝛶',\r\n    'Φ' : '𝛷', 'Χ' : '𝛸', 'Ψ' : '𝛹', 'Ω' : '𝛺',\r\n    'α' : '𝛼', 'β' : '𝛽', 'γ' : '𝛾', 'δ' : '𝛿', 'ε' : '𝜀',\r\n    'ζ' : '𝜁', 'η' : '𝜂', 'θ' : '𝜃', 'ι' : '𝜄', 'κ' : '𝜅',\r\n    'λ' : '𝜆', 'μ' : '𝜇', 'ν' : '𝜈', 'ξ' : '𝜉', 'ο' : '𝜊',\r\n    'π' : '𝜋', 'ρ' : '𝜌', 'ς' : '𝜍', 'σ' : '𝜎', 'τ' : '𝜏', 'υ' : '𝜐', \r\n    'φ' : '𝜑', 'χ' : '𝜒', 'ψ' : '𝜓', 'ω' : '𝜔',\r\n    'ϑ' : '𝜗', 'ϰ' : '𝜘', 'ϕ' : '𝜙', 'ϱ' : '𝜚', 'ϖ' : '𝜛',\r\n    // '.' : '𝛻', '.' : '𝛳', '.' : '𝜕', '.' : '𝜖',\r\n}\r\nconst reversed_unicode_mathematical_italic = Object.fromEntries(\r\n    Object.entries(unicode_mathematical_italic).map(([k,v]) => [v,k])\r\n);\r\n\r\nconst latex_greek  = {\r\n    '\\\\alpha'   : 'α', '\\\\beta'    : 'β', '\\\\gamma'   : 'γ', '\\\\delta'   : 'δ', '\\\\epsilon' : 'ε',\r\n    '\\\\zeta'    : 'ζ', '\\\\eta'     : 'η', '\\\\theta'   : 'θ', '\\\\iota'    : 'ι', '\\\\kappa'   : 'κ',\r\n    '\\\\lambda'  : 'λ', '\\\\mu'      : 'μ', '\\\\nu'      : 'ν', '\\\\xi'      : 'ξ', '\\\\omicron' : 'ο',\r\n    '\\\\pi'      : 'π', '\\\\rho'     : 'ρ', '\\\\sigma'   : 'σ', '\\\\tau'     : 'τ', '\\\\upsilon' : 'υ',\r\n    '\\\\phi'     : 'ϕ', '\\\\chi'     : 'χ', '\\\\psi'     : 'ψ', '\\\\omega'   : 'ω',\r\n    '\\\\vartheta'   : 'ϑ', '\\\\varchi'     : 'ϰ', '\\\\varphi'     : 'φ', '\\\\varepsilon' : 'ε',\r\n    '\\\\varrho'     : 'ϱ', '\\\\varsigma'   : 'ς',\r\n}\r\n\r\nconst latex_symbols = {\r\n    \"textfractionsolidus\" : \"⁄\",\r\n    \"leftrightsquigarrow\" : \"↭\",\r\n    \"textpertenthousand\" : \"‱\",\r\n    \"blacktriangleright\" : \"▸\",\r\n    \"blacktriangledown\" : \"▾\",\r\n    \"blacktriangleleft\" : \"◂\",\r\n    \"twoheadrightarrow\" : \"↠\",\r\n    \"leftrightharpoons\" : \"⇋\",\r\n    \"rightleftharpoons\" : \"⇌\",\r\n    \"textreferencemark\" : \"※\",\r\n    \"circlearrowright\" : \"↻\",\r\n    \"rightrightarrows\" : \"⇉\",\r\n    \"vartriangleright\" : \"⊳\",\r\n    \"textordmasculine\" : \"º\",\r\n    \"textvisiblespace\" : \"␣\",\r\n    \"twoheadleftarrow\" : \"↞\",\r\n    \"downharpoonright\" : \"⇂\",\r\n    \"ntrianglerighteq\" : \"⋭\",\r\n    \"rightharpoondown\" : \"⇁\",\r\n    \"textperthousand\" : \"‰\",\r\n    \"leftrightarrows\" : \"⇆\",\r\n    \"textmusicalnote\" : \"♪\",\r\n    \"nleftrightarrow\" : \"↮\",\r\n    \"rightleftarrows\" : \"⇄\",\r\n    \"bigtriangledown\" : \"▽\",\r\n    \"textordfeminine\" : \"ª\",\r\n    \"ntrianglelefteq\" : \"⋬\",\r\n    \"rightthreetimes\" : \"⋌\",\r\n    \"trianglerighteq\" : \"⊵\",\r\n    \"vartriangleleft\" : \"⊲\",\r\n    \"rightsquigarrow\" : \"⇝\",\r\n    \"downharpoonleft\" : \"⇃\",\r\n    \"curvearrowright\" : \"↷\",\r\n    \"circlearrowleft\" : \"↺\",\r\n    \"leftharpoondown\" : \"↽\",\r\n    \"nLeftrightarrow\" : \"⇎\",\r\n    \"curvearrowleft\" : \"↶\",\r\n    \"guilsinglright\" : \"›\",\r\n    \"leftthreetimes\" : \"⋋\",\r\n    \"leftrightarrow\" : \"↔\",\r\n    \"rightharpoonup\" : \"⇀\",\r\n    \"guillemotright\" : \"»\",\r\n    \"downdownarrows\" : \"⇊\",\r\n    \"hookrightarrow\" : \"↪\",\r\n    \"dashrightarrow\" : \"⇢\",\r\n    \"leftleftarrows\" : \"⇇\",\r\n    \"trianglelefteq\" : \"⊴\",\r\n    \"ntriangleright\" : \"⋫\",\r\n    \"doublebarwedge\" : \"⌆\",\r\n    \"upharpoonright\" : \"↾\",\r\n    \"rightarrowtail\" : \"↣\",\r\n    \"looparrowright\" : \"↬\",\r\n    \"Leftrightarrow\" : \"⇔\",\r\n    \"sphericalangle\" : \"∢\",\r\n    \"divideontimes\" : \"⋇\",\r\n    \"measuredangle\" : \"∡\",\r\n    \"blacktriangle\" : \"▴\",\r\n    \"ntriangleleft\" : \"⋪\",\r\n    \"mathchar1356\" : \"⁁\",\r\n    \"texttrademark\" : \"™\",\r\n    \"mathchar2208\" : \"⌖\",\r\n    \"triangleright\" : \"▹\",\r\n    \"leftarrowtail\" : \"↢\",\r\n    \"guilsinglleft\" : \"‹\",\r\n    \"upharpoonleft\" : \"↿\",\r\n    \"mathbb{gamma}\" : \"ℽ\",\r\n    \"fallingdotseq\" : \"≒\",\r\n    \"looparrowleft\" : \"↫\",\r\n    \"textbrokenbar\" : \"¦\",\r\n    \"hookleftarrow\" : \"↩\",\r\n    \"smallsetminus\" : \"﹨\",\r\n    \"dashleftarrow\" : \"⇠\",\r\n    \"guillemotleft\" : \"«\",\r\n    \"leftharpoonup\" : \"↼\",\r\n    \"mathbb{Gamma}\" : \"ℾ\",\r\n    \"bigtriangleup\" : \"△\",\r\n    \"textcircledP\" : \"℗\",\r\n    \"risingdotseq\" : \"≓\",\r\n    \"triangleleft\" : \"◃\",\r\n    \"mathsterling\" : \"£\",\r\n    \"textcurrency\" : \"¤\",\r\n    \"triangledown\" : \"▿\",\r\n    \"blacklozenge\" : \"\",\r\n    \"sfrac{5}{6}\" : \"⅚\",\r\n    \"preccurlyeq\" : \"≼\",\r\n    \"Rrightarrow\" : \"⇛\",\r\n    \"circledcirc\" : \"⊚\",\r\n    \"nRightarrow\" : \"⇏\",\r\n    \"sfrac{3}{8}\" : \"⅜\",\r\n    \"sfrac{1}{3}\" : \"⅓\",\r\n    \"sfrac{2}{5}\" : \"⅖\",\r\n    \"vartriangle\" : \"▵\",\r\n    \"Updownarrow\" : \"⇕\",\r\n    \"nrightarrow\" : \"↛\",\r\n    \"sfrac{1}{2}\" : \"½\",\r\n    \"sfrac{3}{5}\" : \"⅗\",\r\n    \"succcurlyeq\" : \"≽\",\r\n    \"sfrac{4}{5}\" : \"⅘\",\r\n    \"diamondsuit\" : \"♦\",\r\n    \"sfrac{1}{6}\" : \"⅙\",\r\n    \"curlyeqsucc\" : \"⋟\",\r\n    \"blacksquare\" : \"▪\",\r\n    \"curlyeqprec\" : \"⋞\",\r\n    \"sfrac{1}{8}\" : \"⅛\",\r\n    \"sfrac{7}{8}\" : \"⅞\",\r\n    \"sfrac{1}{5}\" : \"⅕\",\r\n    \"sfrac{2}{3}\" : \"⅔\",\r\n    \"updownarrow\" : \"↕\",\r\n    \"backepsilon\" : \"∍\",\r\n    \"circleddash\" : \"⊝\",\r\n    \"eqslantless\" : \"⋜\",\r\n    \"sfrac{3}{4}\" : \"¾\",\r\n    \"sfrac{5}{8}\" : \"⅝\",\r\n    \"sfrac{1}{4}\" : \"¼\",\r\n    \"mathbb{Pi}\" : \"ℿ\",\r\n    \"mathcal{M}\" : \"ℳ\",\r\n    \"mathcal{o}\t\" : \"ℴ\",\r\n    \"mathcal{O}\t\" : \"𝒪\",\r\n    \"nsupseteqq\" : \"⊉\",\r\n    \"mathcal{B}\" : \"ℬ\",\r\n    \"textrecipe\" : \"℞\",\r\n    \"nsubseteqq\" : \"⊈\",\r\n    \"subsetneqq\" : \"⊊\",\r\n    \"mathcal{I}\" : \"ℑ\",\r\n    \"upuparrows\" : \"⇈\",\r\n    \"mathcal{e}\" : \"ℯ\",\r\n    \"mathcal{L}\" : \"ℒ\",\r\n    \"nleftarrow\" : \"↚\",\r\n    \"mathcal{H}\" : \"ℋ\",\r\n    \"mathcal{E}\" : \"ℰ\",\r\n    \"eqslantgtr\" : \"⋝\",\r\n    \"curlywedge\" : \"⋏\",\r\n    \"varepsilon\" : \"ε\",\r\n    \"supsetneqq\" : \"⊋\",\r\n    \"rightarrow\" : \"→\",\r\n    \"mathcal{R}\" : \"ℛ\",\r\n    \"sqsubseteq\" : \"⊑\",\r\n    \"mathcal{g}\" : \"ℊ\",\r\n    \"sqsupseteq\" : \"⊒\",\r\n    \"complement\" : \"∁\",\r\n    \"Rightarrow\" : \"⇒\",\r\n    \"gtreqqless\" : \"⋛\",\r\n    \"lesseqqgtr\" : \"⋚\",\r\n    \"circledast\" : \"⊛\",\r\n    \"nLeftarrow\" : \"⇍\",\r\n    \"Lleftarrow\" : \"⇚\",\r\n    \"varnothing\" : \"∅\",\r\n    \"mathcal{N}\" : \"𝒩\",\r\n    \"Leftarrow\" : \"⇐\",\r\n    \"gvertneqq\" : \"≩\",\r\n    \"mathbb{C}\" : \"ℂ\",\r\n    \"supsetneq\" : \"⊋\",\r\n    \"leftarrow\" : \"←\",\r\n    \"nleqslant\" : \"≰\",\r\n    \"mathbb{Q}\" : \"ℚ\",\r\n    \"mathbb{Z}\" : \"ℤ\",\r\n    \"llbracket\" : \"〚\",\r\n    \"mathbb{H}\" : \"ℍ\",\r\n    \"spadesuit\" : \"♠\",\r\n    \"mathit{o}\" : \"ℴ\",\r\n    \"mathbb{P}\" : \"ℙ\",\r\n    \"rrbracket\" : \"〛\",\r\n    \"supseteqq\" : \"⊇\",\r\n    \"copyright\" : \"©\",\r\n    \"textsc{k}\" : \"ĸ\",\r\n    \"gtreqless\" : \"⋛\",\r\n    \"mathbb{j}\" : \"ⅉ\",\r\n    \"pitchfork\" : \"⋔\",\r\n    \"estimated\" : \"℮\",\r\n    \"ngeqslant\" : \"≱\",\r\n    \"mathbb{e}\" : \"ⅇ\",\r\n    \"therefore\" : \"∴\",\r\n    \"triangleq\" : \"≜\",\r\n    \"varpropto\" : \"∝\",\r\n    \"subsetneq\" : \"⊊\",\r\n    \"heartsuit\" : \"♥\",\r\n    \"mathbb{d}\" : \"ⅆ\",\r\n    \"lvertneqq\" : \"≨\",\r\n    \"checkmark\" : \"✓\",\r\n    \"nparallel\" : \"∦\",\r\n    \"mathbb{R}\" : \"ℝ\",\r\n    \"lesseqgtr\" : \"⋚\",\r\n    \"downarrow\" : \"↓\",\r\n    \"mathbb{D}\" : \"ⅅ\",\r\n    \"mathbb{i}\" : \"ⅈ\",\r\n    \"backsimeq\" : \"⋍\",\r\n    \"mathbb{N}\" : \"ℕ\",\r\n    \"Downarrow\" : \"⇓\",\r\n    \"subseteqq\" : \"⊆\",\r\n    \"setminus\" : \"∖\",\r\n    \"succnsim\" : \"⋩\",\r\n    \"doteqdot\" : \"≑\",\r\n    \"clubsuit\" : \"♣\",\r\n    \"emptyset\" : \"∅\",\r\n    \"sqsupset\" : \"⊐\",\r\n    \"fbox{~~}\" : \"▭\",\r\n    \"curlyvee\" : \"⋎\",\r\n    \"varkappa\" : \"ϰ\",\r\n    \"llcorner\" : \"⌞\",\r\n    \"varsigma\" : \"ς\",\r\n    \"approxeq\" : \"≊\",\r\n    \"backcong\" : \"≌\",\r\n    \"supseteq\" : \"⊇\",\r\n    \"circledS\" : \"Ⓢ\",\r\n    \"circledR\" : \"®\",\r\n    \"textcent\" : \"¢\",\r\n    \"urcorner\" : \"⌝\",\r\n    \"lrcorner\" : \"⌟\",\r\n    \"boxminus\" : \"⊟\",\r\n    \"texteuro\" : \"€\",\r\n    \"vartheta\" : \"ϑ\",\r\n    \"barwedge\" : \"⊼\",\r\n    \"ding{86}\" : \"✶\",\r\n    \"sqsubset\" : \"⊏\",\r\n    \"subseteq\" : \"⊆\",\r\n    \"intercal\" : \"⊺\",\r\n    \"ding{73}\" : \"☆\",\r\n    \"ulcorner\" : \"⌜\",\r\n    \"recorder\" : \"⌕\",\r\n    \"precnsim\" : \"⋨\",\r\n    \"parallel\" : \"∥\",\r\n    \"boxtimes\" : \"⊠\",\r\n    \"ding{55}\" : \"✗\",\r\n    \"multimap\" : \"⊸\",\r\n    \"maltese\" : \"✠\",\r\n    \"nearrow\" : \"↗\",\r\n    \"swarrow\" : \"↙\",\r\n    \"lozenge\" : \"◊\",\r\n    \"sqrt[3]\" : \"∛\",\r\n    \"succsim\" : \"≿\",\r\n    \"dotplus\" : \"∔\",\r\n    \"tilde{}\" : \"~\",\r\n    \"check{}\" : \"ˇ\",\r\n    \"lessgtr\" : \"≶\",\r\n    \"Upsilon\" : \"ϒ\",\r\n    \"Cdprime\" : \"Ъ\",\r\n    \"gtrless\" : \"≷\",\r\n    \"backsim\" : \"∽\",\r\n    \"nexists\" : \"∄\",\r\n    \"searrow\" : \"↘\",\r\n    \"lessdot\" : \"⋖\",\r\n    \"boxplus\" : \"⊞\",\r\n    \"upsilon\" : \"υ\",\r\n    \"epsilon\" : \"ε\",\r\n    \"diamond\" : \"⋄\",\r\n    \"bigstar\" : \"★\",\r\n    \"ddagger\" : \"‡\",\r\n    \"cdprime\" : \"ъ\",\r\n    \"Uparrow\" : \"⇑\",\r\n    \"sqrt[4]\" : \"∜\",\r\n    \"between\" : \"≬\",\r\n    \"sqangle\" : \"∟\",\r\n    \"digamma\" : \"Ϝ\",\r\n    \"uparrow\" : \"↑\",\r\n    \"nwarrow\" : \"↖\",\r\n    \"precsim\" : \"≾\",\r\n    \"breve{}\" : \"˘\",\r\n    \"because\" : \"∵\",\r\n    \"bigcirc\" : \"◯\",\r\n    \"acute{}\" : \"´\",\r\n    \"grave{}\" : \"`\",\r\n    \"lesssim\" : \"≲\",\r\n    \"partial\" : \"∂\",\r\n    \"natural\" : \"♮\",\r\n    \"supset\" : \"⊃\",\r\n    \"hstrok\" : \"ħ\",\r\n    \"Tstrok\" : \"Ŧ\",\r\n    \"coprod\" : \"∐\",\r\n    \"models\" : \"⊧\",\r\n    \"otimes\" : \"⊗\",\r\n    \"degree\" : \"°\",\r\n    \"gtrdot\" : \"⋗\",\r\n    \"preceq\" : \"≼\",\r\n    \"Lambda\" : \"Λ\",\r\n    \"lambda\" : \"λ\",\r\n    \"cprime\" : \"ь\",\r\n    \"varrho\" : \"ϱ\",\r\n    \"Bumpeq\" : \"≎\",\r\n    \"hybull\" : \"⁃\",\r\n    \"lmidot\" : \"ŀ\",\r\n    \"nvdash\" : \"⊬\",\r\n    \"lbrace\" : \"{\",\r\n    \"bullet\" : \"•\",\r\n    \"varphi\" : \"φ\",\r\n    \"bumpeq\" : \"≏\",\r\n    \"ddot{}\" : \"¨\",\r\n    \"Lmidot\" : \"Ŀ\",\r\n    \"Cprime\" : \"Ь\",\r\n    \"female\" : \"♀\",\r\n    \"rtimes\" : \"⋊\",\r\n    \"gtrsim\" : \"≳\",\r\n    \"mapsto\" : \"↦\",\r\n    \"daleth\" : \"ℸ\",\r\n    \"square\" : \"■\",\r\n    \"nVDash\" : \"⊯\",\r\n    \"rangle\" : \"⟩\",\r\n    \"tstrok\" : \"ŧ\",\r\n    \"oslash\" : \"⊘\",\r\n    \"ltimes\" : \"⋉\",\r\n    \"lfloor\" : \"⌊\",\r\n    \"marker\" : \"▮\",\r\n    \"Subset\" : \"⋐\",\r\n    \"Vvdash\" : \"⊪\",\r\n    \"propto\" : \"∝\",\r\n    \"Hstrok\" : \"Ħ\",\r\n    \"dlcrop\" : \"⌍\",\r\n    \"forall\" : \"∀\",\r\n    \"nVdash\" : \"⊮\",\r\n    \"Supset\" : \"⋑\",\r\n    \"langle\" : \"⟨\",\r\n    \"ominus\" : \"⊖\",\r\n    \"rfloor\" : \"⌋\",\r\n    \"circeq\" : \"≗\",\r\n    \"eqcirc\" : \"≖\",\r\n    \"drcrop\" : \"⌌\",\r\n    \"veebar\" : \"⊻\",\r\n    \"ulcrop\" : \"⌏\",\r\n    \"nvDash\" : \"⊭\",\r\n    \"urcrop\" : \"⌎\",\r\n    \"exists\" : \"∃\",\r\n    \"approx\" : \"≈\",\r\n    \"dagger\" : \"†\",\r\n    \"boxdot\" : \"⊡\",\r\n    \"succeq\" : \"≽\",\r\n    \"bowtie\" : \"⋈\",\r\n    \"subset\" : \"⊂\",\r\n    \"notin\" : \"∉\",\r\n    \"Sigma\" : \"Σ\",\r\n    \"Omega\" : \"Ω\",\r\n    \"nabla\" : \"∇\",\r\n    \"colon\" : \":\",\r\n    \"boxHu\" : \"╧\",\r\n    \"boxHd\" : \"╤\",\r\n    \"aleph\" : \"ℵ\",\r\n    \"gnsim\" : \"⋧\",\r\n    \"boxHU\" : \"╩\",\r\n    \"boxHD\" : \"╦\",\r\n    \"equiv\" : \"≡\",\r\n    \"lneqq\" : \"≨\",\r\n    \"alpha\" : \"α\",\r\n    \"amalg\" : \"∐\",\r\n    \"boxhU\" : \"╨\",\r\n    \"boxhD\" : \"╥\",\r\n    \"uplus\" : \"⊎\",\r\n    \"boxhu\" : \"┴\",\r\n    \"kappa\" : \"κ\",\r\n    \"sigma\" : \"σ\",\r\n    \"boxDL\" : \"╗\",\r\n    \"Theta\" : \"Θ\",\r\n    \"Vdash\" : \"⊩\",\r\n    \"boxDR\" : \"╔\",\r\n    \"boxDl\" : \"╖\",\r\n    \"sqcap\" : \"⊓\",\r\n    \"boxDr\" : \"╓\",\r\n    \"bar{}\" : \"¯\",\r\n    \"dashv\" : \"⊣\",\r\n    \"vDash\" : \"⊨\",\r\n    \"boxdl\" : \"┐\",\r\n    \"boxVl\" : \"╢\",\r\n    \"boxVh\" : \"╫\",\r\n    \"boxVr\" : \"╟\",\r\n    \"boxdr\" : \"┌\",\r\n    \"boxdL\" : \"╕\",\r\n    \"boxVL\" : \"╣\",\r\n    \"boxVH\" : \"╬\",\r\n    \"boxVR\" : \"╠\",\r\n    \"boxdR\" : \"╒\",\r\n    \"theta\" : \"θ\",\r\n    \"lhblk\" : \"▄\",\r\n    \"uhblk\" : \"▀\",\r\n    \"ldotp\" : \".\",\r\n    \"ldots\" : \"…\",\r\n    \"boxvL\" : \"╡\",\r\n    \"boxvH\" : \"╪\",\r\n    \"boxvR\" : \"╞\",\r\n    \"boxvl\" : \"┤\",\r\n    \"boxvh\" : \"┼\",\r\n    \"boxvr\" : \"├\",\r\n    \"Delta\" : \"Δ\",\r\n    \"boxUR\" : \"╚\",\r\n    \"boxUL\" : \"╝\",\r\n    \"oplus\" : \"⊕\",\r\n    \"boxUr\" : \"╙\",\r\n    \"boxUl\" : \"╜\",\r\n    \"doteq\" : \"≐\",\r\n    \"happy\" : \"㋡\",\r\n    \"varpi\" : \"ϖ\",\r\n    \"smile\" : \"☺\",\r\n    \"boxul\" : \"┘\",\r\n    \"simeq\" : \"≃\",\r\n    \"boxuR\" : \"╘\",\r\n    \"boxuL\" : \"╛\",\r\n    \"boxhd\" : \"┬\",\r\n    \"gimel\" : \"ℷ\",\r\n    \"Gamma\" : \"Γ\",\r\n    \"lnsim\" : \"⋦\",\r\n    \"sqcup\" : \"⊔\",\r\n    \"omega\" : \"ω\",\r\n    \"sharp\" : \"♯\",\r\n    \"times\" : \"×\",\r\n    \"block\" : \"█\",\r\n    \"hat{}\" : \"^\",\r\n    \"wedge\" : \"∧\",\r\n    \"vdash\" : \"⊢\",\r\n    \"angle\" : \"∠\",\r\n    \"infty\" : \"∞\",\r\n    \"gamma\" : \"γ\",\r\n    \"asymp\" : \"≍\",\r\n    \"rceil\" : \"⌉\",\r\n    \"dot{}\" : \"˙\",\r\n    \"lceil\" : \"⌈\",\r\n    \"delta\" : \"δ\",\r\n    \"gneqq\" : \"≩\",\r\n    \"frown\" : \"⌢\",\r\n    \"phone\" : \"☎\",\r\n    \"vdots\" : \"⋮\",\r\n    \"boxr\" : \"└\",\r\n    \"k{i}\" : \"į\",\r\n    \"`{I}\" : \"Ì\",\r\n    \"perp\" : \"⊥\",\r\n    \"\\\"{o}\" : \"ö\",\r\n    \"={I}\" : \"Ī\",\r\n    \"`{a}\" : \"à\",\r\n    \"v{T}\" : \"Ť\",\r\n    \"surd\" : \"√\",\r\n    \"H{O}\" : \"Ő\",\r\n    \"vert\" : \"|\",\r\n    \"k{I}\" : \"Į\",\r\n    \"\\\"{y}\" : \"ÿ\",\r\n    \"\\\"{O}\" : \"Ö\",\r\n    \"u{u}\" : \"ў\",\r\n    \"u{G}\" : \"Ğ\",\r\n    \".{E}\" : \"Ė\",\r\n    \".{z}\" : \"ż\",\r\n    \"v{t}\" : \"ť\",\r\n    \"prec\" : \"≺\",\r\n    \"H{o}\" : \"ő\",\r\n    \"mldr\" : \"…\",\r\n    \"cong\" : \"≅\",\r\n    \".{e}\" : \"ė\",\r\n    \"star\" : \"*\",\r\n    \".{Z}\" : \"Ż\",\r\n    \"geqq\" : \"≧\",\r\n    \"cdot\" : \"⋅\",\r\n    \"cdots\" : \"…\",\r\n    \"`{U}\" : \"Ù\",\r\n    \"v{L}\" : \"Ľ\",\r\n    \"c{s}\" : \"ş\",\r\n    \"~{A}\" : \"Ã\",\r\n    \"Vert\" : \"‖\",\r\n    \"k{e}\" : \"ę\",\r\n    \"lnot\" : \"¬\",\r\n    \"leqq\" : \"≦\",\r\n    \"beta\" : \"β\",\r\n    \"beth\" : \"ℶ\",\r\n    \"~{n}\" : \"ñ\",\r\n    \"u{i}\" : \"й\",\r\n    \"c{S}\" : \"Ş\",\r\n    \"c{N}\" : \"Ņ\",\r\n    \"H{u}\" : \"ű\",\r\n    \"v{n}\" : \"ň\",\r\n    \"={U}\" : \"Ū\",\r\n    \"~{O}\" : \"Õ\",\r\n    \"v{E}\" : \"Ě\",\r\n    \"H{U}\" : \"Ű\",\r\n    \"v{N}\" : \"Ň\",\r\n    \"prod\" : \"∏\",\r\n    \"v{s}\" : \"š\",\r\n    \"\\\"{U}\" : \"Ü\",\r\n    \"c{n}\" : \"ņ\",\r\n    \"k{U}\" : \"Ų\",\r\n    \"c{R}\" : \"Ŗ\",\r\n    \"~{o}\" : \"õ\",\r\n    \"v{e}\" : \"ě\",\r\n    \"v{S}\" : \"Š\",\r\n    \"u{A}\" : \"Ă\",\r\n    \"circ\" : \"∘\",\r\n    \"\\\"{u}\" : \"ü\",\r\n    \"flat\" : \"♭\",\r\n    \"v{z}\" : \"ž\",\r\n    \"r{U}\" : \"Ů\",\r\n    \"`{O}\" : \"Ò\",\r\n    \"={u}\" : \"ū\",\r\n    \"oint\" : \"∮\",\r\n    \"c{K}\" : \"Ķ\",\r\n    \"k{u}\" : \"ų\",\r\n    \"not<\" : \"≮\",\r\n    \"not>\" : \"≯\",\r\n    \"`{o}\" : \"ò\",\r\n    \"\\\"{I}\" : \"Ï\",\r\n    \"v{D}\" : \"Ď\",\r\n    \".{G}\" : \"Ġ\",\r\n    \"r{u}\" : \"ů\",\r\n    \"not=\" : \"≠\",\r\n    \"`{u}\" : \"ù\",\r\n    \"v{c}\" : \"č\",\r\n    \"c{k}\" : \"ķ\",\r\n    \".{g}\" : \"ġ\",\r\n    \"odot\" : \"⊙\",\r\n    \"`{e}\" : \"э\",\r\n    \"c{T}\" : \"Ţ\",\r\n    \"v{d}\" : \"ď\",\r\n    \"\\\"{e}\" : \"ё\",\r\n    \"v{R}\" : \"Ř\",\r\n    \"k{a}\" : \"ą\",\r\n    \"nldr\" : \"‥\",\r\n    \"`{A}\" : \"À\",\r\n    \"~{N}\" : \"Ñ\",\r\n    \"nmid\" : \"∤\",\r\n    \".{C}\" : \"Ċ\",\r\n    \"zeta\" : \"ζ\",\r\n    \"~{u}\" : \"ũ\",\r\n    \"`{E}\" : \"Э\",\r\n    \"~{a}\" : \"ã\",\r\n    \"c{t}\" : \"ţ\",\r\n    \"={o}\" : \"ō\",\r\n    \"v{r}\" : \"ř\",\r\n    \"={A}\" : \"Ā\",\r\n    \".{c}\" : \"ċ\",\r\n    \"~{U}\" : \"Ũ\",\r\n    \"k{A}\" : \"Ą\",\r\n    \"\\\"{a}\" : \"ä\",\r\n    \"u{U}\" : \"Ў\",\r\n    \"iota\" : \"ι\",\r\n    \"={O}\" : \"Ō\",\r\n    \"c{C}\" : \"Ç\",\r\n    \"gneq\" : \"≩\",\r\n    \"boxH\" : \"═\",\r\n    \"hbar\" : \"ℏ\",\r\n    \"\\\"{A}\" : \"Ä\",\r\n    \"boxv\" : \"│\",\r\n    \"boxh\" : \"─\",\r\n    \"male\" : \"♂\",\r\n    \"sqrt\" : \"√\",\r\n    \"succ\" : \"≻\",\r\n    \"c{c}\" : \"ç\",\r\n    \"v{l}\" : \"ľ\",\r\n    \"u{a}\" : \"ă\",\r\n    \"v{Z}\" : \"Ž\",\r\n    \"c{G}\" : \"Ģ\",\r\n    \"v{C}\" : \"Č\",\r\n    \"lneq\" : \"≨\",\r\n    \"{E}\" : \"Ё\",\r\n    \"={a}\" : \"ā\",\r\n    \"c{l}\" : \"ļ\",\r\n    \"={E}\" : \"Ē\",\r\n    \"boxV\" : \"║\",\r\n    \"u{g}\" : \"ğ\",\r\n    \"u{I}\" : \"Й\",\r\n    \"c{L}\" : \"Ļ\",\r\n    \"k{E}\" : \"Ę\",\r\n    \".{I}\" : \"İ\",\r\n    \"~{I}\" : \"Ĩ\",\r\n    \"c{r}\" : \"ŗ\",\r\n    \"{Y}\" : \"Ÿ\",\r\n    \"={e}\" : \"ē\",\r\n    \"leq\" : \"≤\",\r\n    \"Cup\" : \"⋓\",\r\n    \"Psi\" : \"Ψ\",\r\n    \"neq\" : \"≠\",\r\n    \"k{}\" : \"˛\",\r\n    \"={}\" : \"‾\",\r\n    \"H{}\" : \"˝\",\r\n    \"cup\" : \"∪\",\r\n    \"geq\" : \"≥\",\r\n    \"mho\" : \"℧\",\r\n    \"Dzh\" : \"Џ\",\r\n    \"cap\" : \"∩\",\r\n    \"bot\" : \"⊥\",\r\n    \"psi\" : \"ψ\",\r\n    \"chi\" : \"χ\",\r\n    \"c{}\" : \"¸\",\r\n    \"Phi\" : \"Φ\",\r\n    \"ast\" : \"*\",\r\n    \"ell\" : \"ℓ\",\r\n    \"top\" : \"⊤\",\r\n    \"lll\" : \"⋘\",\r\n    \"tau\" : \"τ\",\r\n    \"Cap\" : \"⋒\",\r\n    \"sad\" : \"☹\",\r\n    \"iff\" : \"⇔\",\r\n    \"eta\" : \"η\",\r\n    \"eth\" : \"ð\",\r\n    \"d{\" : \"\ṭ\",\r\n    \"rho\" : \"ρ\",\r\n    \"dzh\" : \"џ\",\r\n    \"div\" : \"÷\",\r\n    \"phi\" : \"ϕ\",\r\n    \"Rsh\" : \"↱\",\r\n    \"vee\" : \"∨\",\r\n    \"b{}\" : \"ˍ\",\r\n    \"t{\" : \"\t͡\",\r\n    \"int\" : \"∫\",\r\n    \"sim\" : \"∼\",\r\n    \"r{}\" : \"˚\",\r\n    \"Lsh\" : \"↰\",\r\n    \"yen\" : \"¥\",\r\n    \"ggg\" : \"⋙\",\r\n    \"mid\" : \"∣\",\r\n    \"sum\" : \"∑\",\r\n    \"neg\" : \"¬\",\r\n    \"Dz\" : \"Ѕ\",\r\n    \"Re\" : \"ℜ\",\r\n    \"oe\" : \"œ\",\r\n    \"DH\" : \"Ð\",\r\n    \"ll\" : \"≪\",\r\n    \"ng\" : \"ŋ\",\r\n    \"wr\" : \"≀\",\r\n    \"wp\" : \"℘\",\r\n    \"=I\" : \"І\",\r\n    \":)\" : \"☺\",\r\n    \":(\" : \"☹\",\r\n    \"AE\" : \"Æ\",\r\n    \"AA\" : \"Å\",\r\n    \"ss\" : \"ß\",\r\n    \"dz\" : \"ѕ\",\r\n    \"ae\" : \"æ\",\r\n    \"aa\" : \"å\",\r\n    \"th\" : \"þ\",\r\n    \"to\" : \"→\",\r\n    \"Pi\" : \"Π\",\r\n    \"mp\" : \"∓\",\r\n    \"Im\" : \"ℑ\",\r\n    \"pm\" : \"±\",\r\n    \"pi\" : \"π\",\r\n    \"\\\"I\" : \"Ї\",\r\n    \"in\" : \"∈\",\r\n    \"ni\" : \"∋\",\r\n    \"ne\" : \"≠\",\r\n    \"TH\" : \"Þ\",\r\n    \"Xi\" : \"Ξ\",\r\n    \"nu\" : \"ν\",\r\n    \"NG\" : \"Ŋ\",\r\n    \":G\" : \"㋡\",\r\n    \"xi\" : \"ξ\",\r\n    \"OE\" : \"Œ\",\r\n    \"gg\" : \"≫\",\r\n    \"DJ\" : \"Đ\",\r\n    \"=e\" : \"є\",\r\n    \"=E\" : \"Є\",\r\n    \"mu\" : \"μ\",\r\n    \"dj\" : \"đ\",\r\n    // \"&\" : \"&\",\r\n    // \"$\" : \"$\",\r\n    // \"%\" : \"%\",\r\n    // \"#\" : \"#\",\r\n    // \"-\" : \"­\",\r\n    \"S\" : \"§\",\r\n    \"P\" : \"¶\",\r\n    \"O\" : \"Ø\",\r\n    \"L\" : \"Ł\",\r\n    // \"}\" : \"}\",\r\n    \"o\" : \"ø\",\r\n    \"l\" : \"ł\",\r\n    \"h\" : \"ℎ\",\r\n    \"i\" : \"ℹ\",\r\n    // \"-\" : \"−\",\r\n    \"'{Y}\" : \"Ý\",\r\n    \"'{y}\" : \"ý\",\r\n    \"'{L}\" : \"Ĺ\",\r\n    \"'{e}\" : \"é\",\r\n    \"'{l}\" : \"ĺ\",\r\n    \"'{s}\" : \"ś\",\r\n    \"'{z}\" : \"ź\",\r\n    \"'{E}\" : \"É\",\r\n    \"'{S}\" : \"Ś\",\r\n    \"'{Z}\" : \"Ź\",\r\n    \"'{R}\" : \"Ŕ\",\r\n    \"'{A}\" : \"Á\",\r\n    \"'{N}\" : \"Ń\",\r\n    \"'{I}\" : \"Í\",\r\n    \"'{n}\" : \"ń\",\r\n    \"'{c}\" : \"ć\",\r\n    \"'{u}\" : \"ú\",\r\n    \"'{C}\" : \"Ć\",\r\n    \"'{o}\" : \"ó\",\r\n    \"'{a}\" : \"á\",\r\n    \"'{O}\" : \"Ó\",\r\n    \"'{g}\" : \"ǵ\",\r\n    \"'{r}\" : \"ŕ\",\r\n    \"'{U}\" : \"Ú\",\r\n    \"'G\" : \"Ѓ\",\r\n    \"'C\" : \"Ћ\",\r\n    \"'K\" : \"Ќ\",\r\n    \"'k\" : \"ќ\",\r\n    \"'c\" : \"ћ\",\r\n    \"'g\" : \"ѓ\",\r\n}\r\n\r\n\r\nexport function str_latex_to_unicode(str : string){\r\n    str = str;\r\n    for (let key in latex_greek){\r\n        str = str.replaceAll(key, (latex_greek as any)[key]);\r\n    }\r\n    for (let key in latex_symbols){\r\n        str = str.replaceAll('\\\\'+key, (latex_symbols as any)[key]);\r\n    }\r\n    return str;\r\n}\r\nexport function str_to_mathematical_italic(str : string) {\r\n    return [...str_latex_to_unicode(str)]\r\n        .map(c => (unicode_mathematical_italic as any)[c] || c).join('');\r\n}\r\nexport function str_to_normal_from_mathematical_italic(str : string) {\r\n    return [...str]\r\n        .map(c => reversed_unicode_mathematical_italic[c] || c).join('');\r\n}\r\n","import { Diagram, DiagramType, DiagramStyle, TextData, DEFAULT_FONTSIZE, LinearGradient } from \"./diagram.js\";\r\nimport { tab_color, get_color } from \"./color_palette.js\";\r\nimport { to_degree, expand_directional_value } from \"./utils.js\";\r\nimport { str_to_mathematical_italic, str_to_normal_from_mathematical_italic } from './unicode_utils.js'\r\nimport { TAG } from \"./tag_names.js\";\r\n\r\n// TODO : add guard for the dictionary key\r\n// since the implementation is using `for (let stylename in style)` without checking\r\n// if the correct key is in the dictionary, it can lead to unintended behavior\r\n// for example, `font-size` could be defined in default_text_diagram_style\r\n// and will shadow the `font-size` in default_diagram_style\r\n\r\nexport const default_diagram_style : DiagramStyle = {\r\n    \"fill\"             : \"none\",\r\n    \"stroke\"           : \"black\",\r\n    \"stroke-width\"     : \"1\",\r\n    \"stroke-linecap\"   : \"butt\",\r\n    \"stroke-dasharray\" : \"none\",\r\n    \"stroke-linejoin\"  : \"round\",\r\n    \"vector-effect\"    : \"non-scaling-stroke\",\r\n    \"opacity\"          : \"1\",\r\n}\r\nexport const _init_default_diagram_style : DiagramStyle = {...default_diagram_style}\r\n\r\nexport const default_text_diagram_style : DiagramStyle = {\r\n    \"fill\"             : \"black\",\r\n    \"stroke\"           : \"none\",\r\n    \"stroke-width\"     : \"1\",\r\n    \"stroke-linecap\"   : \"butt\",\r\n    \"stroke-dasharray\" : \"none\",\r\n    \"stroke-linejoin\"  : \"round\",\r\n    \"vector-effect\"    : \"non-scaling-stroke\",\r\n    \"opacity\"          : \"1\",\r\n}\r\nexport const _init_default_text_diagram_style : DiagramStyle = {...default_text_diagram_style}\r\n\r\nexport const default_textdata : TextData = {\r\n    \"text\"             : \"\",\r\n    \"font-family\"      : \"Latin Modern Math, sans-serif\",\r\n    \"font-size\"        : DEFAULT_FONTSIZE,\r\n    \"font-weight\"      : \"normal\",\r\n    \"text-anchor\"      : \"middle\",\r\n    \"dy\"               : \"0.25em\",\r\n    \"angle\"            : \"0\",\r\n    \"font-style\"       : \"normal\",\r\n    \"font-scale\"       : \"auto\",\r\n}\r\nexport const _init_default_textdata : TextData = {...default_textdata}\r\n\r\nexport function reset_default_styles() : void {\r\n    for (let s in default_diagram_style) \r\n        (default_diagram_style as any)[s] = (_init_default_diagram_style as any)[s];\r\n    for (let s in default_text_diagram_style)\r\n        (default_text_diagram_style as any)[s] = (_init_default_text_diagram_style as any)[s];\r\n    for (let s in default_textdata)\r\n        (default_textdata as any)[s] = (_init_default_textdata as any)[s];\r\n}\r\n\r\nfunction isLinearGradient(fill: string | LinearGradient): fill is LinearGradient {\r\n    return typeof fill === \"object\" && (fill as LinearGradient).type === \"linearGradient\";\r\n}\r\n\r\nfunction draw_polygon(\r\n    svgelement : SVGSVGElement, target_element : SVGSVGElement|SVGGElement,\r\n    diagram : Diagram, svgtag? : string\r\n) : void {\r\n    // get properties\r\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\r\n    style.fill = get_color(style.fill as string, tab_color);\r\n    style.stroke = get_color(style.stroke as string, tab_color);\r\n\r\n    // add def\r\n    let defs = svgelement.querySelector('defs');\r\n    if(!defs) {\r\n        defs = document.createElementNS(\"http://www.w3.org/2000/svg\" ,'defs')\r\n        svgelement.appendChild(defs)\r\n    }\r\n\r\n    if(isLinearGradient(style.fill)) {\r\n        // create gradient\r\n        const gradientId = `gradient-${Math.random().toString(36).substr(2, 9)}`;\r\n        const gradient = document.createElementNS(\"http://www.w3.org/2000/svg\", 'linearGradient');\r\n        let {x1, x2, y1, y2} = style.fill;\r\n        gradient.setAttribute(\"id\", gradientId);\r\n        gradient.setAttribute(\"x1\", x1|| \"0%\")\r\n        gradient.setAttribute(\"y1\", y1 || \"0%\");\r\n        gradient.setAttribute(\"x2\", x2 || \"100%\");\r\n        gradient.setAttribute(\"y2\", y2 || \"0%\")\r\n\r\n        style.fill.stops.forEach(stop => {\r\n            const stopElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\");\r\n            stopElement.setAttribute(\"offset\", stop.offset)\r\n            stopElement.setAttribute(\"stop-color\", get_color(stop.color, tab_color));\r\n            if (stop.opacity !== undefined) {\r\n                stopElement.setAttribute(\"stop-opacity\", stop.opacity.toString());\r\n            }\r\n            gradient.appendChild(stopElement)\r\n        })\r\n\r\n        defs.appendChild(gradient);\r\n        style.fill = `url(#${gradientId})`\r\n\r\n    } else {\r\n        style.fill = get_color(style.fill, tab_color)\r\n    }\r\n\r\n    // draw svg\r\n    let polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\r\n    for (let stylename in style) {\r\n        polygon.style[stylename as any] = (style as any)[stylename as any];\r\n    }\r\n    if (svgtag != undefined) polygon.setAttribute(\"_dg_tag\", svgtag);\r\n    // polygon.style.fill = color_fill;\r\n    // polygon.style.stroke = color_stroke;\r\n    // use tab_color color palette\r\n\r\n    target_element.appendChild(polygon);\r\n    if (diagram.path != undefined) {\r\n        for (let i = 0; i < diagram.path.points.length; i++) {\r\n            let p = diagram.path.points[i];\r\n            var point = svgelement.createSVGPoint();\r\n            point.x =  p.x;\r\n            point.y = -p.y;\r\n            polygon.points.appendItem(point);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction draw_curve(\r\n    svgelement : SVGSVGElement, target_element : SVGSVGElement|SVGGElement,\r\n    diagram : Diagram, svgtag? : string\r\n) : void {\r\n    // get properties\r\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\r\n    style.fill = \"none\";\r\n    style.stroke = get_color(style.stroke as string, tab_color);\r\n\r\n    // draw svg\r\n    let polyline = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\r\n    for (let stylename in style) {\r\n        polyline.style[stylename as any] = (style as any)[stylename as any];\r\n    }\r\n    if (svgtag != undefined) polyline.setAttribute(\"_dg_tag\", svgtag);\r\n\r\n    target_element.appendChild(polyline);\r\n    if (diagram.path != undefined) {\r\n        for (let i = 0; i < diagram.path.points.length; i++) {\r\n            let p = diagram.path.points[i];\r\n            var point = svgelement.createSVGPoint();\r\n            point.x =  p.x;\r\n            point.y = -p.y;\r\n            polyline.points.appendItem(point);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction is_dataURL(url : string) : boolean {\r\n    // Regular expression to check for data URL\r\n    const dataUrlPattern = /^data:image\\/(png|jpeg|jpg|gif|svg\\+xml);base64,/;\r\n    return dataUrlPattern.test(url);\r\n}\r\n\r\nconst _IMAGE_DATAURL_CACHE_MAP = new Map<string, string|undefined>();\r\n\r\n/**\r\n * Convert image href to data url\r\n * This is necessary so that the image diagram can be downloaded as png\r\n */\r\nfunction set_image_href_dataURL(img : SVGImageElement, src : string) : void{\r\n    // if it is already a dataURL, just set it\r\n    if (is_dataURL(src)) {\r\n        img.setAttribute(\"href\", src);\r\n        img.setAttribute(\"xlink:href\", src);\r\n        return;\r\n    }\r\n    \r\n    // if it's already cached, just set it\r\n    if (_IMAGE_DATAURL_CACHE_MAP.has(src)){\r\n        const dataURL = _IMAGE_DATAURL_CACHE_MAP.get(src)!;\r\n        if (!dataURL) return; \r\n        // dataURL can be undefined, indicating it's still loading or\r\n        // the image is not found\r\n        img.setAttribute(\"href\", dataURL);\r\n        img.setAttribute(\"xlink:href\", dataURL);\r\n        return;\r\n    }\r\n    \r\n    // _IMAGE_DATAURL_CACHE_MAP.set(src, undefined);\r\n    let canvas    = document.createElement(\"canvas\");\r\n    let ctx       = canvas.getContext('2d');\r\n\r\n    let base_image = new Image();\r\n    base_image.crossOrigin = \"anonymous\";\r\n    base_image.onload = () => {\r\n        canvas.height = base_image.height;\r\n        canvas.width  = base_image.width;\r\n        ctx?.drawImage(base_image, 0, 0);\r\n\r\n        // NOTE : we need to set both href and xlink:href for compatibility reason\r\n        // most browser already deprecate xlink:href because of SVG 2.0\r\n        // but other browser and image viewer/editor still only support xlink:href\r\n        // might be removed in the future\r\n        const dataURL = canvas.toDataURL(\"image/png\");\r\n        img.setAttribute(\"href\", dataURL);\r\n        img.setAttribute(\"xlink:href\", dataURL);\r\n        _IMAGE_DATAURL_CACHE_MAP.set(src, dataURL);\r\n        canvas.remove();\r\n    }\r\n    base_image.src = src;\r\n\r\n}\r\n\r\n/**\r\n * if `embed_image` is `true`, the image will be embedded as dataURL\r\n * this allow the image to be downloaded as SVG with the image embedded\r\n */\r\nfunction draw_image(\r\n    target_element: SVGSVGElement|SVGGElement,\r\n    diagram : Diagram, embed_image : boolean, svgtag? : string\r\n) : void {\r\n    let image = document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\r\n    image.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n    if (diagram.imgdata.src == undefined) return;\r\n    // make sure path is defined and have 4 points\r\n    if (diagram.path == undefined) return;\r\n    if (diagram.path.points.length != 4) return;\r\n\r\n    // it's calculated like this to be able to apply linear transformation\r\n    // path: bottom-left, bottom-right, top-right, top-left\r\n    // width  : 0-1\r\n    // height : 1-2\r\n    let width  = diagram.path.points[1].sub(diagram.path.points[0]).length();\r\n    let height = diagram.path.points[2].sub(diagram.path.points[1]).length();\r\n    \r\n    // calculate the linear transformation matrix\r\n    // [ a c ]\r\n    // [ b d ]\r\n    let ex = diagram.path.points[1].sub(diagram.path.points[0]).normalize();\r\n    let ey = diagram.path.points[3].sub(diagram.path.points[0]).normalize();\r\n    let a =  ex.x; let b = -ex.y;\r\n    let c = -ey.x; let d =  ey.y;\r\n\r\n    let xpos = diagram.path.points[3].x;\r\n    let ypos = -diagram.path.points[3].y;\r\n\r\n    if (embed_image) {\r\n        set_image_href_dataURL(image, diagram.imgdata.src);\r\n    } else {\r\n        image.setAttribute(\"href\", diagram.imgdata.src);\r\n    }\r\n    image.setAttribute(\"width\", width.toString());\r\n    image.setAttribute(\"height\", height.toString());\r\n    image.setAttribute(\"transform\", `matrix(${a} ${b} ${c} ${d} ${xpos} ${ypos})`);\r\n    image.setAttribute(\"preserveAspectRatio\", \"none\");\r\n    if (svgtag != undefined) image.setAttribute(\"_dg_tag\", svgtag);\r\n\r\n    target_element.appendChild(image);\r\n}\r\n\r\n/**\r\n * Collect all DiagramType.Text in the diagram\r\n * @param diagram the outer diagram\r\n * @returns a list of DiagramType.Text\r\n*/\r\nfunction collect_text(diagram : Diagram, type : DiagramType.Text | DiagramType.MultilineText) : Diagram[] {\r\n    if (diagram.type == type) {\r\n        return [diagram];\r\n    } else if (diagram.type == DiagramType.Diagram) {\r\n        let result : Diagram[] = [];\r\n        for (let d of diagram.children) {\r\n            result = result.concat(collect_text(d, type));\r\n        }\r\n        return result;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\n/** Calculate the scaling factor for the text based on the reference svg element */\r\nexport function calculate_text_scale(referencesvgelement : SVGSVGElement, padding? : [number, number, number, number]) : number {\r\n    const pad = expand_directional_value(padding ?? 0)\r\n    let bbox = referencesvgelement.getBBox();\r\n    let refsvgelement_width = referencesvgelement.width.baseVal.value - pad[1] - pad[3];\r\n    let refsvgelement_height = referencesvgelement.height.baseVal.value - pad[0] - pad[2];\r\n    return Math.max(bbox.width / refsvgelement_width, bbox.height / refsvgelement_height)\r\n}\r\n\r\n/**\r\n * @param svgelement the svg element to draw to\r\n * @param diagrams the list of text diagrams to draw\r\n * @param calculated_scale the calculated scale for the text\r\n */\r\nfunction draw_texts(\r\n    target_element: SVGSVGElement|SVGGElement,\r\n    diagrams : Diagram[], \r\n    calculated_scale : number, svgtag? : string\r\n) : void {\r\n    for (let diagram of diagrams) {\r\n        let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\r\n        style.fill = get_color(style.fill as string, tab_color);\r\n        style.stroke = get_color(style.stroke as string, tab_color);\r\n\r\n        let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\r\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\r\n        // draw svg of text\r\n        let text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        // text.setAttribute(\"x\", diagram.path.points[0].x.toString());\r\n        // text.setAttribute(\"y\", (-diagram.path.points[0].y).toString());\r\n        let xpos = diagram.path.points[0].x;\r\n        let ypos = -diagram.path.points[0].y;\r\n        let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\r\n\r\n        let scale = textdata[\"font-scale\"] == \"auto\" ? \r\n            calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\r\n        let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\r\n\r\n        // set font styles (font-family, font-size, font-weight)\r\n        text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\r\n        text.setAttribute(\"font-style\", textdata[\"font-style\"] as string);\r\n        text.setAttribute(\"font-size\", font_size.toString());\r\n        text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\r\n        text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\r\n        text.setAttribute(\"dy\", textdata[\"dy\"] as string);\r\n        // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\r\n        text.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\r\n        if (svgtag != undefined) text.setAttribute(\"_dg_tag\", svgtag);\r\n\r\n        // custom attribute for tex display\r\n        text.setAttribute(\"_x\", xpos.toString());\r\n        text.setAttribute(\"_y\", ypos.toString());\r\n        text.setAttribute(\"_angle\", angle_deg.toString());\r\n        \r\n        for (let stylename in style) {\r\n            text.style[stylename as any] = (style as any)[stylename as any];\r\n        }\r\n\r\n        // set the content of the text\r\n        let text_content = textdata[\"text\"];\r\n        if (diagram.tags.includes(TAG.TEXTVAR) && !is_texstr(text_content)) \r\n            text_content = str_to_mathematical_italic(text_content);\r\n        text.innerHTML = text_content;\r\n\r\n        // add to svgelement\r\n        target_element.appendChild(text);\r\n    }\r\n}\r\n\r\n/**\r\n * @param svgelement the svg element to draw to\r\n * @param diagrams the list of text diagrams to draw\r\n * @param calculated_scale the calculated scale for the text\r\n */\r\nfunction draw_multiline_texts(\r\n    target_element : SVGSVGElement|SVGGElement,\r\n    diagrams : Diagram[],  calculated_scale : number, svgtag? : string\r\n) : void {\r\n    for (let diagram of diagrams) {\r\n    //     let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\r\n    //     style.fill = get_color(style.fill as string, tab_color);\r\n    //     style.stroke = get_color(style.stroke as string, tab_color);\r\n    //\r\n    //     let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\r\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\r\n        // draw svg of text\r\n        let textsvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        let xpos = diagram.path.points[0].x;\r\n        let ypos = -diagram.path.points[0].y;\r\n        // let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\r\n        let angle_deg = 0;\r\n\r\n\r\n        // use default if not defined\r\n        let textdata = {...default_textdata, ...{dy:\"0\", \"text-anchor\":\"start\"}, ...diagram.textdata}; \r\n        let diagram_font_size = textdata[\"font-size\"];\r\n\r\n\r\n        if (diagram.multilinedata?.content == undefined) { throw new Error(\"MultilineText must have multilinedata\"); }\r\n        // let current_line : number = 0;\r\n        let dg_scale_factor = diagram.multilinedata[\"scale-factor\"] ?? 1;\r\n        let is_firstline : boolean = true;\r\n        let is_in_front  : boolean = true;\r\n        let newline_dy   : string  = \"1em\";\r\n        for (let tspandata of diagram.multilinedata.content) {\r\n\r\n            if (tspandata.text == \"\\n\") { \r\n                is_in_front = true; \r\n                newline_dy = tspandata.style['dy'] ?? \"1em\";\r\n                continue; \r\n            }\r\n\r\n            // create tspan for each tspandata\r\n            let tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\r\n\r\n            let not_setting_dy = (tspandata.style['dy'] == undefined)\r\n            let tspanstyle = {\r\n                ...default_text_diagram_style, \r\n                ...textdata,\r\n                ...{dy : \"0\", dx : \"0\"}, \r\n                ...{\"font-size\" : diagram_font_size},\r\n                ...tspandata.style\r\n            };\r\n\r\n            if (is_in_front) {\r\n                tspan.setAttribute(\"x\", \"0\");\r\n                let textdata_dy = textdata[\"dy\"] as string ?? \"0\";\r\n                if (not_setting_dy) tspanstyle.dy = is_firstline ? textdata_dy : newline_dy;\r\n                is_in_front = false;\r\n            }\r\n\r\n            let scale = tspanstyle[\"font-scale\"] == \"auto\" ? \r\n                calculated_scale : parseFloat(tspanstyle[\"font-scale\"] as string);\r\n            let font_size_scale_factor = tspanstyle[\"font-size-scale-factor\"] ?? 1;\r\n            let font_size = parseFloat(tspanstyle[\"font-size\"] as string) \r\n                * scale * dg_scale_factor * font_size_scale_factor;\r\n\r\n            if (tspanstyle[\"tag\"]) tspan.setAttribute(\"_dg_tag\", tspanstyle[\"tag\"] as string);\r\n\r\n            tspan.style.whiteSpace = \"pre\";\r\n            // if we do style.whiteSpace in `textsvg`, it doesnt work in Apple's webkit\r\n            tspan.setAttribute(\"dx\", tspanstyle.dx as string);\r\n            tspan.setAttribute(\"dy\", tspanstyle.dy as string);\r\n            tspan.setAttribute(\"font-style\", tspanstyle[\"font-style\"] as string);\r\n            tspan.setAttribute(\"font-family\", tspanstyle[\"font-family\"] as string);\r\n            // tspan.setAttribute(\"font-size\", tspanstyle[\"font-size\"] as string);\r\n            tspan.setAttribute(\"font-size\", font_size.toString());\r\n            tspan.setAttribute(\"font-weight\", tspanstyle[\"font-weight\"] as string);\r\n            // tspan.setAttribute(\"text-anchor\", tspanstyle[\"text-anchor\"] as string);\r\n            tspan.style[\"fill\"] = get_color(tspanstyle.fill as string, tab_color);\r\n            tspan.style[\"stroke\"] = get_color(tspanstyle.stroke as string, tab_color);\r\n            tspan.style[\"opacity\"] = tspanstyle.opacity as string;\r\n            // if baseline-shift is defined, set it\r\n            if (tspanstyle[\"baseline-shift\"]) \r\n                tspan.setAttribute(\"baseline-shift\", tspanstyle[\"baseline-shift\"] as string);\r\n\r\n            let text = tspandata.text;\r\n            if (tspanstyle[\"textvar\"]) text = str_to_mathematical_italic(text);\r\n            tspan.innerHTML = text;\r\n            textsvg.appendChild(tspan);\r\n\r\n            is_firstline = false;\r\n        }\r\n\r\n        //\r\n        // let scale = textdata[\"font-scale\"] == \"auto\" ? \r\n        //     calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\r\n        // let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\r\n        //\r\n        // // set font styles (font-family, font-size, font-weight)\r\n        // text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\r\n        // text.setAttribute(\"font-size\", font_size.toString());\r\n        // text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\r\n        // text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\r\n        // // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\r\n        textsvg.setAttribute(\"dy\", textdata[\"dy\"] as string);\r\n        textsvg.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\r\n        textsvg.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\r\n        if (svgtag != undefined) textsvg.setAttribute(\"_dg_tag\", svgtag);\r\n        //\r\n        // // custom attribute for tex display\r\n        // text.setAttribute(\"_x\", xpos.toString());\r\n        // text.setAttribute(\"_y\", ypos.toString());\r\n        // text.setAttribute(\"_angle\", angle_deg.toString());\r\n        // \r\n        // for (let stylename in style) {\r\n        //     text.style[stylename as any] = (style as any)[stylename as any];\r\n        // }\r\n        //\r\n        // // set the content of the text\r\n        // let text_content = textdata[\"text\"];\r\n        // if (diagram.tags.includes('textvar') && !is_texstr(text_content)) \r\n        //     text_content = str_to_mathematical_italic(text_content);\r\n        // text.innerHTML = text_content;\r\n        //\r\n        // // add to svgelement\r\n        target_element.appendChild(textsvg);\r\n    }\r\n}\r\n\r\n/**\r\n * Get all svg elements with a specific tag\r\n * @param svgelement the svg element to search\r\n * @param tag the tag to search\r\n * @returns a list of svg elements with the tag\r\n */\r\nexport function get_tagged_svg_element(tag : string, svgelement : SVGElement) : SVGElement[] {\r\n    let result : SVGElement[] = [];\r\n    for (let i in svgelement.children) {\r\n        let child = svgelement.children[i];\r\n        if (!(child instanceof SVGElement)) continue;\r\n        if (child.getAttribute(\"_dg_tag\") == tag) {\r\n            result.push(child);\r\n        }\r\n        // recurse through all children\r\n        if (child.children?.length) {\r\n            result = result.concat(get_tagged_svg_element(tag, child));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @param svgelement the svg element to draw to\r\n * @param diagram the diagram to draw\r\n * @param render_text whether to render text\r\n * @param embed_image (optional) whether to embed images\r\n * this allow the image to be downloaded as SVG with the image embedded\r\n * @param text_scaling_factor (optional) the scaling factor for text\r\n * @param svgtag (optional) the tag to add to the svg element\r\n */\r\nexport function f_draw_to_svg(\r\n    svgelement : SVGSVGElement, target_element: SVGSVGElement|SVGGElement,\r\n    diagram : Diagram, render_text : boolean = true, embed_image : boolean = false,\r\n    text_scaling_factor? : number, svgtag? : string\r\n) : void {\r\n    if (diagram.type == DiagramType.Polygon) {\r\n        draw_polygon(svgelement, target_element, diagram, svgtag);\r\n    } else if (diagram.type == DiagramType.Curve){\r\n        draw_curve(svgelement, target_element, diagram, svgtag);\r\n    } else if (diagram.type == DiagramType.Text || diagram.type == DiagramType.MultilineText){\r\n        // do nothing\r\n    } else if (diagram.type == DiagramType.Image){\r\n        draw_image(target_element, diagram, embed_image, svgtag);\r\n    } else if (diagram.type == DiagramType.Diagram){\r\n        for (let d of diagram.children) {\r\n            f_draw_to_svg(svgelement, target_element, d, false, embed_image, undefined, svgtag);\r\n        }\r\n    } else {\r\n        console.warn(\"Unreachable, unknown diagram type : \" + diagram.type);\r\n    }\r\n\r\n    // draw text last to make the scaling works\r\n    // because the text is scaled based on the bounding box of the svgelement\r\n    if (render_text) {\r\n        if (text_scaling_factor == undefined){\r\n            text_scaling_factor = calculate_text_scale(svgelement);\r\n        }\r\n        let text_diagrams      : Diagram[] = collect_text(diagram, DiagramType.Text);\r\n        let multiline_diagrams : Diagram[] = collect_text(diagram, DiagramType.MultilineText);\r\n        draw_texts(target_element, text_diagrams, text_scaling_factor ?? 1, svgtag);\r\n        draw_multiline_texts(target_element, multiline_diagrams, text_scaling_factor ?? 1, svgtag);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * WARNING: DEPRECATED\r\n * use `draw_to_svg_element` instead\r\n *\r\n * Draw a diagram to an svg element\r\n * @param outer_svgelement the outer svg element to draw to\r\n * @param diagram the diagram to draw\r\n * @param set_html_attribute whether to set the html attribute of the outer_svgelement\r\n * @param render_text whether to render text\r\n * @param clear_svg whether to clear the svg before drawing\r\n */\r\nexport function draw_to_svg(outer_svgelement : SVGSVGElement, diagram : Diagram,\r\n    set_html_attribute : boolean = true, render_text : boolean = true, clear_svg : boolean = true) : void {\r\n    let options : draw_to_svg_options = {\r\n        set_html_attribute : set_html_attribute,\r\n        render_text : render_text,\r\n        clear_svg : clear_svg,\r\n    };\r\n    draw_to_svg_element(outer_svgelement, diagram, options);\r\n}\r\n\r\nexport interface draw_to_svg_options {\r\n    set_html_attribute? : boolean,\r\n    render_text? : boolean,\r\n    clear_svg? : boolean,\r\n    embed_image? : boolean,\r\n    background_color? : string,\r\n    padding? : number | number[],\r\n    text_scaling_reference_svg? : SVGSVGElement,\r\n    text_scaling_reference_padding? : number | number[],\r\n    filter_strings? : string[],\r\n}\r\n\r\n// TODO: replace draw_to_svg with the current draw_to_svg_element in the next major version\r\n\r\n/**\r\n * Draw a diagram to an svg element\r\n * @param outer_svgelement the outer svg element to draw to\r\n * @param diagram the diagram to draw\r\n * @param options the options for drawing\r\n * ```typescript\r\n * options : {\r\n *    set_html_attribute? : boolean (true),\r\n *    render_text? : boolean (true),\r\n *    clear_svg? : boolean (true),\r\n *    embed_image? : boolean (false),\r\n *    background_color? : string (undefined),\r\n *    padding? : number | number[] (10),\r\n *    text_scaling_reference_svg? : SVGSVGElement (undefined),\r\n *    text_scaling_reference_padding? : number | number[] (undefined),\r\n * }\r\n * ````\r\n * define `text_scaling_reference_svg` and `text_scaling_reference_padding` to scale text based on another svg element\r\n */\r\nexport function draw_to_svg_element(outer_svgelement : SVGSVGElement, diagram : Diagram, options : draw_to_svg_options = {}) : void {\r\n    const set_html_attribute = options.set_html_attribute ?? true;\r\n    const render_text = options.render_text ?? true;\r\n    const clear_svg = options.clear_svg ?? true;\r\n    const embed_image = options.embed_image ?? false;\r\n    \r\n    let svgelement : SVGSVGElement | undefined = undefined;\r\n    // check if outer_svgelement has a child with meta=diagram_svg\r\n    for (let i in outer_svgelement.children) {\r\n        let child = outer_svgelement.children[i];\r\n        if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == \"diagram_svg\") {\r\n            svgelement = child;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (svgelement == undefined) {\r\n        // if svgelemet doesn't exist yet, create it\r\n        // create an inner svg element\r\n        svgelement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        svgelement.setAttribute(\"meta\", \"diagram_svg\")\r\n        svgelement.setAttribute(\"width\", \"100%\");\r\n        svgelement.setAttribute(\"height\", \"100%\");\r\n        outer_svgelement.appendChild(svgelement);\r\n    }\r\n    \r\n    handle_filter_strings(outer_svgelement, options.filter_strings);\r\n\r\n    let text_scaling_factor : number | undefined = undefined;\r\n    if (options.text_scaling_reference_svg) {\r\n        options.text_scaling_reference_padding = options.text_scaling_reference_padding ?? options.padding ?? 10;\r\n        options.text_scaling_reference_padding = expand_directional_value(options.text_scaling_reference_padding);\r\n        text_scaling_factor = calculate_text_scale(\r\n            options.text_scaling_reference_svg,\r\n            options.text_scaling_reference_padding as [number, number, number, number]\r\n        );\r\n    }\r\n    \r\n    // TODO : for performance, do smart clearing of svg, and not just clear everything\r\n    if (clear_svg) svgelement.innerHTML = \"\";\r\n\r\n    f_draw_to_svg(svgelement, svgelement, diagram, render_text, embed_image, text_scaling_factor);\r\n\r\n    if (set_html_attribute) {\r\n        const pad_px = expand_directional_value(options.padding ?? 10);\r\n        // set viewbox to the bounding box\r\n        let bbox = svgelement.getBBox();\r\n        // add padding of 10px to the bounding box (if the graph is small, it'll mess it up)\r\n        // scale 10px based on the width and height of the svg\r\n        let svg_width = svgelement.width.baseVal.value - pad_px[1] - pad_px[3];\r\n        let svg_height = svgelement.height.baseVal.value - pad_px[0] - pad_px[2];\r\n        let scale = Math.max(bbox.width / svg_width, bbox.height / svg_height)\r\n        let pad = pad_px.map(p => p*scale);\r\n        // [top, right, bottom, left]\r\n        bbox.x -= pad[3];\r\n        bbox.y -= pad[0];\r\n        bbox.width += pad[1] + pad[3];\r\n        bbox.height += pad[0] + pad[2];\r\n        svgelement.setAttribute(\"viewBox\", `${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`);\r\n        // set preserveAspectRatio to xMidYMid meet\r\n        svgelement.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n        outer_svgelement.style.overflow = \"visible\";\r\n    }\r\n    \r\n    if (options.background_color) {\r\n        let bbox = svgelement.getBBox();\r\n        // if svgelement has viewBox set, use it instead of getBBox\r\n        if (svgelement.viewBox.baseVal.width !== 0) bbox = svgelement.viewBox.baseVal;\r\n        \r\n        // draw a rectangle as the background\r\n        let rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        rect.setAttribute(\"x\", bbox.x.toString());\r\n        rect.setAttribute(\"y\", bbox.y.toString());\r\n        rect.setAttribute(\"width\", bbox.width.toString());\r\n        rect.setAttribute(\"height\", bbox.height.toString());\r\n        rect.style.fill = get_color(options.background_color as string, tab_color);\r\n        rect.style.stroke = \"none\";\r\n        \r\n        // prepend\r\n        svgelement.insertBefore(rect, svgelement.firstChild);\r\n    }\r\n}\r\n\r\nfunction handle_filter_strings(svgelement : SVGSVGElement, filter_strings? : string[]) : void {\r\n    if (filter_strings == undefined || filter_strings.length == 0) return;\r\n    \r\n    let defs = svgelement.querySelector(\"defs\");\r\n    if (defs == null) {\r\n        defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\r\n        svgelement.insertBefore(defs, svgelement.firstChild);\r\n    }\r\n    \r\n    defs.innerHTML = \"\";\r\n    for (let filter_string of filter_strings) {\r\n        defs.innerHTML += filter_string;\r\n    }\r\n}\r\n\r\nfunction is_texstr(s : string) : boolean {\r\n    return s.startsWith(\"$\") && s.endsWith(\"$\");\r\n}\r\nfunction is_texdisplaystr(s : string) : boolean {\r\n    return s.startsWith(\"$$\") && s.endsWith(\"$$\");\r\n}\r\nfunction strip_texstr(s : string) : string {\r\n    if (is_texdisplaystr(s)) return s.substring(2, s.length-2);\r\n    if (is_texstr(s)) return s.substring(1, s.length-1);\r\n    return s;\r\n}\r\n\r\ntype texhandler_config = {\r\n    display : boolean,\r\n    // fontsize : number,\r\n}\r\ntype texhadler_function = (texstr : string, config : texhandler_config) => string; // return SVG string\r\n\r\n/**\r\n * Recursively handle tex in svg\r\n * @param svg the svg element to handle\r\n * @param texhandler the tex handler function\r\n */\r\nexport function handle_tex_in_svg(svg : SVGElement, texhandler : texhadler_function) : void {\r\n    // recurse through all children of svg until we find text\r\n    // then replace the text with the svg returned by texhandler\r\n    for (let i = 0; i < svg.children.length; i++) {\r\n        let child = svg.children[i];\r\n        if (child instanceof SVGTextElement) {\r\n            let str = child.innerHTML;\r\n            if (!is_texstr(str)) continue;\r\n\r\n            let fontsizestr = child.getAttribute('font-size');\r\n            if (fontsizestr == null) continue;\r\n            let fontsize = parseFloat(fontsizestr);\r\n\r\n            let svgstr = texhandler(strip_texstr(str), {\r\n                display : is_texdisplaystr(str),\r\n                // fontsize : parseFloat(fontsize),\r\n            });\r\n\r\n            let xstr = child.getAttribute('_x');\r\n            let ystr = child.getAttribute('_y');\r\n            // let angstr = child.getAttribute('_angle');\r\n            if (xstr == null || ystr == null) continue;\r\n\r\n            let textanchor = child.getAttribute('text-anchor');\r\n            let dy = child.getAttribute('dy');\r\n            if (textanchor == null || dy == null) continue;\r\n\r\n            child.outerHTML = svgstr;\r\n            child = svg.children[i]; // update child\r\n\r\n            // HACK: scaling for mathjax tex2svg, for other option think about it later\r\n            let widthexstr = child.getAttribute('width');   // ###ex\r\n            if (widthexstr == null) continue;\r\n            let widthex = parseFloat(widthexstr.substring(0, widthexstr.length-2));\r\n            let heightexstr = child.getAttribute('height'); // ###ex\r\n            if (heightexstr == null) continue;\r\n            let heightex = parseFloat(heightexstr.substring(0, heightexstr.length-2));\r\n\r\n            const magic_number = 2;\r\n            let width = widthex * fontsize / magic_number;\r\n            let height = heightex * fontsize / magic_number;\r\n\r\n            let xval = parseFloat(xstr);\r\n            let yval = parseFloat(ystr);\r\n            switch (textanchor) {\r\n                case \"start\": break; // left\r\n                case \"middle\":       // center\r\n                    xval -= width/2; break;\r\n                case \"end\":          // right\r\n                    xval -= width; break;\r\n            }\r\n            switch (dy) {\r\n                case \"0.75em\": break; // top\r\n                case \"0.25em\":                  // center\r\n                    yval -= height/2; break;\r\n                case \"-0.25em\":         // bottom\r\n                    yval -= height; break;\r\n            }\r\n\r\n            child.setAttribute('width', width.toString());\r\n            child.setAttribute('height', height.toString());\r\n            child.setAttribute('x', xval.toString());\r\n            child.setAttribute('y', yval.toString());\r\n        } else if (child instanceof SVGElement) {\r\n            handle_tex_in_svg(child, texhandler);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Download the svg as svg file\r\n * @param outer_svgelement the outer svg element to download\r\n */\r\nexport function download_svg_as_svg(outer_svgelement : SVGSVGElement) : void {\r\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\r\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\r\n    let locator_svgelement = outer_svgelement.querySelector(\"svg[meta=control_svg]\") as SVGSVGElement | null;\r\n\r\n    let svgelement = inner_svgelement;\r\n    // concat locator_svgelement to the copy of inner_svgelement\r\n    if (locator_svgelement != null) {  \r\n        let copy_inner_svgelement = inner_svgelement.cloneNode(true) as SVGSVGElement;\r\n        for (let i in locator_svgelement.children) {\r\n            let child = locator_svgelement.children[i];\r\n            if (!(child instanceof SVGSVGElement)) continue;\r\n            copy_inner_svgelement.appendChild(child.cloneNode(true));\r\n        }\r\n        svgelement = copy_inner_svgelement;\r\n    }\r\n\r\n    // get svg string\r\n    let svg_string = new XMLSerializer().serializeToString(svgelement);\r\n    let blob = new Blob([svg_string], {type: \"image/svg+xml\"});\r\n    let url = URL.createObjectURL(blob);\r\n    let a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"diagramatics.svg\";\r\n    a.click();\r\n}\r\n\r\n/**\r\n * Download the svg as png file\r\n * @param outer_svgelement the outer svg element to download\r\n */\r\nexport function download_svg_as_png(outer_svgelement : SVGSVGElement) {\r\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\r\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\r\n    let svgelem = outer_svgelement;\r\n\r\n    let svg_string = new XMLSerializer().serializeToString(svgelem);\r\n    let svg_blob = new Blob([svg_string], {type: \"image/svg+xml\"});\r\n\r\n    const DOMURL = window.URL || window.webkitURL || window;\r\n    const url = DOMURL.createObjectURL(svg_blob);\r\n\r\n    const image = new Image();\r\n    image.width = svgelem.width.baseVal.value;\r\n    image.height = svgelem.height.baseVal.value;\r\n    image.src = url;\r\n    image.onload = function() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx?.drawImage(image, 0, 0);\r\n        DOMURL.revokeObjectURL(url);\r\n\r\n        const imgURI = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        const a = document.createElement(\"a\");\r\n        a.href = imgURI;\r\n        a.download = \"diagramatics.png\";\r\n        a.click();\r\n    }\r\n}\r\n","import { Diagram, polygon, line, curve, text, diagram_combine } from './diagram.js';\r\nimport { Vector2, V2 } from './vector.js';\r\nimport { to_radian } from './utils.js';\r\nimport { TAG } from './tag_names.js';\r\n\r\n// function helpers to create common shapes\r\n\r\n/**\r\n * Create rectange centered at origin\r\n * @param width width of the rectangle\r\n * @param height height of the rectangle\r\n * @returns a Diagram object\r\n */\r\nexport function rectangle(width : number, height : number) : Diagram {\r\n    let points = [\r\n        V2(-width/2,-height/2), V2( width/2,-height/2), \r\n        V2( width/2, height/2), V2(-width/2, height/2)\r\n    ];\r\n    return polygon(points);\r\n}\r\n\r\n/**\r\n * Create rectange with a given bottom left corner and top right corner\r\n * @param bottomleft bottom left corner of the rectangle\r\n * @param topright top right corner of the rectangle\r\n * @returns a Diagram object\r\n */\r\nexport function rectangle_corner(bottomleft : Vector2, topright : Vector2) : Diagram {\r\n    let points = [\r\n        bottomleft, V2(topright.x, bottomleft.y),\r\n        topright, V2(bottomleft.x, topright.y),\r\n    ];\r\n    return polygon(points);\r\n}\r\n\r\n/**\r\n * Create square centered at origin\r\n * @param side side length of the square\r\n * @returns a Diagram object\r\n */\r\nexport function square(side : number = 1) : Diagram {\r\n    return rectangle(side, side);\r\n}\r\n\r\n/**\r\n * Create regular polygon centered at origin with a given radius\r\n * @param n number of sides\r\n * @param radius radius of the polygon\r\n * @returns a Diagram object\r\n * \\* if you want to create a regular polygon with a given side length, use regular_polygon_side\r\n */\r\nexport function regular_polygon(n : number, radius : number = 1) : Diagram {\r\n    let points : Vector2[] = [];\r\n    for (let i = 0; i < n; i++) {\r\n        points.push(V2(0,radius).rotate(i*2*Math.PI/n));\r\n    }\r\n    return polygon(points);\r\n}\r\n\r\n/**\r\n * Create regular polygon centered at origin with a given side length\r\n * @param n number of sides\r\n * @param sidelength side length of the polygon\r\n * @returns a Diagram object\r\n * \\* if you want to create a regular polygon with a given radius, use regular_polygon\r\n */\r\nexport function regular_polygon_side(n : number, sidelength : number = 1) : Diagram {\r\n    let radius = sidelength/(2*Math.sin(Math.PI/n));\r\n    return regular_polygon(n, radius);\r\n}\r\n\r\n/**\r\n * Create circle centered at origin\r\n * *currently implemented as a regular polygon with 50 sides*\r\n * @param radius radius of the circle\r\n * @returns a Diagram object\r\n */\r\nexport function circle(radius : number = 1) : Diagram {\r\n    return regular_polygon(50, radius).append_tags(TAG.CIRCLE);\r\n}\r\n\r\n/**\r\n * Create an arc centered at origin\r\n * @param radius radius of the arc\r\n * @param angle angle of the arc\r\n * @returns a Diagram object\r\n */\r\nexport function arc(radius : number = 1, angle : number = to_radian(360)) : Diagram {\r\n    let n = 100;\r\n    let points : Vector2[] = [];\r\n    for (let i = 0; i < n; i++) {\r\n        points.push(V2(radius,0).rotate(i*angle/(n-1)));\r\n    }\r\n    return curve(points);\r\n}\r\n\r\n/**\r\n * Create an arrow from origin to a given point\r\n * @param v the end point of the arrow\r\n * @param headsize size of the arrow head\r\n * @returns a Diagram object\r\n */\r\nexport function arrow(v : Vector2, headsize : number = 1) : Diagram {\r\n    let line_diagram = line(V2(0,0), v).append_tags(TAG.ARROW_LINE);\r\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\r\n    let head_triangle = raw_triangle.rotate(v.angle()).position(v).append_tags(TAG.ARROW_HEAD);\r\n    return diagram_combine(line_diagram, head_triangle);\r\n}\r\n\r\n/**\r\n * Create an arrow from a given point to another given point\r\n * @param start the start point of the arrow\r\n * @param end the end point of the arrow\r\n * @param headsize size of the arrow head\r\n * @returns a Diagram object\r\n */\r\nexport function arrow1(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\r\n    return arrow(end.sub(start), headsize).position(start);\r\n}\r\n\r\n/**\r\n * Create a two-sided arrow from a given point to another given point\r\n * @param start the start point of the arrow\r\n * @param end the end point of the arrow\r\n * @param headsize size of the arrow head\r\n * @returns a Diagram object\r\n */\r\nexport function arrow2(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\r\n    let line_diagram = line(start, end).append_tags(TAG.ARROW_LINE);\r\n    let direction    = end.sub(start);\r\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\r\n    let head_triangle  = raw_triangle.rotate(direction.angle()).position(end).append_tags(TAG.ARROW_HEAD);\r\n    let head_triangle2 = raw_triangle.rotate(direction.angle()+Math.PI).position(start).append_tags(TAG.ARROW_HEAD);\r\n    return diagram_combine(line_diagram, head_triangle, head_triangle2);\r\n}\r\n\r\n/**\r\n * Create a text object with mathematical italic font\r\n * @param str text to be displayed\r\n * @returns a Diagram object\r\n */\r\nexport function textvar(str : string) : Diagram {\r\n    return text(str).append_tags(TAG.TEXTVAR);\r\n}\r\n","import { Diagram, DiagramType } from '../diagram.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\nimport { TAG } from '../tag_names.js';\r\n\r\n// ============================= utilities\r\n/**\r\n * Calculate the area of a polygon\r\n * @param p a polygon Diagram\r\n * if p is a Diagram with children, calculate the sum of the areas of the children\r\n * @returns area of the polygon\r\n*/\r\nexport function area(p : Diagram) : number {\r\n    if (p.type == DiagramType.Polygon) {\r\n        return calculate_polygon_area(p.path?.points ?? []);\r\n    }\r\n    else if (p.type == DiagramType.Diagram) {\r\n        return p.children.reduce((acc, c) => acc + area(c), 0);\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\nfunction calculate_polygon_area(vertices: Vector2[]) : number {\r\n    let area = 0;\r\n    const n = vertices.length;\r\n    for (let i = 0; i < n; i++) {\r\n        const j = (i + 1) % n;\r\n        const xi = vertices[i].x; const yi = vertices[i].y;\r\n        const xj = vertices[j].x; const yj = vertices[j].y;\r\n        area += xi * yj - xj * yi;\r\n    }\r\n    return Math.abs(area) / 2;\r\n}\r\n\r\n/**\r\n * Get the radius of a circle\r\n * @param circle a circle Diagram\r\n * @returns radius of the circle\r\n */\r\nexport function circle_radius(circle : Diagram) : number {\r\n    let tags = circle.tags;\r\n    if (!tags.includes(TAG.CIRCLE)) return -1;\r\n\r\n    let center = circle.get_anchor('center-center');\r\n    if (circle.path == undefined) return -1;\r\n    let p0 = circle.path.points[0];\r\n    return center.sub(p0).length();\r\n}\r\n\r\n/**\r\n * Get the tangent points of a circle from a point\r\n * @param point a point\r\n * @param circle a circle Diagram\r\n */\r\nexport function circle_tangent_point_from_point(point : Vector2, circle : Diagram) : [Vector2, Vector2] {\r\n    let radius = circle_radius(circle);\r\n    if (radius == -1) return [V2(0,0), V2(0,0)];\r\n    let center = circle.get_anchor('center-center');\r\n\r\n    // https://en.wikipedia.org/wiki/Tangent_lines_to_circles\r\n    \r\n    let r = radius;\r\n    let d0_2 = center.sub(point).length_sq();\r\n    let r_2 = r*r;\r\n\r\n    let v0 = point.sub(center);\r\n    let sLeft  = r_2 / d0_2;\r\n    let vLeft  = v0.scale(sLeft);\r\n    let sRight = r * Math.sqrt(d0_2 - r_2) / d0_2;\r\n    let vRight = V2(-v0.y, v0.x).scale(sRight);\r\n    let P1 = vLeft.add(vRight).add(center);\r\n    let P2 = vLeft.sub(vRight).add(center);\r\n    return [P1, P2];\r\n}\r\n\r\n/**\r\n * Get the points of a line\r\n * @param l a line Diagram\r\n * @returns the two points of the line\r\n */\r\nexport function line_points(l : Diagram) : [Vector2, Vector2] {\r\n    let tags = l.tags;\r\n    if (!tags.includes(TAG.LINE)) return [V2(0,0), V2(0,0)];\r\n    if (l.path == undefined) return [V2(0,0), V2(0,0)];\r\n\r\n    let p0 = l.path.points[0];\r\n    let p1 = l.path.points[1];\r\n    return [p0, p1];\r\n}\r\n\r\n/**\r\n * Get the intersection of a line with a horizontal line at y = yi\r\n * @param l a line Diagram\r\n * @param yi y value of the horizontal line\r\n * @returns the intersection point\r\n */\r\nexport function line_intersection_y(l : Diagram, yi : number) : Vector2 {\r\n    let [a, b] = line_points(l);\r\n    let xi = a.x + (b.x - a.x) * (yi - a.y) / (b.y - a.y);\r\n    return V2(xi, yi);\r\n}\r\n\r\n/**\r\n * Get the intersection of a line with a vertical line at x = xi\r\n * @param l a line Diagram\r\n * @param xi x value of the vertical line\r\n * @returns the intersection point\r\n */\r\nexport function line_intersection_x(l : Diagram, xi : number) : Vector2 {\r\n    let [a, b] = line_points(l);\r\n    let yi = a.y + (b.y - a.y) * (xi - a.x) / (b.x - a.x);\r\n    return V2(xi, yi);\r\n}\r\n\r\n/**\r\n * Get the intersection of two lines\r\n * @param l1 a line Diagram\r\n * @param l2 a line Diagram\r\n * @returns the intersection point\r\n * if the lines are parallel, return V2(Infinity, Infinity)\r\n */\r\nexport function line_intersection(l1 : Diagram, l2 : Diagram) : Vector2 {\r\n    if (!l1.tags.includes(TAG.LINE) || !l2.tags.includes(TAG.LINE)) return V2(Infinity, Infinity);\r\n    let [a1, b1] = line_points(l1);\r\n    let [a2, b2] = line_points(l2);\r\n\r\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\r\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\r\n\r\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\r\n    if (d == 0) return V2(Infinity, Infinity);\r\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\r\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\r\n    return V2(x, y);\r\n}\r\n\r\n\r\n\r\n// ============================= shapes\r\n\r\n/**\r\n * Extend a line by a length on both ends\r\n * @param l a line Diagram\r\n * @param len1 length to extend on the first end\r\n * @param len2 length to extend on the second end\r\n * @returns a new line Diagram\r\n */\r\nexport function line_extend(l : Diagram, len1 : number, len2 : number) : Diagram {\r\n    let tags = l.tags;\r\n    if (!tags.includes(TAG.LINE)) return l;\r\n    if (l.path == undefined) return l;\r\n\r\n    let p0 = l.path.points[0];\r\n    let p1 = l.path.points[1];\r\n    let v = p1.sub(p0).normalize();\r\n    let p0_new = p0.sub(v.scale(len1));\r\n    let p1_new = p1.add(v.scale(len2));\r\n\r\n    let newl = l.copy();\r\n    if (newl.path == undefined) return l; // to surpress typescript error\r\n    newl.path.points = [p0_new, p1_new];\r\n    return newl;\r\n}\r\n\r\n/**\r\n * Get the size of a diagram\r\n * @param diagram a diagram\r\n * @returns the width and height of the diagram\r\n */\r\nexport function size(diagram : Diagram) : [number, number] {\r\n    let bb = diagram.bounding_box();\r\n    return [bb[1].x - bb[0].x, bb[1].y - bb[0].y];\r\n}\r\n","import { Diagram, diagram_combine, empty } from './diagram.js';\r\nimport { V2 } from './vector.js';\r\nimport { size } from './shapes/shapes_geometry.js';\r\n\r\nexport type VerticalAlignment   = 'top'  | 'center' | 'bottom';\r\nexport type HorizontalAlignment = 'left' | 'center' | 'right';\r\n\r\n/**\r\n * Align diagrams vertically\r\n * @param diagrams diagrams to be aligned\r\n * @param alignment vertical alignment of the diagrams\r\n * alignment can be 'top', 'center', or 'bottom'\r\n * @returns array of aligned diagrams\r\n */\r\nexport function align_vertical(diagrams : Diagram[], alignment : VerticalAlignment = 'center') : Diagram {\r\n    // align all the diagrams following the first diagram\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = [...diagrams]\r\n\r\n    if (alignment == 'top'){\r\n        let top_y = newdiagrams[0].get_anchor(\"top-left\").y;\r\n        // return diagrams.map(d => d.translate(V2(0, top_y - d.get_anchor(\"top-left\").y)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, top_y - newdiagrams[i].get_anchor(\"top-left\").y));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else if (alignment == 'center'){\r\n        let center_y = newdiagrams[0].get_anchor(\"center-left\").y;\r\n        // return diagrams.map(d => d.translate(V2(0, center_y - d.get_anchor(\"center-left\").y)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, center_y - newdiagrams[i].get_anchor(\"center-left\").y));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else if (alignment == 'bottom'){\r\n        let bottom_y = newdiagrams[0].get_anchor(\"bottom-left\").y;\r\n        // return diagrams.map(d => d.translate(V2(0, bottom_y - d.get_anchor(\"bottom-left\").y)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, bottom_y - newdiagrams[i].get_anchor(\"bottom-left\").y));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else {\r\n        throw new Error(\"Unknown vertical alignment : \" + alignment);\r\n    }\r\n}\r\n\r\n/**\r\n * Align diagrams horizontally\r\n * @param diagrams diagrams to be aligned\r\n * @param alignment horizontal alignment of the diagrams\r\n * alignment can be 'left', 'center', or 'right'\r\n * @returns array of aligned diagrams\r\n */\r\nexport function align_horizontal(diagrams : Diagram[], alignment : HorizontalAlignment = 'center') : Diagram {\r\n\r\n    // align all the diagrams following the first diagram\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = [...diagrams]\r\n\r\n    if (alignment == 'left'){\r\n        let left_x = newdiagrams[0].get_anchor(\"top-left\").x;\r\n        // return newdiagrams.map(d => d.translate(V2(left_x - d.get_anchor(\"top-left\").x, 0)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(left_x - newdiagrams[i].get_anchor(\"top-left\").x, 0));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else if (alignment == 'center'){\r\n        let center_x = newdiagrams[0].get_anchor(\"top-center\").x;\r\n        // return newdiagrams.map(d => d.translate(V2(center_x - d.get_anchor(\"top-center\").x, 0)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(center_x - newdiagrams[i].get_anchor(\"top-center\").x, 0));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else if (alignment == 'right'){\r\n        let right_x = newdiagrams[0].get_anchor(\"top-right\").x;\r\n        // return newdiagrams.map(d => d.translate(V2(right_x - d.get_anchor(\"top-right\").x, 0)));\r\n        for (let i = 0; i < newdiagrams.length; i++) {\r\n            newdiagrams[i] = newdiagrams[i].translate(V2(right_x - newdiagrams[i].get_anchor(\"top-right\").x, 0));\r\n        }\r\n        return diagram_combine(...newdiagrams);\r\n    }\r\n    else {\r\n        throw new Error(\"Unknown horizontal alignment : \" + alignment);\r\n    }\r\n}\r\n\r\n/**\r\n * Distribute diagrams horizontally\r\n * @param diagrams diagrams to be distributed\r\n * @param space space between the diagrams (default = 0)\r\n * @returns array of distributed diagrams\r\n */\r\nexport function distribute_horizontal(diagrams : Diagram[], space : number = 0) : Diagram {\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = [...diagrams]\r\n\r\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\r\n    for (let i = 1; i < newdiagrams.length; i++) {\r\n        let prev_diagram = distributed_diagrams[i-1];\r\n        let this_diagram = newdiagrams[i];\r\n        let prev_right = prev_diagram.get_anchor(\"top-right\").x;\r\n        let this_left  = this_diagram.get_anchor(\"top-left\").x;\r\n        let dx = prev_right - this_left + space;\r\n        distributed_diagrams.push(this_diagram.translate(V2(dx, 0)));\r\n    }\r\n    return diagram_combine(...distributed_diagrams);\r\n}\r\n\r\n/**\r\n * Distribute diagrams vertically\r\n * @param diagrams diagrams to be distributed\r\n * @param space space between the diagrams (default = 0)\r\n * @returns array of distributed diagrams\r\n */\r\nexport function distribute_vertical(diagrams : Diagram[], space : number = 0) : Diagram {\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = [...diagrams]\r\n\r\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\r\n    for (let i = 1; i < newdiagrams.length; i++) {\r\n        let prev_diagram = distributed_diagrams[i-1];\r\n        let this_diagram = newdiagrams[i];\r\n        let prev_bottom = prev_diagram.get_anchor(\"bottom-left\").y;\r\n        let this_top    = this_diagram.get_anchor(\"top-left\").y;\r\n        let dy = prev_bottom - this_top - space;\r\n        distributed_diagrams.push(this_diagram.translate(V2(0, dy)));\r\n    }\r\n    return diagram_combine(...distributed_diagrams);\r\n}\r\n\r\n/**\r\n * Distribute diagrams horizontally and align\r\n * @param diagrams diagrams to be distributed\r\n * @param horizontal_space space between the diagrams (default = 0)\r\n * @param alignment vertical alignment of the diagrams\r\n * alignment can be 'top', 'center', or 'bottom'\r\n * @returns array of distributed and aligned diagrams\r\n */\r\nexport function distribute_horizontal_and_align(diagrams : Diagram[], horizontal_space : number = 0,\r\n    alignment : VerticalAlignment = 'center') : Diagram {\r\n    return distribute_horizontal(align_vertical(diagrams, alignment).children, horizontal_space);\r\n}\r\n\r\n/**\r\n * Distribute diagrams vertically and align\r\n * @param diagrams diagrams to be distributed\r\n * @param vertical_space space between the diagrams (default = 0)\r\n * @param alignment horizontal alignment of the diagrams\r\n * alignment can be 'left', 'center', or 'right'\r\n * @returns array of distributed and aligned diagrams\r\n */\r\nexport function distribute_vertical_and_align(diagrams : Diagram[], vertical_space : number = 0,\r\n    alignment : HorizontalAlignment = 'center') : Diagram {\r\n    return distribute_vertical(align_horizontal(diagrams, alignment).children, vertical_space);\r\n}\r\n\r\n/**\r\n * Distribute diagrams in a grid\r\n * @param diagrams diagrams to be distributed\r\n * @param column_count number of columns\r\n * @param vectical_space space between the diagrams vertically (default = 0)\r\n * @param horizontal_space space between the diagrams horizontally (default = 0)\r\n * NODE: the behaviour is updated in v1.3.0 \r\n * (now the returned diagram's children is the distributed diagrams instead of list of list of diagrams)\r\n */\r\nexport function distribute_grid_row(diagrams : Diagram[], column_count : number, \r\n    vectical_space : number = 0, horizontal_space : number = 0,\r\n) : Diagram {\r\n    if (diagrams.length == 0) { return empty(); }\r\n    let newdiagrams = [...diagrams]\r\n\r\n    let row_count = Math.ceil(newdiagrams.length / column_count);\r\n    let rows : Diagram[][] = [];\r\n    for (let i = 0; i < row_count; i++) {\r\n        rows.push(newdiagrams.slice(i * column_count, (i+1) * column_count));\r\n    }\r\n    let distributed_rows = rows.map(row => distribute_horizontal(row, horizontal_space));\r\n    let distributed_diagrams = distribute_vertical(distributed_rows, vectical_space);\r\n\r\n    let grid_diagrams = []\r\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\r\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\r\n            grid_diagrams.push(distributed_diagrams.children[i].children[j]);\r\n        }\r\n    }\r\n    return diagram_combine(...grid_diagrams);\r\n}\r\n\r\n/**\r\n * Distribute diagrams in a variable width row\r\n * if there is a diagram that is wider than the container width, it will be placed in a separate row\r\n * @param diagrams diagrams to be distributed\r\n * @param container_width width of the container\r\n * @param vertical_space space between the diagrams vertically (default = 0)\r\n * @param horizontal_space space between the diagrams horizontally (default = 0)\r\n * @param vertical_alignment vertical alignment of the diagrams (default = 'center')\r\n * alignment can be 'top', 'center', or 'bottom'\r\n * @param horizontal_alignment horizontal alignment of the diagrams (default = 'left')\r\n * alignment can be 'left', 'center', or 'right'\r\n */\r\nexport function distribute_variable_row(diagrams: Diagram[], container_width : number, \r\n    vertical_space : number = 0, horizontal_space : number = 0, \r\n    vertical_alignment : VerticalAlignment = 'center', \r\n    horizontal_alignment : HorizontalAlignment = 'left'\r\n) : Diagram {\r\n    if (diagrams.length == 0) { return empty(); }\r\n\r\n    let rows : Diagram[] = [];\r\n    let current_row : Diagram[] = [];\r\n    let current_row_w = 0;\r\n\r\n    function add_diagrams_to_rows(arr : Diagram[]) {\r\n        let distributed_row_dg = distribute_horizontal_and_align(arr, horizontal_space, vertical_alignment);\r\n        rows.push(distributed_row_dg);\r\n        current_row = [];\r\n        current_row_w = 0;\r\n    }\r\n\r\n    for (let i = 0; i < diagrams.length; i++) {\r\n        let d = diagrams[i];\r\n        let w = size(d)[0];\r\n        if (w > container_width) {\r\n            if (current_row.length > 0) add_diagrams_to_rows(current_row);\r\n            current_row.push(d); add_diagrams_to_rows(current_row);\r\n            continue;\r\n        }\r\n\r\n        if (current_row_w + horizontal_space + w > container_width) add_diagrams_to_rows(current_row);\r\n\r\n        current_row.push(d);\r\n        current_row_w += w + horizontal_space;\r\n    }\r\n\r\n    if (current_row.length > 0) add_diagrams_to_rows(current_row);\r\n\r\n    // distribute vertically\r\n    let distributed_diagrams = distribute_vertical_and_align(rows, vertical_space, horizontal_alignment);\r\n\r\n    let row_diagrams = []\r\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\r\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\r\n            row_diagrams.push(distributed_diagrams.children[i].children[j]);\r\n        }\r\n    }\r\n    return diagram_combine(...row_diagrams);\r\n}\r\n","import { Diagram, DiagramType, diagram_combine, empty } from './diagram.js';\r\nimport { str_to_mathematical_italic } from './unicode_utils.js'\r\nimport { Vector2, V2 } from './vector.js';\r\nimport { get_color, tab_color } from './color_palette.js';\r\nimport { f_draw_to_svg, calculate_text_scale } from './draw_svg.js';\r\nimport { rectangle, rectangle_corner } from './shapes.js';\r\nimport { size } from './shapes/shapes_geometry.js';\r\nimport { HorizontalAlignment, VerticalAlignment, distribute_horizontal_and_align, distribute_variable_row, distribute_vertical_and_align } from './alignment.js';\r\nimport { range } from './utils.js';\r\n\r\ntype BBox = [Vector2, Vector2]\r\nconst FOCUS_RECT_CLASSNAME = \"diagramatics-focusrect\"\r\nconst FOCUS_NO_OUTLINE_CLASSNAME = \"diagramatics-focusable-no-outline\"\r\n\r\nfunction format_number(val : number, prec : number) {\r\n    let fixed = val.toFixed(prec);\r\n    // remove trailing zeros\r\n    // and if the last character is a dot, remove it\r\n    return fixed.replace(/\\.?0+$/, \"\");\r\n}\r\nexport type formatFunction = (name : string, value : any, prec? : number) => string;\r\nconst defaultFormat_f : formatFunction = (name : string, val : any, prec? : number) => {\r\n    let val_str = (typeof val == 'number' && prec != undefined) ? format_number(val,prec) : val.toString();\r\n    return `${str_to_mathematical_italic(name)} = ${val_str}`;\r\n}\r\n\r\ntype setter_function_t = (_ : any) => void;\r\ntype inpVariables_t = {[key : string] : any};\r\ntype inpSetter_t    = {[key : string] : setter_function_t };\r\n\r\nenum control_svg_name {\r\n    locator   = \"control_svg\",\r\n    dnd       = \"dnd_svg\",\r\n    custom    = \"custom_int_svg\",\r\n    button    = \"button_svg\"\r\n}\r\nenum HTML_INT_TARGET {\r\n    DOCUMENT = \"document\",\r\n    SVG = \"svg\"\r\n} \r\n\r\n/**\r\n * Object that controls the interactivity of the diagram\r\n */\r\nexport class Interactive {\r\n    public inp_variables : inpVariables_t = {};\r\n    public inp_setter    : inpSetter_t = {};\r\n    public display_mode  : \"svg\" | \"canvas\" = \"svg\";\r\n\r\n    public diagram_svg : SVGSVGElement | undefined = undefined;\r\n    public locator_svg : SVGSVGElement | undefined = undefined;\r\n    public dnd_svg : SVGSVGElement | undefined = undefined;\r\n    public custom_svg : SVGSVGElement | undefined = undefined;\r\n    public button_svg : SVGSVGElement | undefined = undefined;\r\n\r\n    private locatorHandler? : LocatorHandler = undefined;\r\n    private dragAndDropHandler? : DragAndDropHandler = undefined;\r\n    private buttonHandler? : ButtonHandler = undefined;\r\n    // no support for canvas yet\r\n    \r\n    private focus_padding : number = 1;\r\n\r\n    public draw_function : (inp_object : inpVariables_t, setter_object? : inpSetter_t) => any \r\n        = (_) => {};\r\n    public display_precision : undefined | number = 5;\r\n    intervals : {[key : string] : any} = {};         \r\n    \r\n    public registeredEventListenerRemoveFunctions : (() => void)[] = [];\r\n    public single_int_mode: boolean = false;\r\n\r\n    /**\r\n     * @param control_container_div the div that contains the control elements\r\n     * @param diagram_outer_svg the svg element that contains the diagram\r\n     * \\* _only needed if you want to use the locator_\r\n     * @param inp_object_ the object that contains the variables\r\n     * \\* _only needed if you want to use custom input object_\r\n     */\r\n    constructor(\r\n        public control_container_div : HTMLElement, \r\n        public diagram_outer_svg? : SVGSVGElement,\r\n        inp_object_? : {[key : string] : any},\r\n        public event_target: HTML_INT_TARGET = HTML_INT_TARGET.SVG,\r\n    ){\r\n        if (inp_object_ != undefined){ this.inp_variables = inp_object_; }\r\n    }\r\n\r\n    public draw() : void {\r\n        this.draw_function(this.inp_variables, this.inp_setter);\r\n        this.locatorHandler?.setViewBox();\r\n        this.dragAndDropHandler?.setViewBox();\r\n        set_viewbox(this.custom_svg, this.diagram_svg);\r\n        set_viewbox(this.button_svg, this.diagram_svg);\r\n        // TODO: also do this for the other control_svg\r\n    }\r\n\r\n    public set(variable_name : string, val : any) : void {\r\n        this.inp_setter[variable_name](val);\r\n    }\r\n    public get(variable_name : string) : any {\r\n        return this.inp_variables[variable_name];\r\n    }\r\n\r\n    public label(variable_name : string, value : any, display_format_func : formatFunction = defaultFormat_f){\r\n\r\n        let labeldiv = document.createElement('div');\r\n        labeldiv.classList.add(\"diagramatics-label\");\r\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\r\n\r\n        this.inp_variables[variable_name] = value;\r\n\r\n        // setter ==========================\r\n        const setter = (val : any) => {\r\n            this.inp_variables[variable_name] = val;\r\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\r\n        }\r\n        this.inp_setter[variable_name] = setter;\r\n\r\n        // ==============================\r\n        // add components to div\r\n        //\r\n        // <div class=\"diagramatics-label-container\">\r\n        //     <div class=\"diagramatics-label\"></div>\r\n        // </div>\r\n        \r\n        let container = document.createElement('div');\r\n        container.classList.add(\"diagramatics-label-container\");\r\n        container.appendChild(labeldiv);\r\n\r\n        this.control_container_div.appendChild(container);\r\n    }\r\n\r\n\r\n    /**\r\n     * WARNING: deprecated\r\n     * use `locator_initial_draw` instead\r\n     */\r\n    public locator_draw(){\r\n        this.locatorHandler?.setViewBox();\r\n    }\r\n    public locator_initial_draw(){\r\n        // TODO: generate the svg here\r\n        this.locatorHandler?.setViewBox();\r\n    }\r\n\r\n    /** \r\n     * alias for `dnd_initial_draw`\r\n     */\r\n    public drag_and_drop_initial_draw(){\r\n        this.dnd_initial_draw();\r\n    }\r\n    public dnd_initial_draw() {\r\n        this.dragAndDropHandler?.setViewBox();\r\n        this.dragAndDropHandler?.drawSvg();\r\n    }\r\n    \r\n    private registerEventListener(\r\n        element: EventTarget, \r\n        type: keyof GlobalEventHandlersEventMap, \r\n        callback: EventListenerOrEventListenerObject | null,\r\n        options? : boolean | AddEventListenerOptions,\r\n    ) {\r\n        element.addEventListener(type, callback, options);\r\n        const removeFunction = () => element.removeEventListener(type, callback);\r\n        this.registeredEventListenerRemoveFunctions.push(removeFunction);\r\n    }\r\n    \r\n    public removeRegisteredEventListener() {\r\n        this.registeredEventListenerRemoveFunctions.forEach(f => f());\r\n        this.registeredEventListenerRemoveFunctions = [];\r\n    }\r\n    \r\n\r\n    get_svg_element(metaname: string, force_recreate: boolean = false) : SVGSVGElement {\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        let diagram_svg : SVGSVGElement | undefined = undefined;\r\n        // check if this.diagram_outer_svg has a child with meta=control_svg\r\n        // if not, create one\r\n        let svg_element : SVGSVGElement | undefined = undefined;\r\n\r\n        for (let i in this.diagram_outer_svg.children) {\r\n            let child = this.diagram_outer_svg.children[i];\r\n            if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == metaname) {\r\n                svg_element = child;\r\n            }\r\n        }\r\n\r\n        if (this.single_int_mode && force_recreate && svg_element != undefined) {\r\n            svg_element.remove?.();\r\n            svg_element = undefined;\r\n        }\r\n        if (svg_element == undefined) {\r\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n            svg_element.setAttribute(\"meta\", metaname);\r\n            svg_element.setAttribute(\"width\", \"100%\");\r\n            svg_element.setAttribute(\"height\", \"100%\");\r\n            if (this.isTargetingDocument()) svg_element.style.overflow = \"visible\";\r\n            this.diagram_outer_svg.appendChild(svg_element);\r\n        }\r\n\r\n        return svg_element;\r\n    }\r\n\r\n    get_diagram_svg() : SVGSVGElement {\r\n        let diagram_svg = this.get_svg_element(\"diagram_svg\");\r\n        this.diagram_svg = diagram_svg;\r\n        return diagram_svg;\r\n    }\r\n    \r\n    isTargetingDocument() : boolean {\r\n        return this.event_target == HTML_INT_TARGET.DOCUMENT;\r\n    }\r\n    \r\n    set_focus_padding(padding : number) {\r\n        this.focus_padding = padding;\r\n        if (this.dragAndDropHandler) {\r\n            this.dragAndDropHandler.focus_padding = padding;\r\n        }\r\n        if (this.buttonHandler){\r\n            this.buttonHandler.focus_padding = padding;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a locator\r\n     * Locator is a draggable object that contain 2D coordinate information\r\n     * @param variable_name name of the variable\r\n     * @param value initial value\r\n     * @param radius radius of the locator draggable object\r\n     * @param color color of the locator\r\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\r\n     */\r\n    public locator(\r\n        variable_name : string, value : Vector2, radius : number, color : string = 'blue', \r\n        track_diagram? : Diagram, blink : boolean = true,\r\n        callback?: (locator_name: string, position: Vector2) => any,\r\n    ){\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        this.inp_variables[variable_name] = value;\r\n\r\n        let diagram_svg  = this.get_diagram_svg();\r\n        let control_svg  = this.get_svg_element(control_svg_name.locator, !this.locator_svg);\r\n        this.locator_svg = control_svg;\r\n        // if this is the fist time this function is called, create a locatorHandler\r\n        if (this.locatorHandler == undefined) {\r\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\r\n            this.locatorHandler = locatorHandler;\r\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\r\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => { locatorHandler.drag(evt)});\r\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt)});\r\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => { locatorHandler.drag(evt)});\r\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt)});\r\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt)});\r\n        }\r\n\r\n\r\n        // ============== callback\r\n        const f_callback = (pos : Vector2, redraw : boolean = true) => {\r\n            this.inp_variables[variable_name] = pos;\r\n            if (callback && redraw) callback(variable_name, pos);\r\n            if (redraw) this.draw();\r\n        }\r\n        this.locatorHandler.registerCallback(variable_name, f_callback);\r\n\r\n        // ============== Circle element\r\n\r\n        let locator_svg = this.locatorHandler.create_locator_circle_pointer_svg(variable_name, radius, value, color, blink);\r\n        if(blink){\r\n            // store the circle_outer into the LocatorHandler so that we can turn it off later\r\n            let blinking_outers = locator_svg.getElementsByClassName(\"diagramatics-locator-blink\");\r\n            for (let i = 0; i < blinking_outers.length; i++)\r\n                (this.locatorHandler as LocatorHandler).addBlinkingCircleOuter(blinking_outers[i])\r\n        }\r\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\r\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\r\n        });\r\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\r\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\r\n        });\r\n\r\n        // =============== setter\r\n        let setter;\r\n        if (track_diagram) {\r\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\r\n                throw Error('Track diagram must be a polygon or curve');\r\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\r\n            let track = track_diagram.path.points;\r\n            setter = (pos : Vector2) => {\r\n                let coord = closest_point_from_points(pos, track);\r\n                locator_svg.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`)\r\n                return coord;\r\n            }\r\n        }\r\n        else{\r\n            setter = (pos : Vector2) => {\r\n                locator_svg.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`)\r\n                return pos;\r\n            }\r\n        }\r\n        this.locatorHandler.registerSetter(variable_name, setter);\r\n        this.inp_setter[variable_name] = setter;\r\n\r\n        // set initial position\r\n        let init_pos = setter(value);\r\n        this.locatorHandler.setPos(variable_name, init_pos);\r\n    }\r\n\r\n\r\n    // TODO: in the next breaking changes update,\r\n    // merge this function with locator\r\n    /**\r\n     * Create a locator with custom diagram object\r\n     * @param variable_name name of the variable\r\n     * @param value initial value\r\n     * @param diagram diagram of the locator\r\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\r\n     * @param blink if true, the locator will blink\r\n     * @param callback callback function that will be called when the locator is moved\r\n     * @param callback_rightclick callback function that will be called when the locator is right clicked\r\n     */\r\n    public locator_custom(\r\n        variable_name : string, value : Vector2, diagram : Diagram, \r\n        track_diagram? : Diagram, blink : boolean = true,\r\n        callback?: (locator_name: string, position: Vector2) => any,\r\n        callback_rightclick?: (locator_name: string) => any\r\n    ){\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        this.inp_variables[variable_name] = value;\r\n\r\n        let diagram_svg  = this.get_diagram_svg();\r\n        let control_svg  = this.get_svg_element(control_svg_name.locator, !this.locator_svg);\r\n        this.locator_svg = control_svg;\r\n        // if this is the fist time this function is called, create a locatorHandler\r\n        if (this.locatorHandler == undefined) {\r\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\r\n            this.locatorHandler = locatorHandler;\r\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\r\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => { locatorHandler.drag(evt); })\r\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt); })\r\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => { locatorHandler.drag(evt); })\r\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt); })\r\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt); })\r\n        }\r\n\r\n\r\n        // ============== callback\r\n        const f_callback = (pos : Vector2, redraw : boolean = true) => {\r\n            this.inp_variables[variable_name] = pos;\r\n            // don't call the callback on the initialization;\r\n            if (callback && redraw) callback(variable_name, pos);\r\n            if (redraw) this.draw();\r\n        }\r\n        this.locatorHandler.registerCallback(variable_name, f_callback);\r\n\r\n        // ============== SVG element\r\n\r\n        let locator_svg = this.locatorHandler!.create_locator_diagram_svg(variable_name, diagram, blink);\r\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\r\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\r\n        });\r\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\r\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\r\n        });\r\n        if (callback_rightclick){\r\n          this.registerEventListener(locator_svg, 'contextmenu', (evt) => {\r\n            evt.preventDefault();\r\n            callback_rightclick(variable_name);\r\n          });\r\n        }\r\n\r\n        // =============== setter\r\n        let setter;\r\n        if (track_diagram) {\r\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\r\n                throw Error('Track diagram must be a polygon or curve');\r\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\r\n            let track = track_diagram.path.points;\r\n            setter = (pos : Vector2) => {\r\n                let coord = closest_point_from_points(pos, track);\r\n                locator_svg.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`)\r\n                return coord;\r\n            }\r\n        }\r\n        else{\r\n            setter = (pos : Vector2) => {\r\n                locator_svg.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`)\r\n                return pos;\r\n            }\r\n        }\r\n        this.locatorHandler.registerSetter(variable_name, setter);\r\n        this.inp_setter[variable_name] = setter;\r\n\r\n        // set initial position\r\n        let init_pos = setter(value);\r\n        this.locatorHandler.setPos(variable_name, init_pos);\r\n    }\r\n\r\n    /**\r\n     * Create a slider\r\n     * @param variable_name name of the variable\r\n     * @param min minimum value\r\n     * @param max maximum value\r\n     * @param value initial value\r\n     * @param step step size\r\n     * @param time time of the animation in milliseconds\r\n     * @param display_format_func function to format the display of the value\r\n    */\r\n    public slider(variable_name : string, min : number = 0, max : number = 100, value : number = 50, step : number = -1, \r\n        time : number = 1.5, display_format_func : formatFunction = defaultFormat_f){\r\n        // if the step is -1, then it is automatically calculated\r\n        if (step == -1){ step = (max - min) / 100; }\r\n\r\n        // initialize the variable\r\n        this.inp_variables[variable_name] = value;\r\n\r\n        // =========== label =============\r\n        let labeldiv = document.createElement('div');\r\n        labeldiv.classList.add(\"diagramatics-label\");\r\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\r\n\r\n        // =========== slider ===========\r\n\r\n        // create the callback function\r\n        const callback = (val : number, redraw : boolean = true) => {\r\n            this.inp_variables[variable_name] = val;\r\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\r\n            if (redraw) this.draw();\r\n        }\r\n        let slider = create_slider(callback, min, max, value, step);\r\n\r\n        // ================ setter\r\n        const setter = (val : number) => {\r\n            slider.value = val.toString();\r\n            callback(val, false);\r\n        }\r\n\r\n        this.inp_setter[variable_name] = setter;\r\n\r\n        // =========== playbutton ========\r\n        let nstep = (max - min) / step;\r\n        const interval_time = 1000 * time / nstep;\r\n\r\n        let playbutton = document.createElement('button');\r\n        let symboldiv  = document.createElement('div');\r\n        symboldiv.classList.add(\"diagramatics-slider-playbutton-symbol\");\r\n        playbutton.appendChild(symboldiv);\r\n        playbutton.classList.add(\"diagramatics-slider-playbutton\");\r\n        playbutton.onclick = () => {\r\n            if (this.intervals[variable_name] == undefined){\r\n                // if is not playing\r\n                playbutton.classList.add(\"paused\");\r\n                this.intervals[variable_name] = setInterval(() => {\r\n                    let val = parseFloat(slider.value);\r\n                    val += step;\r\n                    // wrap around\r\n                    val = ((val - min) % (max - min)) + min;\r\n                    \r\n                    slider.value = val.toString();\r\n                    callback(val);\r\n                }, interval_time);\r\n            } else {\r\n                // if is playing\r\n                playbutton.classList.remove(\"paused\");\r\n                clearInterval(this.intervals[variable_name]);\r\n                this.intervals[variable_name] = undefined;\r\n            }\r\n        }\r\n\r\n        // ==============================\r\n        // add components to div\r\n        //\r\n        // <div class=\"diagramatics-slider-leftcontainer\">\r\n        //     <br>\r\n        //     <button class=\"diagramatics-slider-playbutton\"></button>\r\n        // </div>\r\n        // <div class=\"diagramatics-slider-rightcontainer\">\r\n        //     <div class=\"diagramatics-label\"></div>\r\n        //     <input type=\"range\"class=\"diagramatics-slider\">\r\n        // </div>\r\n        //\r\n        let leftcontainer = document.createElement('div');\r\n        leftcontainer.classList.add(\"diagramatics-slider-leftcontainer\");\r\n        leftcontainer.appendChild(document.createElement('br'));\r\n        leftcontainer.appendChild(playbutton);\r\n\r\n        let rightcontainer = document.createElement('div');\r\n        rightcontainer.classList.add(\"diagramatics-slider-rightcontainer\");\r\n        rightcontainer.appendChild(labeldiv);\r\n        rightcontainer.appendChild(slider);\r\n\r\n        let container = document.createElement('div');\r\n        container.classList.add(\"diagramatics-slider-container\");\r\n        container.appendChild(leftcontainer);\r\n        container.appendChild(rightcontainer);\r\n\r\n        this.control_container_div.appendChild(container);\r\n    }\r\n\r\n    private init_drag_and_drop() {\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        let diagram_svg = this.get_diagram_svg();\r\n        let dnd_svg     = this.get_svg_element(control_svg_name.dnd, !this.dnd_svg);\r\n        this.dnd_svg    = dnd_svg;\r\n\r\n        // if this is the fist time this function is called, create a dragAndDropHandler\r\n        if (this.dragAndDropHandler == undefined) {\r\n            let dragAndDropHandler = new DragAndDropHandler(dnd_svg, diagram_svg);\r\n            dragAndDropHandler.focus_padding = this.focus_padding;\r\n            this.dragAndDropHandler = dragAndDropHandler;\r\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\r\n            // this.registerEventListener(this.diagram_outer_svg, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\r\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\r\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => {dragAndDropHandler.endDrag(evt);});\r\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => {dragAndDropHandler.drag(evt);});\r\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => {dragAndDropHandler.endDrag(evt);});\r\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => {dragAndDropHandler.endDrag(evt);});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a drag and drop container\r\n     * @param name name of the container\r\n     * @param diagram diagram of the container\r\n     * @param capacity capacity of the container (default is 1)\r\n     * @param config configuration of the container positioning\r\n     * the configuration is an object with the following format:\r\n     * `{type:\"horizontal-uniform\"}`, `{type:\"vertical-uniform\"}`, `{type:\"grid\", value:[number, number]}`\r\n     * `{type:\"horizontal\", padding:number}`, `{type:\"vertical\", padding:number}`\r\n     * `{type:\"flex-row\", padding:number, vertical_alignment:VerticalAlignment, horizontal_alignment:HorizontalAlignment}`\r\n     *\r\n     * you can also add custom region box for the target by adding `custom_region_box: [Vector2, Vector2]` in the config\r\n     *\r\n     * you can also add a sorting function for the target by adding `sorting_function: (a: string, b: string) => number`\r\n    */\r\n    public dnd_container(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_config) {\r\n        this.init_drag_and_drop();\r\n        this.dragAndDropHandler?.add_container(name, diagram, capacity, config);\r\n    }\r\n\r\n    // TODO: in the next breaking changes update,\r\n    // merge this function with dnd_draggable_to_container\r\n    /**\r\n     * Create a drag and drop draggable that is positioned into an existing container\r\n     * @param name name of the draggable\r\n     * @param diagram diagram of the draggable\r\n     * @param container_name name of the container\r\n     * @param callback callback function (called after the draggable is moved)\r\n     * @param onclickstart_callback callback function (called at the start of the drag)\r\n     */\r\n    public dnd_draggable_to_container(\r\n        name : string, diagram : Diagram, container_name : string, \r\n        callback? : (name:string, container:string) => any,\r\n        onclickstart_callback? : () => any\r\n    ) {\r\n        this.init_drag_and_drop();\r\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\r\n\r\n        this.inp_variables[name] = diagram.origin;\r\n        this.dragAndDropHandler.add_draggable_to_container(name, diagram, container_name);\r\n\r\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\r\n            this.inp_variables[name] = pos;\r\n            if (callback) callback(name, container_name);\r\n            if (redraw) this.draw();\r\n        }\r\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\r\n        if (onclickstart_callback) this.dragAndDropHandler.register_clickstart_callback(name, onclickstart_callback);\r\n    }\r\n    \r\n    /**\r\n     * Create a drag and drop draggable\r\n     * @param name name of the draggable\r\n     * @param diagram diagram of the draggable\r\n     * @param container_diagram diagram of the container, if not provided, a container will be created automatically\r\n     * @param callback callback function (called after the draggable is moved)\r\n     * @param onclickstart_callback callback function (called at the start of the drag)\r\n    */\r\n    public dnd_draggable(\r\n        name : string, diagram : Diagram, container_diagram? : Diagram, \r\n        callback? : (name:string, pos:Vector2) => any,\r\n        onclickstart_callback? : () => any\r\n    ) {\r\n        this.init_drag_and_drop();\r\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\r\n\r\n        this.inp_variables[name] = diagram.origin;\r\n        this.dragAndDropHandler.add_draggable_with_container(name, diagram, container_diagram);\r\n\r\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\r\n            this.inp_variables[name] = pos;\r\n            if (callback) callback(name, pos);\r\n            if (redraw) this.draw();\r\n        }\r\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\r\n        if (onclickstart_callback) this.dragAndDropHandler.register_clickstart_callback(name, onclickstart_callback);\r\n    }\r\n\r\n    /**\r\n     * Register a callback function when a draggable is dropped outside of a container\r\n     * @param callback callback function\r\n     */\r\n    public dnd_register_drop_outside_callback(callback : (name : string) => any) {\r\n        this.init_drag_and_drop();\r\n        this.dragAndDropHandler?.register_dropped_outside_callback(callback);\r\n    }\r\n    \r\n    /**\r\n     * Register a validation function when a draggable is moved to a container\r\n     * If the function return false, the draggable will not be moved\r\n     * @param fun validation function\r\n    */\r\n    public dnd_register_move_validation_function(fun: (draggable_name: string, target_name: string) => boolean) {\r\n        this.init_drag_and_drop();\r\n        this.dragAndDropHandler?.register_move_validation_function(fun);\r\n    }\r\n\r\n    /**\r\n     * Move a draggable to a container\r\n     * @param name name of the draggable\r\n     * @param container_name name of the container\r\n     */\r\n    public dnd_move_to_container(name : string, container_name : string) {\r\n        this.dragAndDropHandler?.try_move_draggable_to_container(name, container_name);\r\n    }\r\n\r\n    /**\r\n     * Get the data of the drag and drop objects with the format:\r\n     * `{container:string, content:string[]}[]`\r\n    */\r\n    public get_dnd_data() : DragAndDropData {\r\n        return this.dragAndDropHandler?.getData() ?? [];\r\n    }\r\n\r\n    /**\r\n     * Set the data of the drag and drop objects with the format:\r\n     * `{container:string, content:string[]}[]`\r\n     */\r\n    public set_dnd_data(data : DragAndDropData) : void {\r\n        this.dragAndDropHandler?.setData(data);\r\n    }\r\n    \r\n    /**\r\n    * reorder the tabindex of the containers\r\n    * @param container_names \r\n    */\r\n    public dnd_reorder_tabindex(container_names: string[]){\r\n        this.dragAndDropHandler?.reorder_svg_container_tabindex(container_names);\r\n    }\r\n    \r\n    /**\r\n    * Get the content size of a container\r\n    */\r\n    public  get_dnd_container_content_size(container_name : string) : [number,number] {\r\n       if (!this.dragAndDropHandler) return [NaN,NaN];\r\n       return this.dragAndDropHandler.get_container_content_size(container_name);\r\n    }\r\n    \r\n    /**\r\n     * Set whether the content of the container should be sorted or not\r\n     */\r\n    public set_dnd_content_sort(sort_content : boolean) : void {\r\n        if (!this.dragAndDropHandler) return;\r\n        this.dragAndDropHandler.sort_content = sort_content;\r\n    }\r\n    \r\n    public remove_dnd_draggable(name : string) {\r\n        this.dragAndDropHandler?.remove_draggable(name);\r\n    }\r\n    public remove_locator(name: string) {\r\n        this.locatorHandler?.remove(name);\r\n    }\r\n    public remove_button(name: string) {\r\n        this.buttonHandler?.remove(name);\r\n    }\r\n\r\n    /**\r\n     * @deprecated (use `Interactive.custom_object_g()` instead)\r\n     * This method will be removed in the next major release\r\n     *\r\n     * Create a custom interactive object\r\n     * @param id id of the object\r\n     * @param classlist list of classes of the object\r\n     * @param diagram diagram of the object\r\n     * @returns the svg element of the object\r\n     */\r\n    public custom_object(id : string, classlist: string[], diagram : Diagram) : SVGSVGElement {\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        let diagram_svg = this.get_diagram_svg();\r\n        let control_svg = this.get_svg_element(control_svg_name.custom, !this.custom_svg);\r\n\r\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        f_draw_to_svg(svg, svg, diagram, true, false, calculate_text_scale(diagram_svg));\r\n        svg.setAttribute(\"overflow\", \"visible\");\r\n        svg.setAttribute(\"class\", classlist.join(\" \"));\r\n        svg.setAttribute(\"id\",id);\r\n        \r\n        control_svg.setAttribute(\"viewBox\", diagram_svg.getAttribute(\"viewBox\") as string);\r\n        control_svg.setAttribute(\"preserveAspectRatio\", diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\r\n        control_svg.style.overflow = \"visible\";\r\n\r\n        control_svg.appendChild(svg);\r\n        this.custom_svg = control_svg;\r\n        return svg;\r\n    }\r\n    \r\n    /**\r\n     * Create a custom interactive object\r\n     * @param id id of the object\r\n     * @param classlist list of classes of the object\r\n     * @param diagram diagram of the object\r\n     * @returns the <g> svg element of the object\r\n     */\r\n    public custom_object_g(id : string, classlist: string[], diagram : Diagram) : SVGGElement {\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        let diagram_svg = this.get_diagram_svg();\r\n        let control_svg = this.get_svg_element(control_svg_name.custom, !this.custom_svg);\r\n\r\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(control_svg, g, diagram, true, false, calculate_text_scale(diagram_svg));\r\n        g.setAttribute(\"overflow\", \"visible\");\r\n        g.setAttribute(\"class\", classlist.join(\" \"));\r\n        g.setAttribute(\"id\",id);\r\n        \r\n        control_svg.setAttribute(\"viewBox\", diagram_svg.getAttribute(\"viewBox\") as string);\r\n        control_svg.setAttribute(\"preserveAspectRatio\", diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\r\n        control_svg.style.overflow = \"visible\";\r\n\r\n        control_svg.appendChild(g);\r\n        this.custom_svg = control_svg;\r\n        return g;\r\n    }\r\n\r\n    private init_button() {\r\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\r\n        let diagram_svg = this.get_diagram_svg();\r\n        let button_svg  = this.get_svg_element(control_svg_name.button, !this.button_svg);\r\n        this.button_svg = button_svg;\r\n\r\n        // if this is the fist time this function is called, create a dragAndDropHandler\r\n        if (this.buttonHandler == undefined) {\r\n            let buttonHandler = new ButtonHandler(button_svg, diagram_svg);\r\n            buttonHandler.focus_padding = this.focus_padding;\r\n            this.buttonHandler = buttonHandler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a toggle button\r\n     * @param name name of the button\r\n     * @param diagram_on diagram of the button when it is on\r\n     * @param diagram_off diagram of the button when it is off\r\n     * @param state initial state of the button\r\n     * @param callback callback function when the button state is changed\r\n    */\r\n    public button_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean = false,\r\n        callback? : (name : string, state : boolean) => any\r\n    ){\r\n        this.init_button();\r\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\r\n\r\n        this.inp_variables[name] = state;\r\n\r\n        let main_callback;\r\n        if (callback){\r\n            main_callback = (state : boolean, redraw : boolean = true) => { \r\n                this.inp_variables[name] = state \r\n                callback(name, state);\r\n                if (redraw) this.draw();\r\n            }\r\n        } else {\r\n            main_callback = (state : boolean, redraw : boolean = true) => { \r\n                this.inp_variables[name] = state \r\n                if (redraw) this.draw();\r\n            }\r\n\r\n        }\r\n\r\n        let setter = this.buttonHandler.try_add_toggle(name, diagram_on, diagram_off, state, main_callback);\r\n        this.inp_setter[name] = setter;\r\n    }\r\n\r\n    /**\r\n     * Create a click button\r\n     * @param name name of the button\r\n     * @param diagram diagram of the button\r\n     * @param diagram_pressed diagram of the button when it is pressed\r\n     * @param callback callback function when the button is clicked\r\n    */\r\n    public button_click(name : string, diagram : Diagram, diagram_pressed : Diagram, callback : () => any){\r\n        this.init_button();\r\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\r\n\r\n        let n_callback = () => { callback(); this.draw(); }\r\n        this.buttonHandler.try_add_click(name, diagram, diagram_pressed, diagram, n_callback);\r\n    }\r\n    \r\n    /**\r\n     * Create a click button\r\n     * @param name name of the button\r\n     * @param diagram diagram of the button\r\n     * @param diagram_pressed diagram of the button when it is pressed\r\n     * @param diagram_hover diagram of the button when it is hovered\r\n     * @param callback callback function when the button is clicked\r\n    */\r\n    public button_click_hover(name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram, callback : () => any){\r\n        this.init_button();\r\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\r\n\r\n        let n_callback = () => { callback(); this.draw(); }\r\n        this.buttonHandler.try_add_click(name, diagram, diagram_pressed, diagram_hover, n_callback);\r\n    }\r\n}\r\n\r\n// ========== functions\r\n//\r\n\r\nfunction set_viewbox(taget : SVGSVGElement | undefined, source : SVGSVGElement | undefined) {\r\n    if (taget == undefined) return;\r\n    if (source == undefined) return;\r\n    taget.setAttribute(\"viewBox\", source.getAttribute(\"viewBox\") as string);\r\n    taget.setAttribute(\"preserveAspectRatio\", source.getAttribute(\"preserveAspectRatio\") as string);\r\n}\r\n\r\n\r\nfunction create_slider(callback : (val : number) => any, min : number = 0, max : number = 100, value : number = 50, step : number) : HTMLInputElement {\r\n    // create a slider\r\n    let slider = document.createElement(\"input\");\r\n    slider.type = \"range\";\r\n    slider.min = min.toString();\r\n    slider.max = max.toString();\r\n    slider.value = value.toString();\r\n    slider.step = step.toString();\r\n    slider.oninput = () => {\r\n        let val = slider.value;\r\n        callback(parseFloat(val));\r\n    }\r\n    // add class to slider\r\n    slider.classList.add(\"diagramatics-slider\");\r\n    return slider;\r\n}\r\n\r\n// function create_locator() : SVGCircleElement {\r\n// }\r\n//\r\nfunction closest_point_from_points(p : Vector2, points : Vector2[]) : Vector2 {\r\n    if (points.length == 0) return p;\r\n    let closest_d2 = Infinity;\r\n    let closest_p = points[0];\r\n    for (let i = 0; i < points.length; i++) {\r\n        let d2 = points[i].sub(p).length_sq();\r\n        if (d2 < closest_d2) {\r\n            closest_d2 = d2;\r\n            closest_p = points[i];\r\n        }\r\n    }\r\n    return closest_p;\r\n}\r\n\r\n// helper to calculate CTM in firefox\r\n// there's a well known bug in firefox about `getScreenCTM()`\r\nfunction firefox_calcCTM(svgelem : SVGSVGElement) : DOMMatrix {\r\n    let ctm = svgelem.getScreenCTM() as DOMMatrix;\r\n    // get screen width and height of the element\r\n    let screenWidth  = svgelem.width.baseVal.value;\r\n    let screenHeight = svgelem.height.baseVal.value;\r\n    let viewBox      = svgelem.viewBox.baseVal;\r\n    let scalex       = screenWidth/viewBox.width;\r\n    let scaley       = screenHeight/viewBox.height;\r\n    let scale        = Math.min(scalex, scaley);\r\n\r\n    // let translateX = (screenWidth/2  + ctm.e) - (viewBox.width/2  + viewBox.x) * scale;\r\n    // let translateY = (screenHeight/2 + ctm.f) - (viewBox.height/2 + viewBox.y) * scale;\r\n    let translateX = (screenWidth/2 ) - (viewBox.width/2  + viewBox.x) * scale;\r\n    let translateY = (screenHeight/2) - (viewBox.height/2 + viewBox.y) * scale;\r\n    return DOMMatrix.fromMatrix(ctm).translate(translateX, translateY).scale(scale);\r\n}\r\n\r\ntype LocatorEvent = TouchEvent | Touch | MouseEvent\r\ntype DnDEvent = TouchEvent | Touch | MouseEvent\r\n\r\n/**\r\n * Convert client position to SVG position\r\n * @param clientPos the client position\r\n * @param svgelem the svg element\r\n */\r\nexport function clientPos_to_svgPos(clientPos : {x : number, y : number}, svgelem : SVGSVGElement) : \r\n{x : number, y : number} {\r\n    // var CTM = this.control_svg.getScreenCTM() as DOMMatrix;\r\n    // NOTE: there's a well known bug in firefox about `getScreenCTM()`\r\n    // check if the browser is firefox\r\n    let CTM : DOMMatrix;\r\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\r\n        CTM = firefox_calcCTM(svgelem);\r\n    } else {\r\n        CTM = svgelem.getScreenCTM() as DOMMatrix;\r\n    }\r\n    // console.log(CTM);\r\n    \r\n    return {\r\n        x : (clientPos.x - CTM.e) / CTM.a,\r\n        y : - (clientPos.y - CTM.f) / CTM.d\r\n    }\r\n}\r\n\r\nfunction getMousePosition(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\r\n    // firefox doesn't support `TouchEvent`, we need to check for it\r\n    if (window.TouchEvent && evt instanceof TouchEvent) { evt = evt.touches[0]; }\r\n    let clientPos = {\r\n        x : (evt as Touch | MouseEvent).clientX,\r\n        y : (evt as Touch | MouseEvent).clientY\r\n    }\r\n    return clientPos_to_svgPos(clientPos, svgelem);\r\n}\r\n\r\n/**\r\n * Get the SVG coordinate from the event (MouseEvent or TouchEvent)\r\n * @param evt the event\r\n * @param svgelem the svg element\r\n * @returns the SVG coordinate\r\n */\r\nexport function get_SVGPos_from_event(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\r\n    return getMousePosition(evt, svgelem);\r\n}\r\n\r\nclass LocatorHandler {\r\n\r\n    selectedElement  : SVGElement | null = null;\r\n    selectedVariable : string | null = null;\r\n    mouseOffset : Vector2 = V2(0,0);\r\n    callbacks : {[key : string] : (pos : Vector2, redraw?: boolean) => any} = {};\r\n    setter    : {[key : string] : (pos : Vector2) => any} = {};\r\n    // store blinking circle_outer so that we can turn it off\r\n    svg_elements: {[key : string] : SVGElement} = {};\r\n    blinking_circle_outers : Element[] = [];\r\n    first_touch_callback : Function | null = null;\r\n    element_pos : {[key : string] : Vector2} = {};\r\n\r\n    constructor(public control_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\r\n    }\r\n\r\n    startDrag(evt : LocatorEvent, variable_name : string, selectedElement : SVGElement) {\r\n        this.selectedElement  = selectedElement;\r\n        this.selectedVariable = variable_name;\r\n        \r\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\r\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\r\n        let coord = getMousePosition(evt, this.control_svg);\r\n        let mousepos = V2(coord.x, coord.y);\r\n        let elementpos = this.element_pos[variable_name];\r\n        if (elementpos){\r\n            this.mouseOffset = elementpos.sub(mousepos);\r\n        }\r\n        \r\n        this.handleBlinking();\r\n    }\r\n    drag(evt : LocatorEvent) {\r\n        if (this.selectedElement == undefined) return;\r\n        if (this.selectedVariable == undefined) return;\r\n\r\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\r\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\r\n\r\n        let coord = getMousePosition(evt, this.control_svg);\r\n\r\n        let pos = V2(coord.x, coord.y).add(this.mouseOffset);\r\n        this.element_pos[this.selectedVariable] = pos;\r\n        // check if setter for this.selectedVariable exists\r\n        // if it does, call it\r\n        if (this.setter[this.selectedVariable] != undefined) {\r\n            pos = this.setter[this.selectedVariable](pos);\r\n        }\r\n\r\n        // check if callback for this.selectedVariable exists\r\n        // if it does, call it\r\n        if (this.selectedVariable == null) return;\r\n        if (this.callbacks[this.selectedVariable] != undefined) {\r\n            this.callbacks[this.selectedVariable](pos);\r\n        }\r\n        this.setViewBox();\r\n\r\n    }\r\n    setViewBox() {\r\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\r\n        this.control_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\r\n        this.control_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\r\n    }\r\n    endDrag(_ : LocatorEvent) {\r\n        this.selectedElement = null;\r\n        this.selectedVariable = null;\r\n    }\r\n    \r\n    public remove(variable_name : string) : void {\r\n        if (this.selectedVariable == variable_name){\r\n            this.selectedElement = null;\r\n            this.selectedVariable = null;\r\n        }\r\n        delete this.callbacks[variable_name];\r\n        delete this.setter[variable_name];\r\n        this.svg_elements[variable_name]?.remove();\r\n        delete this.svg_elements[variable_name];\r\n        delete this.element_pos[variable_name];\r\n    }\r\n\r\n    setPos(name : string, pos : Vector2){\r\n        this.element_pos[name] = pos;\r\n        this.callbacks[name](pos, false);\r\n    }\r\n    registerCallback(name : string, callback : (pos : Vector2) => any){\r\n        this.callbacks[name] = callback;\r\n    }\r\n    registerSetter(name : string, setter : (pos : Vector2) => any){\r\n        this.setter[name] = setter;\r\n    }\r\n    addBlinkingCircleOuter(circle_outer : Element){\r\n        this.blinking_circle_outers.push(circle_outer);\r\n    }\r\n    handleBlinking(){\r\n        // turn off all blinking_circle_outers after the first touch\r\n        if (this.blinking_circle_outers.length == 0) return;\r\n        for (let i = 0; i < this.blinking_circle_outers.length; i++) {\r\n            this.blinking_circle_outers[i].classList.remove(\"diagramatics-locator-blink\");\r\n        }\r\n        this.blinking_circle_outers = [];\r\n        if (this.first_touch_callback != null) this.first_touch_callback();\r\n    }\r\n\r\n    create_locator_diagram_svg(name: string, diagram : Diagram, blink : boolean) : SVGGElement {\r\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.control_svg, g, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg));\r\n        g.style.cursor = \"pointer\";\r\n        g.setAttribute(\"overflow\", \"visible\");\r\n        if (blink) {\r\n            g.classList.add(\"diagramatics-locator-blink\");\r\n            this.addBlinkingCircleOuter(g);\r\n        }\r\n        \r\n        if (this.svg_elements[name]){\r\n            this.svg_elements[name].replaceWith(g);\r\n        } else {\r\n            this.control_svg.appendChild(g);\r\n        }\r\n        \r\n        \r\n        this.svg_elements[name] = g;\r\n        this.element_pos[name]\r\n        return g;\r\n    }\r\n\r\n    create_locator_circle_pointer_svg(name: string, radius : number, value : Vector2, color : string, blink : boolean) : SVGGElement {\r\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        // set svg overflow to visible\r\n        g.setAttribute(\"overflow\", \"visible\");\r\n        // set cursor to be pointer when hovering\r\n        g.style.cursor = \"pointer\";\r\n\r\n        let circle_outer = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n        let circle_inner = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n\r\n        let inner_radius    = radius * 0.4;\r\n\r\n        circle_outer.setAttribute(\"r\", radius.toString());\r\n        circle_outer.setAttribute(\"fill\", get_color(color, tab_color));\r\n        circle_outer.setAttribute(\"fill-opacity\", \"0.3137\");\r\n        circle_outer.setAttribute(\"stroke\", \"none\");\r\n        circle_outer.classList.add(\"diagramatics-locator-outer\");\r\n        if (blink) circle_outer.classList.add(\"diagramatics-locator-blink\");\r\n\r\n        circle_inner.setAttribute(\"r\", inner_radius.toString());\r\n        circle_inner.setAttribute(\"fill\", get_color(color, tab_color));\r\n        circle_inner.setAttribute(\"stroke\", \"none\");\r\n        circle_inner.classList.add(\"diagramatics-locator-inner\");\r\n\r\n        g.appendChild(circle_outer);\r\n        g.appendChild(circle_inner);\r\n        g.setAttribute(\"transform\", `translate(${value.x},${-value.y})`)\r\n        if (this.svg_elements[name]){\r\n            this.svg_elements[name].replaceWith(g);\r\n        } else {\r\n            this.control_svg.appendChild(g);\r\n        }\r\n        \r\n        this.svg_elements[name] = g;\r\n        return g;\r\n    }\r\n\r\n}\r\n\r\ntype DragAndDropContainerData = {\r\n    name : string,\r\n    position : Vector2,\r\n    svgelement? : SVGElement,\r\n    diagram : Diagram,\r\n    content : string[],\r\n    capacity : number,\r\n    config : dnd_container_config,\r\n}\r\ntype DragAndDropDraggableData = {\r\n    name : string,\r\n    position : Vector2,\r\n    svgelement? : SVGElement,\r\n    diagram : Diagram,\r\n    diagram_size : [number, number],\r\n    container : string,\r\n}\r\ntype DragAndDropData = {container:string, content:string[]}[]\r\n\r\nenum dnd_type {\r\n    container = \"diagramatics-dnd-container\",\r\n    draggable = \"diagramatics-dnd-draggable\",\r\n    ghost     = \"diagramatics-dnd-draggable-ghost\",\r\n}\r\n\r\n//TODO: add more\r\ntype dnd_container_positioning_type =\r\n    {type:\"horizontal-uniform\"} |\r\n    {type:\"vertical-uniform\"} |\r\n    {type:\"horizontal\", padding:number} |\r\n    {type:\"vertical\", padding:number} |\r\n    {type:\"flex-row\", padding:number, vertical_alignment?:VerticalAlignment, horizontal_alignment?:HorizontalAlignment} |\r\n    {type:\"grid\", value:[number, number]}\r\ntype dnd_container_config = dnd_container_positioning_type & {\r\n    custom_region_box?: [Vector2, Vector2]\r\n    sorting_function?: (a : string, b : string) => number\r\n}\r\n\r\nclass DragAndDropHandler {\r\n    containers : {[key : string] : DragAndDropContainerData} = {};\r\n    draggables : {[key : string] : DragAndDropDraggableData} = {};\r\n    callbacks : {[key : string] : (pos : Vector2) => any} = {};\r\n    onclickstart_callback : {[key : string] : () => any} = {};\r\n    hoveredContainerName : string | null = null;\r\n    draggedElementName : string | null = null;\r\n    draggedElementGhost : SVGElement | null = null;\r\n    dropped_outside_callback : ((name : string) => any) | null = null;\r\n    move_validation_function : ((draggable_name: string, target_name: string) => boolean) | null = null;\r\n    sort_content : boolean = false;\r\n    dom_to_id_map : WeakMap<HTMLElement|SVGElement, string>;\r\n    active_draggable_name: string | null = null; // active from tap/enter\r\n    focus_padding : number = 1;\r\n\r\n    constructor(public dnd_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\r\n        this.dom_to_id_map = new WeakMap();\r\n    }\r\n\r\n    public add_container(\r\n        name : string, diagram : Diagram, \r\n        capacity? : number , config? : dnd_container_config,\r\n    ) {\r\n        if (this.containers[name] != undefined) {\r\n            this.replace_container_svg(name, diagram, capacity, config);\r\n            return;\r\n        }\r\n\r\n        this.containers[name] = {\r\n            name, diagram, \r\n            position : diagram.origin, \r\n            content : [], \r\n            config : config ?? {type:\"horizontal-uniform\"},\r\n            capacity : capacity ?? 1\r\n        };\r\n    }\r\n\r\n    generate_position_map(bbox : BBox, config : dnd_container_config, capacity : number, content : string[]) \r\n    : Vector2[] {\r\n        const p_center = bbox[0].add(bbox[1]).scale(0.5);\r\n        switch (config.type){\r\n            case \"horizontal-uniform\": {\r\n                let width = bbox[1].x - bbox[0].x;\r\n                let dx = width / capacity;\r\n                let x0 = bbox[0].x + dx / 2;\r\n                let y  = p_center.y;\r\n                return range(0, capacity).map(i => V2(x0 + dx*i, y));\r\n            }\r\n            case \"vertical-uniform\": {\r\n                //NOTE: top to bottom\r\n                let height = bbox[1].y - bbox[0].y;\r\n                let dy = height / capacity;\r\n                let x  = p_center.x;\r\n                let y0 = bbox[1].y - dy / 2;\r\n                return range(0, capacity).map(i => V2(x, y0 - dy*i));\r\n            }\r\n            case \"grid\" : {\r\n                let [nx,ny] = config.value;\r\n                let height = bbox[1].y - bbox[0].y;\r\n                let width  = bbox[1].x - bbox[0].x;\r\n                let dx = width / nx;\r\n                let dy = height / ny;\r\n                let x0 = bbox[0].x + dx / 2;\r\n                let y0 = bbox[1].y - dy / 2;\r\n                return range(0, capacity).map(i => {\r\n                    let x = x0 + dx * (i % nx);\r\n                    let y = y0 - dy * Math.floor(i / nx);\r\n                    return V2(x, y);\r\n                });\r\n            }\r\n            case \"vertical\" : {\r\n                const p_top_center = V2(p_center.x, bbox[1].y);\r\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\r\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\r\n                const distributed = distribute_vertical_and_align(size_rects, config.padding).mut()\r\n                    .move_origin('top-center').position(p_top_center)\r\n                    .translate(V2(0,-config.padding));\r\n                return distributed.children.map(d => d.origin);\r\n            }\r\n            case \"horizontal\" : {\r\n                const p_center_left = V2(bbox[0].x, p_center.y);\r\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\r\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\r\n                const distributed = distribute_horizontal_and_align(size_rects, config.padding).mut()\r\n                    .move_origin('center-left').position(p_center_left)\r\n                    .translate(V2(config.padding,0));\r\n                return distributed.children.map(d => d.origin);\r\n            }\r\n            case \"flex-row\" : {\r\n                const pad = config.padding ?? 0;\r\n                const container_width = bbox[1].x - bbox[0].x - 2*pad;\r\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\r\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\r\n                let distributed = distribute_variable_row(\r\n                    size_rects, container_width, pad, pad,\r\n                    config.vertical_alignment, config.horizontal_alignment\r\n                ).mut()\r\n                switch (config.horizontal_alignment){\r\n                    case 'center' :{\r\n                        distributed = distributed\r\n                            .move_origin('top-center').position(V2(p_center.x, bbox[1].y-pad));\r\n                    } break;\r\n                    case 'right' : {\r\n                        distributed = distributed\r\n                            .move_origin('top-right').position(V2(bbox[1].x-pad, bbox[1].y-pad));\r\n                    } break;\r\n                    case 'center':\r\n                    default: {\r\n                        distributed = distributed\r\n                            .move_origin('top-left').position(V2(bbox[0].x+pad, bbox[1].y-pad));\r\n                    }\r\n                }\r\n                return distributed.children.map(d => d.origin);\r\n            }\r\n            default : {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n    \r\n    get_container_content_size(container_name : string) : [number,number] {\r\n        const container = this.containers[container_name];\r\n        if (container == undefined) return [NaN, NaN];\r\n        const pad = (container.config as any).padding ?? 0;\r\n        const content_diagrams = container.content.map(name => this.draggables[name]?.diagram ?? empty());\r\n        const [width, height] = size(diagram_combine(...content_diagrams));\r\n        return [width + 2*pad, height + 2*pad];\r\n    }\r\n    \r\n    private replace_draggable_svg(name : string, diagram : Diagram) {\r\n        let draggable = this.draggables[name];\r\n        if (draggable == undefined) return;\r\n        let outer_g = draggable.svgelement?.parentNode as SVGGElement;\r\n        if (outer_g == undefined) return;\r\n        draggable.svgelement?.remove();\r\n        draggable.diagram = diagram;\r\n        draggable.diagram_size = size(diagram);\r\n        this.add_draggable_svg(name, diagram, outer_g);\r\n        this.reposition_container_content(draggable.container)\r\n    }\r\n    private replace_container_svg(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_config) {\r\n        let container = this.containers[name];\r\n        if (container == undefined) return;\r\n        const outer_g = this.get_container_outer_g(name);\r\n        if (outer_g == undefined) return;\r\n        container.svgelement?.remove();\r\n        container.diagram = diagram;\r\n        if (capacity) container.capacity = capacity;\r\n        if (config) container.config = config;\r\n        this.add_container_svg(name, diagram, outer_g);\r\n        this.reposition_container_content(name);\r\n    }\r\n\r\n    public add_draggable_to_container(name : string, diagram : Diagram, container_name : string) {\r\n        if (this.draggables[name] != undefined) {\r\n            this.replace_draggable_svg(name, diagram);\r\n            this.move_draggable_to_container(name, container_name, true);\r\n            return;\r\n        }\r\n\r\n        const diagram_size = size(diagram);\r\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : container_name};\r\n        this.containers[container_name].content.push(name);\r\n    }\r\n\r\n    public add_draggable_with_container(name : string, diagram : Diagram, container_diagram? : Diagram) {\r\n        if (this.draggables[name] != undefined) {\r\n            this.replace_draggable_svg(name, diagram);\r\n            return;\r\n        }\r\n        // add a container as initial container for the draggable\r\n        let initial_container_name = `_container0_${name}`;\r\n\r\n        if (container_diagram == undefined)\r\n            container_diagram = this.diagram_container_from_draggable(diagram);\r\n        this.add_container(initial_container_name, container_diagram);\r\n\r\n        const diagram_size = size(diagram);\r\n        this.containers[initial_container_name].content.push(name);\r\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : initial_container_name};\r\n    }\r\n    \r\n    public remove_draggable(name : string) : void {\r\n        for (let container_name in this.containers) {\r\n            const container = this.containers[container_name];\r\n            container.content = container.content.filter(e => e != name);\r\n        }\r\n        this.draggables[name].svgelement?.remove();\r\n        delete this.draggables[name];\r\n    }\r\n\r\n    registerCallback(name : string, callback : (pos : Vector2) => any){\r\n        this.callbacks[name] = callback;\r\n    }\r\n    register_clickstart_callback(name : string, callback : () => any){\r\n        this.onclickstart_callback[name] = callback;\r\n    }\r\n\r\n    register_dropped_outside_callback(callback : (name : string) => any){\r\n        this.dropped_outside_callback = callback;\r\n    }\r\n    \r\n    register_move_validation_function(fun: (draggable_name: string, target_name: string) => boolean){\r\n        this.move_validation_function = fun;\r\n    }\r\n\r\n    setViewBox() {\r\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\r\n        this.dnd_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\r\n        this.dnd_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\r\n    }\r\n    public drawSvg(){\r\n        for (let container_name in this.containers){\r\n            const container_data = this.containers[container_name];\r\n            if (container_data?.svgelement == undefined) {\r\n                const outer_g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n                this.dnd_svg.append(outer_g);\r\n                this.add_container_svg(container_name, container_data.diagram, outer_g);\r\n            }\r\n            \r\n            const outer_g = this.get_container_outer_g(container_name)\r\n            if (outer_g == undefined) continue;\r\n            \r\n            for (let draggable_name of container_data.content){\r\n                const draggable_data = this.draggables[draggable_name];\r\n                if (draggable_data?.svgelement) continue;\r\n                this.add_draggable_svg(draggable_name, draggable_data.diagram, outer_g)\r\n            }\r\n        }\r\n        for (let name in this.containers) {\r\n            this.reposition_container_content(name);\r\n            this.reconfigure_container_tabindex(name);\r\n        }\r\n    }\r\n\r\n    getData() : DragAndDropData {\r\n        let data : DragAndDropData = []\r\n        for (let name in this.containers){\r\n            data.push({container : name, content : this.containers[name].content});\r\n        }\r\n        return data;\r\n    }\r\n\r\n    setData(data : DragAndDropData) {\r\n        try {\r\n            for (let containerdata of data) {\r\n                for (let content of containerdata.content) {\r\n                    this.try_move_draggable_to_container(content, containerdata.container, true);\r\n                }\r\n            }\r\n        } catch (_e) {\r\n            console.error(\"the data is not valid\");\r\n        }\r\n    }\r\n\r\n    diagram_container_from_draggable(diagram : Diagram) : Diagram {\r\n        let rect = rectangle_corner(...diagram.bounding_box()).move_origin(diagram.origin);\r\n        return rect.strokedasharray([5]);\r\n    }\r\n    \r\n    register_tap_enter(g: SVGElement, callback : (keyboard?: boolean) => any) {\r\n        g.onclick = (e) => {\r\n            callback(false);\r\n        }\r\n        g.onkeydown = (evt) => {\r\n            if (evt.key == \"Enter\") callback(true);\r\n        }\r\n    }\r\n    tap_enter_draggable(draggable_name: string, keyboard?: boolean){\r\n        if (this.active_draggable_name == null){\r\n            // select the draggable\r\n            this.reset_picked_class()\r\n            this.active_draggable_name = draggable_name;\r\n            let draggable = this.draggables[draggable_name];\r\n            if (draggable.svgelement == undefined) return;\r\n            draggable.svgelement.classList.add(\"picked\");\r\n            if (keyboard) this.onclickstart_callback[draggable_name]?.();\r\n        } else if (draggable_name == this.active_draggable_name) {\r\n            // unselect the draggable\r\n            this.reset_picked_class()\r\n            this.active_draggable_name = null;\r\n        } else {\r\n            // try to switch if possible\r\n            const target_container = this.draggables[draggable_name]?.container;\r\n            if (target_container) {\r\n                this.try_move_draggable_to_container(this.active_draggable_name, target_container);\r\n            }\r\n            this.reset_picked_class()\r\n            this.active_draggable_name = null;\r\n        }\r\n    }\r\n    tap_enter_container(container_name: string){\r\n        if (this.active_draggable_name == null) return;\r\n        this.try_move_draggable_to_container(this.active_draggable_name, container_name);\r\n\r\n        this.active_draggable_name = null;\r\n        this.reset_picked_class();\r\n    }\r\n    \r\n    private get_container_outer_g(container_name : string) : SVGGElement {\r\n        const container_data = this.containers[container_name];\r\n        return container_data?.svgelement?.parentNode as SVGGElement;\r\n    }\r\n\r\n    private add_container_svg(name : string, diagram: Diagram, outer_g: SVGGElement) {\r\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.dnd_svg, g, diagram.position(V2(0,0)), \r\n            false, false, calculate_text_scale(this.diagram_svg), dnd_type.container);\r\n        let position = diagram.origin;\r\n        g.setAttribute(\"transform\", `translate(${position.x},${-position.y})`)\r\n        g.setAttribute(\"class\", dnd_type.container);\r\n        g.setAttribute(\"tabindex\", \"0\");\r\n        \r\n        g.onmousedown = (e) => {\r\n            e.preventDefault();\r\n        }\r\n        this.register_tap_enter(g, () => {\r\n            this.tap_enter_container(name);\r\n        });\r\n        \r\n        outer_g.prepend(g);\r\n        this.containers[name].svgelement = g;\r\n        this.dom_to_id_map.set(g, name);\r\n        \r\n        this.add_focus_rect(g, diagram)\r\n    }\r\n    \r\n    private add_draggable_svg(name : string, diagram : Diagram, outer_g : SVGGElement) {\r\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.dnd_svg, g, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg), dnd_type.draggable);\r\n        let position = diagram.origin;\r\n        g.setAttribute(\"transform\", `translate(${position.x},${-position.y})`)\r\n        g.setAttribute(\"class\", dnd_type.draggable);\r\n        g.setAttribute(\"draggable\", \"true\");\r\n        g.setAttribute(\"tabindex\", \"0\");\r\n\r\n        g.onmousedown = (evt) => {\r\n            this.draggedElementName = name;\r\n            this.startDrag(evt);\r\n        }\r\n        g.ontouchstart = (evt) => {\r\n            this.draggedElementName = name;\r\n            this.tap_enter_draggable(name)\r\n            this.startDrag(evt);\r\n        }\r\n        this.register_tap_enter(g, (keyboard?: boolean) => {\r\n            this.tap_enter_draggable(name, keyboard);\r\n        });\r\n\r\n        outer_g.append(g);\r\n        this.draggables[name].svgelement = g;\r\n        this.dom_to_id_map.set(g, name);\r\n        this.add_focus_rect(g, diagram)\r\n    }\r\n    \r\n    private add_focus_rect(g: SVGGElement, diagram : Diagram) {\r\n        const bbox = diagram.position(V2(0,0)).bounding_box();\r\n        const pad = this.focus_padding;\r\n        const width = bbox[1].x - bbox[0].x + 2*pad;\r\n        const height = bbox[1].y - bbox[0].y + 2*pad;\r\n        // focus rect svg element\r\n        const focus_rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        focus_rect.setAttribute(\"width\", width.toString());\r\n        focus_rect.setAttribute(\"height\", height.toString());\r\n        focus_rect.setAttribute(\"x\", (bbox[0].x - pad).toString());\r\n        focus_rect.setAttribute(\"y\", (-bbox[1].y - pad).toString());\r\n        focus_rect.setAttribute(\"fill\", \"none\");\r\n        focus_rect.setAttribute(\"stroke\", \"black\");\r\n        focus_rect.setAttribute(\"stroke-width\", \"1\");\r\n        focus_rect.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\r\n        focus_rect.setAttribute(\"class\", FOCUS_RECT_CLASSNAME);\r\n        g.appendChild(focus_rect);\r\n    }\r\n    \r\n    private move_svg_draggable_to_container(draggable_name : string, container_name : string){\r\n        const draggable_svg = this.draggables[draggable_name]?.svgelement;\r\n        if (draggable_svg == undefined) return;\r\n        const container_outer_g = this.get_container_outer_g(container_name);\r\n        if (container_outer_g == undefined) return;\r\n        container_outer_g.appendChild(draggable_svg);\r\n    }\r\n    \r\n    private reorder_svg_container_content(container_name : string){\r\n        const content = this.containers[container_name]?.content;\r\n        const g = this.get_container_outer_g(container_name);\r\n        if (content == undefined || g == undefined) return;\r\n        for (let draggable_name of content) {\r\n            const draggable_svg = this.draggables[draggable_name]?.svgelement;\r\n            if (draggable_svg == undefined) continue;\r\n            g.appendChild(draggable_svg)\r\n        }\r\n    }\r\n    \r\n    private reconfigure_container_tabindex(container_name : string) {\r\n        const container = this.containers[container_name];\r\n        if (container == undefined) return;\r\n        if (container.capacity == 1) {\r\n            if (container.content.length == 1) {\r\n                container.svgelement?.setAttribute(\"tabindex\", \"-1\")\r\n                if (container.svgelement == document.activeElement){\r\n                    // set the focus to the content\r\n                    const content = container.content[0];\r\n                    this.draggables[content]?.svgelement?.focus();\r\n                }\r\n            } else {\r\n                container.svgelement?.setAttribute(\"tabindex\", \"0\")\r\n            }\r\n        }\r\n    }\r\n    \r\n    public reorder_svg_container_tabindex(container_names: string[]){\r\n        for (let container_name of container_names) {\r\n            const g = this.get_container_outer_g(container_name);\r\n            if (g == undefined) continue;\r\n            this.dnd_svg.appendChild(g);\r\n        }\r\n    }\r\n\r\n    reposition_container_content(container_name : string){\r\n        let container = this.containers[container_name];\r\n        if (container == undefined) return;\r\n        \r\n        if (this.sort_content){\r\n            container.content.sort()\r\n            this.reorder_svg_container_content(container_name)\r\n        } else if (container.config?.sorting_function) {\r\n            container.content.sort(container.config.sorting_function);\r\n            this.reorder_svg_container_content(container_name)\r\n        }\r\n        const bbox = container.config.custom_region_box ?? container.diagram.bounding_box();\r\n        const position_map = this.generate_position_map(bbox, container.config, container.capacity, container.content);\r\n\r\n        for (let i = 0; i < container.content.length; i++) {\r\n            let draggable = this.draggables[container.content[i]];\r\n            let pos = position_map[i] ?? container.diagram.origin;\r\n            draggable.diagram = draggable.diagram.position(pos);\r\n            draggable.position = pos;\r\n            draggable.svgelement?.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`);\r\n        }\r\n    }\r\n    remove_draggable_from_container(draggable_name : string, container_name : string) {\r\n        this.containers[container_name].content = \r\n            this.containers[container_name].content.filter((name) => name != draggable_name);\r\n    }\r\n    private move_draggable_to_container(draggable_name : string, container_name : string, ignore_callback = false) {\r\n        let draggable = this.draggables[draggable_name];\r\n        if (draggable == undefined) return;\r\n\r\n        // ignore if the draggable is already in the container\r\n        if (draggable.container == container_name) return;\r\n\r\n        let container = this.containers[container_name];\r\n        let original_container_name = draggable.container;\r\n\r\n        this.remove_draggable_from_container(draggable_name, original_container_name);\r\n        draggable.container = container_name;\r\n        container.content.push(draggable_name);\r\n        this.move_svg_draggable_to_container(draggable_name, container_name)\r\n\r\n        this.reposition_container_content(container_name);\r\n        this.reposition_container_content(original_container_name);\r\n        this.reconfigure_container_tabindex(container_name);\r\n        this.reconfigure_container_tabindex(original_container_name);\r\n\r\n        if (ignore_callback) return;\r\n        let draggedElement = this.draggables[draggable_name];\r\n        this.callbacks[draggedElement.name](draggedElement.position);\r\n    }\r\n\r\n    try_move_draggable_to_container(draggable_name : string, container_name : string, ignore_callback = false) {\r\n        if (this.move_validation_function) {\r\n            const valid = this.move_validation_function(draggable_name, container_name);\r\n            if (!valid) return;\r\n        }\r\n        let draggable = this.draggables[draggable_name];\r\n        let container = this.containers[container_name];\r\n        if (container.content.length + 1 <= container.capacity) {\r\n            this.move_draggable_to_container(draggable_name, container_name, ignore_callback);\r\n        } else if (container.capacity == 1){\r\n            // only swap if the container has only 1 capacity\r\n            // swap\r\n            let original_container_name = draggable.container;\r\n            let other_draggable_name = container.content[0];\r\n            this.move_draggable_to_container(draggable_name, container_name, true);\r\n            this.move_draggable_to_container(other_draggable_name, original_container_name, ignore_callback);\r\n        }\r\n    }\r\n\r\n    startDrag(evt : DnDEvent) {\r\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\r\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\r\n        this.hoveredContainerName = null;\r\n\r\n        // reset container hovered class\r\n        this.reset_hovered_class();\r\n        // delete orphaned ghost\r\n        let ghosts = this.dnd_svg.getElementsByClassName(dnd_type.ghost);\r\n        for (let i = 0; i < ghosts.length; i++) ghosts[i].remove();\r\n        \r\n        // create a clone of the dragged element\r\n        if (this.draggedElementName == null) return;\r\n        let draggable = this.draggables[this.draggedElementName];\r\n        if (draggable.svgelement == undefined) return;\r\n        draggable.svgelement.classList.add(\"picked\");\r\n        this.onclickstart_callback[this.draggedElementName]?.();\r\n        this.draggedElementGhost = draggable.svgelement.cloneNode(true) as SVGElement;\r\n        // set pointer-events : none\r\n        this.draggedElementGhost.style.pointerEvents = \"none\";\r\n        this.draggedElementGhost.setAttribute(\"opacity\", \"0.5\");\r\n        this.draggedElementGhost.setAttribute(\"class\", dnd_type.ghost);\r\n        this.dnd_svg.append(this.draggedElementGhost);\r\n    }\r\n\r\n    get_dnd_element_data_from_evt(evt : DnDEvent) : {name : string, type : string} | null {\r\n        let element : HTMLElement | null = null;\r\n        if (window.TouchEvent && evt instanceof TouchEvent) { \r\n            let evt_touch = evt.touches[0];\r\n            element = document.elementFromPoint(evt_touch.clientX, evt_touch.clientY) as HTMLElement;\r\n        } else {\r\n            const evt_ = evt as MouseEvent\r\n            element = document.elementFromPoint(evt_.clientX, evt_.clientY) as HTMLElement;\r\n        }\r\n        if (element == null) return null;\r\n\r\n        if (element.localName == \"tspan\") element = element.parentElement;\r\n        if (element == null) return null;\r\n        \r\n        let dg_tag = element.getAttribute(\"_dg_tag\"); if (dg_tag == null) return null;\r\n\r\n        if (dg_tag == dnd_type.container) {\r\n            let parent = element.parentElement; if (parent == null) return null;\r\n            let name = this.dom_to_id_map.get(parent); if (name == null) return null;\r\n            return {name, type : dnd_type.container};\r\n        }\r\n        if (dg_tag == dnd_type.draggable) {\r\n            let parent = element.parentElement; if (parent == null) return null;\r\n            let name = this.dom_to_id_map.get(parent);  if (name == null) return null;\r\n            return {name, type : dnd_type.draggable};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    drag(evt : DnDEvent) {\r\n        if (this.draggedElementName == null) return;\r\n        if (this.draggedElementGhost == null) return;\r\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\r\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\r\n\r\n        this.reset_hovered_class();\r\n        let element_data = this.get_dnd_element_data_from_evt(evt);\r\n        if (element_data == null) {\r\n            this.hoveredContainerName = null;\r\n        } else if (element_data.type == dnd_type.container) {\r\n            this.hoveredContainerName = element_data.name;\r\n            this.containers[element_data.name].svgelement?.classList.add(\"hovered\");\r\n        } else if (element_data.type == dnd_type.draggable) {\r\n            this.hoveredContainerName = this.draggables[element_data.name]?.container;\r\n            this.draggables[element_data.name].svgelement?.classList.add(\"hovered\");\r\n        }\r\n\r\n        let coord = getMousePosition(evt, this.dnd_svg);\r\n        this.draggedElementGhost.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`);\r\n    }\r\n\r\n    endDrag(_evt : DnDEvent) {\r\n        if (this.hoveredContainerName != null && this.draggedElementName != null){\r\n            this.try_move_draggable_to_container(this.draggedElementName, this.hoveredContainerName);\r\n        }\r\n\r\n        // if dropped outside of any container\r\n        if (this.hoveredContainerName == null && this.draggedElementName != null \r\n            && this.dropped_outside_callback != null){\r\n            this.dropped_outside_callback(this.draggedElementName);\r\n        }\r\n\r\n        this.draggedElementName = null;\r\n        this.hoveredContainerName = null;\r\n        this.reset_hovered_class();\r\n        this.reset_picked_class();\r\n\r\n        if (this.draggedElementGhost != null){\r\n            this.draggedElementGhost.remove();\r\n            this.draggedElementGhost = null;\r\n        }\r\n    }\r\n\r\n    reset_hovered_class(){\r\n        for (let name in this.containers) {\r\n            this.containers[name].svgelement?.classList.remove(\"hovered\");\r\n        }\r\n        for (let name in this.draggables) {\r\n            this.draggables[name].svgelement?.classList.remove(\"hovered\");\r\n        }\r\n    }\r\n\r\n    reset_picked_class(){\r\n        for (let name in this.draggables) {\r\n            this.draggables[name].svgelement?.classList.remove(\"picked\");\r\n        }\r\n    }\r\n}\r\n\r\nclass ButtonHandler {\r\n    // callbacks : {[key : string] : (state : boolean) => any} = {};\r\n    states : {[key : string] : boolean} = {};\r\n    svg_g_element : {[key : string] : SVGGElement|undefined} = {};\r\n    touchdownName : string | null = null;\r\n    focus_padding: number = 1;\r\n\r\n    constructor(public button_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\r\n    }\r\n    \r\n    remove(name : string){\r\n        delete this.states[name];\r\n        const g = this.svg_g_element[name];\r\n        g?.remove();\r\n        delete this.svg_g_element[name];\r\n    }\r\n\r\n    /** add a new toggle button if it doesn't exist, otherwise, update diagrams and callback */\r\n    try_add_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean, callback : (state : boolean, redraw? : boolean) => any) : setter_function_t {\r\n        let g = this.svg_g_element[name];\r\n        if (g) {\r\n            g.innerHTML = \"\";\r\n        } else {\r\n            g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n            this.button_svg.appendChild(g);\r\n        }\r\n        return this.add_toggle(name, diagram_on, diagram_off, state, g, callback);\r\n    }\r\n\r\n    private add_toggle(\r\n        name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean,\r\n        g : SVGGElement, callback : (state : boolean, redraw? : boolean) => any\r\n    ) : setter_function_t {\r\n        let g_off = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.button_svg, g_off, diagram_off, true, false, calculate_text_scale(this.diagram_svg));\r\n        g_off.setAttribute(\"overflow\", \"visible\");\r\n        g_off.style.cursor = \"pointer\";\r\n\r\n        let g_on = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.button_svg, g_on, diagram_on, true, false, calculate_text_scale(this.diagram_svg));\r\n        g_on.setAttribute(\"overflow\", \"visible\");\r\n        g_on.style.cursor = \"pointer\";\r\n\r\n        g.setAttribute(\"overflow\", \"visible\");\r\n        g.setAttribute(\"tabindex\", \"0\");\r\n        g.appendChild(g_on)\r\n        g.appendChild(g_off)\r\n        \r\n        this.svg_g_element[name] = g;\r\n        this.states[name] = state;\r\n\r\n        const set_display = (state : boolean) => {\r\n            g_on.setAttribute(\"display\", state ? \"block\" : \"none\");\r\n            g_off.setAttribute(\"display\", state ? \"none\" : \"block\");\r\n        }\r\n        set_display(this.states[name]);\r\n\r\n        const update_state = (state : boolean, redraw : boolean = true) => {\r\n            this.states[name] = state;\r\n            callback(this.states[name], redraw);\r\n            set_display(this.states[name]);\r\n        }\r\n        \r\n        g.onmousedown = (e) => {\r\n            e.preventDefault();\r\n        }\r\n        g.onclick = (e) => {\r\n            e.preventDefault();\r\n            update_state(!this.states[name]);\r\n        }\r\n        g.onkeydown = (e) => {\r\n            if (e.key == \"Enter\") update_state(!this.states[name]);\r\n        }\r\n        const setter = (state : boolean) => { update_state(state, false); }\r\n        return setter;\r\n    }\r\n\r\n    /** add a new click button if it doesn't exist, otherwise, update diagrams and callback */\r\n    try_add_click(\r\n        name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram,\r\n        callback : () => any\r\n    ){\r\n        let g = this.svg_g_element[name];\r\n        if (g) {\r\n            g.innerHTML = \"\";\r\n        } else {\r\n            g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n            this.button_svg.appendChild(g);\r\n        }\r\n        this.add_click(name, diagram, diagram_pressed, diagram_hover, g, callback);\r\n    }\r\n\r\n    private add_click(\r\n        name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram, \r\n        g : SVGGElement, callback : () => any\r\n    ){\r\n        let g_normal = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.button_svg, g_normal, diagram, true, false, calculate_text_scale(this.diagram_svg));\r\n        g_normal.setAttribute(\"overflow\", \"visible\");\r\n        g_normal.style.cursor = \"pointer\";\r\n\r\n        let g_pressed = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.button_svg, g_pressed, diagram_pressed, true, false, calculate_text_scale(this.diagram_svg));\r\n        g_pressed.setAttribute(\"overflow\", \"visible\");\r\n        g_pressed.style.cursor = \"pointer\";\r\n        \r\n        let g_hover = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        f_draw_to_svg(this.button_svg, g_hover, diagram_hover, true, false, calculate_text_scale(this.diagram_svg));\r\n        g_hover.setAttribute(\"overflow\", \"visible\");\r\n        g_hover.style.cursor = \"pointer\";\r\n        \r\n        g.setAttribute(\"class\", FOCUS_NO_OUTLINE_CLASSNAME)\r\n        g.setAttribute(\"overflow\", \"visible\");\r\n        g.setAttribute(\"tabindex\", \"0\");\r\n        g.appendChild(g_normal);\r\n        g.appendChild(g_pressed);\r\n        g.appendChild(g_hover);\r\n        this.add_focus_rect(g, diagram);\r\n\r\n        this.svg_g_element[name] = g;\r\n\r\n        const set_display = (pressed : boolean, hovered : boolean) => {\r\n            g_normal.setAttribute(\"display\", !pressed && !hovered ? \"block\" : \"none\");\r\n            g_pressed.setAttribute(\"display\", pressed ? \"block\" : \"none\");\r\n            g_hover.setAttribute(\"display\", hovered && !pressed ? \"block\" : \"none\");\r\n        }\r\n        set_display(false, false);\r\n        let pressed_state = false;\r\n        let hover_state = false;\r\n        \r\n        const update_display = () => {\r\n            set_display(pressed_state, hover_state);\r\n        }\r\n\r\n        g.onblur = (_e) => {\r\n            hover_state = false;\r\n            pressed_state = false;\r\n            update_display();\r\n        }\r\n        g.onmouseenter = (_e) => {\r\n            hover_state = true;\r\n            update_display();\r\n        }\r\n        g.onmouseleave = (_e) => {\r\n            hover_state = false;\r\n            pressed_state = false;\r\n            update_display();\r\n        }\r\n        g.onmousedown = (e) => {\r\n            e.preventDefault();\r\n            pressed_state = true;\r\n            update_display();\r\n        }\r\n        g.onmouseup = (e) => {\r\n            pressed_state = false;\r\n            update_display();\r\n        }\r\n        g.onclick = (e) => {\r\n            callback();\r\n            hover_state = false;\r\n            pressed_state = false;\r\n            update_display();\r\n        }\r\n        g.onkeydown = (e) => {\r\n            if (e.key == \"Enter\") {\r\n                callback();\r\n                pressed_state = true;\r\n                update_display();\r\n            }\r\n        }\r\n        g.onkeyup = (e) => {\r\n            pressed_state = false;\r\n            update_display();\r\n        }\r\n    }\r\n    \r\n    add_focus_rect(g: SVGGElement, diagram : Diagram) {\r\n        const bbox = diagram.bounding_box();\r\n        const pad = this.focus_padding;\r\n        const width = bbox[1].x - bbox[0].x + 2*pad;\r\n        const height = bbox[1].y - bbox[0].y + 2*pad;\r\n        // focus rect svg element\r\n        const focus_rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        focus_rect.setAttribute(\"width\", width.toString());\r\n        focus_rect.setAttribute(\"height\", height.toString());\r\n        focus_rect.setAttribute(\"x\", (bbox[0].x - pad).toString());\r\n        focus_rect.setAttribute(\"y\", (-bbox[1].y - pad).toString());\r\n        focus_rect.setAttribute(\"fill\", \"none\");\r\n        focus_rect.setAttribute(\"stroke\", \"black\");\r\n        focus_rect.setAttribute(\"stroke-width\", \"1\");\r\n        focus_rect.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\r\n        focus_rect.setAttribute(\"class\", FOCUS_RECT_CLASSNAME);\r\n        g.appendChild(focus_rect);\r\n    }\r\n        \r\n}\r\n","import { Path, Diagram, DiagramType, diagram_combine, } from './diagram.js';\r\nimport { Vector2, V2, Vdir} from './vector.js';\r\nimport { linspace, linspace_exc, range } from './utils.js';\r\nimport { array_repeat } from './utils.js'\r\nimport { arrow1 } from './shapes.js';\r\nimport { TAG } from './tag_names.js';\r\n\r\ntype modifierFunction = (d : Diagram) => Diagram\r\n\r\n/**\r\n * convert a function that modifies a path of a diagram to a function that modifies a diagram\r\n * if the diagram is a polygon or curve, the function is applied directly to the diagram\r\n * if the diagram is a diagram, the function is recursively applied to all children\r\n * if the diagram is empty or text, the function is not applied\r\n * @param func function that modifies a path of a diagram\r\n*/\r\nfunction function_handle_path_type(func : modifierFunction) : modifierFunction {\r\n    function modified_func(d : Diagram) : Diagram {\r\n        if (d.type == DiagramType.Polygon || d.type == DiagramType.Curve ) {\r\n            // apply directly\r\n            return func(d);\r\n        } else if (d.type == DiagramType.Diagram) {\r\n            // recursively apply to all children\r\n            d.children = d.children.map(c => modified_func(c));\r\n            return d;\r\n        } else if (d.type == DiagramType.Text || d.type == DiagramType.MultilineText) {\r\n            // do nothing\r\n            return d;\r\n        } else {\r\n            throw new Error(\"Unreachable, unknown diagram type : \" + d.type);\r\n        }\r\n    }\r\n    return modified_func;\r\n}\r\n\r\n\r\n/**\r\n * Resample a diagram so that it has `n` points\r\n * @param n number of points\r\n * @returns function that modifies a diagram\r\n */\r\nexport function resample(n : number) : modifierFunction{\r\n    // TODO : this function uses Diagram.parametric_point,\r\n    // which might be slow for large n\r\n    // for performance reason, we might want to implement it directly by calculating\r\n    // the points of the path here\r\n    function func(d : Diagram) : Diagram {\r\n        if (d.path == undefined) return d;\r\n        let ts = (d.type == DiagramType.Curve) ? linspace(0, 1, n) : linspace_exc(0, 1, n);\r\n        let new_points = ts.map(t => d.parametric_point(t));\r\n        d.path = new Path(new_points);\r\n        return d;\r\n    }\r\n    return function_handle_path_type(func);\r\n}\r\n\r\n/**\r\n * Subdivide each segment of a diagram into n segments\r\n * @param n number of segments to subdivide each segment into\r\n * @returns function that modifies a diagram\r\n */\r\nexport function subdivide(n : number = 100) : modifierFunction {\r\n    function func(d : Diagram) : Diagram {\r\n        if (d.path == undefined) return d;\r\n\r\n        let new_points : Vector2[] = [];\r\n        for (let i = 0; i < d.path.points.length; i++){\r\n            let curr_i = i;\r\n            let next_i = (curr_i + 1) % d.path.points.length;\r\n            let curr_p = d.path.points[i];\r\n            let next_p = d.path.points[next_i];\r\n\r\n            let xs = linspace(curr_p.x, next_p.x, n+1);\r\n            let ys = linspace(curr_p.y, next_p.y, n+1);\r\n            let subdivide_points = xs.map((x,i) => V2(x, ys[i]));\r\n            // ignore the last point\r\n            subdivide_points.pop();\r\n            new_points = new_points.concat(subdivide_points);\r\n        }\r\n\r\n        d.path = new Path(new_points);\r\n        return d;\r\n    }\r\n    return function_handle_path_type(func);\r\n}\r\n\r\n/**\r\n * Get a slice of a diagram from `t_start` to `t_end`\r\n * @param t_start starting point of the slice\r\n * @param t_end ending point of the slice\r\n * @param n number of points in the slice\r\n * @returns function that modifies a diagram\r\n */\r\nexport function slicepath(t_start : number, t_end : number, n : number = 100) : modifierFunction {\r\n    if (t_start > t_end) [t_start, t_end] = [t_end, t_start];\r\n    if (t_start < 0) t_start = 0;\r\n    if (t_end > 1) t_end = 1;\r\n\r\n    let n_total = Math.floor(n / (t_end - t_start));\r\n    function func(d : Diagram) : Diagram {\r\n        if (d.path == undefined) return d;\r\n        let dnew = d.apply(resample(n_total));\r\n        if (dnew.path == undefined) return d;\r\n        // take slice of the path\r\n        let new_points = dnew.path.points.slice(\r\n            Math.floor(t_start * n_total),\r\n            Math.floor(t_end * n_total) + 1\r\n        );\r\n        dnew.path = new Path(new_points);\r\n        return dnew;\r\n    }\r\n    return function_handle_path_type(func);\r\n}\r\n\r\n\r\nfunction get_round_corner_arc_points(radius : number, points : [Vector2,Vector2,Vector2], count : number) : Vector2[] {\r\n    let [p1, p2, p3] = points;\r\n\r\n    let v1 = p1.sub(p2).normalize();\r\n    let v3 = p3.sub(p2).normalize();\r\n    let corner_angle = Math.abs((v1.angle() - v3.angle()) % Math.PI);\r\n    let s_dist  = radius/Math.tan(corner_angle/2);\r\n\r\n    // s_dist can only be as long as half the distance to the closest point\r\n    let d1 = p1.sub(p2).length();\r\n    let d3 = p3.sub(p2).length();\r\n    // recalculate\r\n    s_dist = Math.min(s_dist, d1/2, d3/2);\r\n    radius = s_dist * Math.tan(corner_angle/2);\r\n\r\n    let pa = p2.add(v1.scale(s_dist));\r\n    let pb = p2.add(v3.scale(s_dist));\r\n    let distc = Math.sqrt(radius*radius + s_dist*s_dist);\r\n    let pc = p2.add(\r\n        v1.add(v3).normalize().scale(distc)\r\n    );\r\n\r\n    let angle_a = pa.sub(pc).angle();\r\n    let angle_b = pb.sub(pc).angle();\r\n    // if we just use angle_a and angle_b as is, the arc might be drawn in the wrong direction\r\n    // find out which direction is the correct one\r\n    // check whether angle_a is closer to angle_b, angle_b + 2π, or angle_b - 2π\r\n    let angle_b_plus  = angle_b + 2*Math.PI;\r\n    let angle_b_minus = angle_b - 2*Math.PI;\r\n    let angle_a_b       = Math.abs(angle_a - angle_b);\r\n    let angle_a_b_plus  = Math.abs(angle_a - angle_b_plus);\r\n    let angle_a_b_minus = Math.abs(angle_a - angle_b_minus);\r\n    if (angle_a_b_plus < angle_a_b)  angle_b = angle_b_plus;\r\n    if (angle_a_b_minus < angle_a_b) angle_b = angle_b_minus;\r\n\r\n    let arc_points = linspace(angle_a, angle_b, count).map(a => pc.add(Vdir(a).scale(radius)));\r\n    return arc_points;\r\n}\r\n\r\n/**\r\n * Create a function that modifies a diagram by rounding the corners of a polygon or curve\r\n * @param radius radius of the corner\r\n * @param point_indices indices of the points to be rounded\r\n * @returns function that modifies a diagram\r\n *\r\n * @example\r\n * ```javascript\r\n * let s = square(5).apply(mod.round_corner(2, [0,2]))\r\n * ```\r\n */\r\nexport function round_corner(radius : number | number[] =  1, point_indices? : number[], count : number = 40) : modifierFunction {\r\n    // if radius is 0, return the identity function\r\n    if (radius == 0) return (d) => d;\r\n    \r\n    // if radius is a number, create an array of length one\r\n    if (typeof radius == \"number\") radius = [radius];\r\n\r\n    // create a function that modify the path of a diagram, (only works for polygon and curve)\r\n    // later we will convert it to a function that modifies any diagram using function_handle_path_type\r\n    function func(d : Diagram) : Diagram {\r\n        if (d.path == undefined) return d;\r\n        let diagram_point_indices = range(0, d.path.points.length);\r\n        if (point_indices == undefined) point_indices = diagram_point_indices;\r\n\r\n        // filter only the points that are in diagram_point_indices\r\n        point_indices = point_indices.filter(i => diagram_point_indices.includes(i));\r\n        // repeat the radius array to match the number of points\r\n        radius = array_repeat(radius as number[], point_indices.length);\r\n\r\n        let new_points : Vector2[] = [];\r\n        for (let i = 0; i < d.path.points.length; i++){\r\n            let curr_i = i;\r\n            if (!point_indices.includes(curr_i)) {\r\n                new_points.push(d.path.points[i]);\r\n                continue;\r\n            }\r\n            let prev_i = (curr_i - 1 + d.path.points.length) % d.path.points.length;\r\n            let next_i = (curr_i + 1) % d.path.points.length;\r\n            let prev_p = d.path.points[prev_i];\r\n            let curr_p = d.path.points[i];\r\n            let next_p = d.path.points[next_i];\r\n            let arc_points = get_round_corner_arc_points(\r\n                radius[point_indices.indexOf(curr_i)], [prev_p, curr_p, next_p], count);\r\n            new_points = new_points.concat(arc_points);\r\n        }\r\n\r\n        d.path = new Path(new_points);\r\n        return d;\r\n    }\r\n    return function_handle_path_type(func);\r\n}\r\n\r\n\r\n/**\r\n * Add an arrow to the end of a curve\r\n * Make sure the diagram this modifier is applied to is a curve\r\n * @param headsize size of the arrow head\r\n * @param flip flip the arrow position\r\n */\r\nexport function add_arrow(headsize : number, flip = false) : modifierFunction {\r\n    function func(c : Diagram) : Diagram {\r\n        if (c.path == undefined) return c;\r\n        let p1 = flip ? c.path.points[0] : c.path.points[c.path.points.length - 1];\r\n        let p0 = flip ? c.path.points[1] : c.path.points[c.path.points.length - 2];\r\n        let arrow = arrow1(p0, p1, headsize);\r\n        return diagram_combine(c, arrow).clone_style_from(c);\r\n    }\r\n    return function_handle_path_type(func);\r\n}\r\n\r\nfunction arrowhead_angle(d : Diagram) : number {\r\n    if (!d.contain_tag(TAG.ARROW_HEAD)) return NaN;\r\n    let points = d.path?.points\r\n    if (points == undefined) return NaN;\r\n    if (points.length != 3) return NaN;\r\n    let v_tip   = points[0];\r\n    let v_base1 = points[1];\r\n    let v_base2 = points[2];\r\n    let v_base  = v_base1.add(v_base2).scale(0.5)\r\n    let v_dir   = v_tip.sub(v_base);\r\n    return v_dir.angle();\r\n}\r\n\r\n/**\r\n* Replace arrowhead inside a diagram with another diagram\r\n* @param new_arrowhead diagram to replace the arrowhead with\r\n* The arrow will be rotated automatically,\r\n* The default direction is to the right (+x) with the tip at the origin\r\n*/\r\nexport function arrowhead_replace(new_arrowhead : Diagram) : modifierFunction {\r\n    return function func(d : Diagram) : Diagram {\r\n        return d.apply_to_tagged_recursive(TAG.ARROW_HEAD, (arrowhead : Diagram) => {\r\n            let angle = arrowhead_angle(arrowhead);\r\n            return new_arrowhead.copy().rotate(angle).position(arrowhead.origin);\r\n        })\r\n    }\r\n}\r\n","//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nvar AlongIntersection;\n(function (AlongIntersection) {\n    AlongIntersection[AlongIntersection[\"BeforeStart\"] = 0] = \"BeforeStart\";\n    AlongIntersection[AlongIntersection[\"EqualStart\"] = 1] = \"EqualStart\";\n    AlongIntersection[AlongIntersection[\"BetweenStartAndEnd\"] = 2] = \"BetweenStartAndEnd\";\n    AlongIntersection[AlongIntersection[\"EqualEnd\"] = 3] = \"EqualEnd\";\n    AlongIntersection[AlongIntersection[\"AfterEnd\"] = 4] = \"AfterEnd\";\n})(AlongIntersection || (AlongIntersection = {}));\nclass Geometry {\n    pointsSame(p1, p2) {\n        return this.pointsSameX(p1, p2) && this.pointsSameY(p1, p2);\n    }\n    pointsCompare(p1, p2) {\n        // returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n        if (this.pointsSameX(p1, p2)) {\n            return this.pointsSameY(p1, p2) ? 0 : p1[1] < p2[1] ? -1 : 1;\n        }\n        return p1[0] < p2[0] ? -1 : 1;\n    }\n}\nclass GeometryEpsilon extends Geometry {\n    constructor(epsilon = 0.0000000001) {\n        super();\n        this.epsilon = epsilon;\n    }\n    pointAboveOrOnLine(p, left, right) {\n        const Ax = left[0];\n        const Ay = left[1];\n        const Bx = right[0];\n        const By = right[1];\n        const Cx = p[0];\n        const Cy = p[1];\n        return (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -this.epsilon;\n    }\n    pointBetween(p, left, right) {\n        // p must be collinear with left->right\n        // returns false if p == left, p == right, or left == right\n        const d_py_ly = p[1] - left[1];\n        const d_rx_lx = right[0] - left[0];\n        const d_px_lx = p[0] - left[0];\n        const d_ry_ly = right[1] - left[1];\n        const dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n        // if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n        // if `dot` is less than 0, then `p` is to the left of `left` (reject)\n        if (dot < this.epsilon) {\n            return false;\n        }\n        const sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n        // if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n        // therefore, if `dot - sqlen` is greater than 0, then `p` is to the right\n        // of `right` (reject)\n        if (dot - sqlen > -this.epsilon) {\n            return false;\n        }\n        return true;\n    }\n    pointsSameX(p1, p2) {\n        return Math.abs(p1[0] - p2[0]) < this.epsilon;\n    }\n    pointsSameY(p1, p2) {\n        return Math.abs(p1[1] - p2[1]) < this.epsilon;\n    }\n    pointsCollinear(p1, p2, p3) {\n        // does pt1->pt2->pt3 make a straight line?\n        // essentially this is just checking to see if\n        //   slope(pt1->pt2) === slope(pt2->pt3)\n        // if slopes are equal, then they must be collinear, because they share pt2\n        const dx1 = p1[0] - p2[0];\n        const dy1 = p1[1] - p2[1];\n        const dx2 = p2[0] - p3[0];\n        const dy2 = p2[1] - p3[1];\n        return Math.abs(dx1 * dy2 - dx2 * dy1) < this.epsilon;\n    }\n    linesIntersect(aStart, aEnd, bStart, bEnd) {\n        // returns null if the lines are coincident (e.g., parallel or on top of\n        // each other)\n        //\n        // returns an object if the lines intersect:\n        //   {\n        //     p: [x, y],    where the intersection point is at\n        //     alongA: where intersection point is along A,\n        //     alongB: where intersection point is along B\n        //   }\n        //\n        // alongA and alongB will each be one of AlongIntersection, depending on\n        // where the intersection point is along the A and B lines\n        //\n        const adx = aEnd[0] - aStart[0];\n        const ady = aEnd[1] - aStart[1];\n        const bdx = bEnd[0] - bStart[0];\n        const bdy = bEnd[1] - bStart[1];\n        const axb = adx * bdy - ady * bdx;\n        if (Math.abs(axb) < this.epsilon) {\n            return null; // lines are coincident\n        }\n        const dx = aStart[0] - bStart[0];\n        const dy = aStart[1] - bStart[1];\n        const A = (bdx * dy - bdy * dx) / axb;\n        const B = (adx * dy - ady * dx) / axb;\n        // categorizes where along the line the intersection point is at\n        const categorize = (v) => v <= -this.epsilon\n            ? AlongIntersection.BeforeStart\n            : v < this.epsilon\n                ? AlongIntersection.EqualStart\n                : v - 1 <= -this.epsilon\n                    ? AlongIntersection.BetweenStartAndEnd\n                    : v - 1 < this.epsilon\n                        ? AlongIntersection.EqualEnd\n                        : AlongIntersection.AfterEnd;\n        const p = [aStart[0] + A * adx, aStart[1] + A * ady];\n        return {\n            alongA: categorize(A),\n            alongB: categorize(B),\n            p,\n        };\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass List {\n    constructor() {\n        this.nodes = [];\n    }\n    remove(node) {\n        const i = this.nodes.indexOf(node);\n        if (i >= 0) {\n            this.nodes.splice(i, 1);\n        }\n    }\n    getIndex(node) {\n        return this.nodes.indexOf(node);\n    }\n    isEmpty() {\n        return this.nodes.length <= 0;\n    }\n    getHead() {\n        return this.nodes[0];\n    }\n    removeHead() {\n        this.nodes.shift();\n    }\n    insertBefore(node, check) {\n        this.findTransition(node, check).insert(node);\n    }\n    findTransition(node, check) {\n        var _a, _b;\n        // bisect to find the transition point\n        const compare = (a, b) => check(b) - check(a);\n        let i = 0;\n        let high = this.nodes.length;\n        while (i < high) {\n            const mid = (i + high) >> 1;\n            if (compare(this.nodes[mid], node) > 0) {\n                high = mid;\n            }\n            else {\n                i = mid + 1;\n            }\n        }\n        return {\n            before: i <= 0 ? null : (_a = this.nodes[i - 1]) !== null && _a !== void 0 ? _a : null,\n            after: (_b = this.nodes[i]) !== null && _b !== void 0 ? _b : null,\n            insert: (node) => {\n                this.nodes.splice(i, 0, node);\n                return node;\n            },\n        };\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass Segment {\n    constructor(start, end, copyMyFill, log) {\n        var _a;\n        this.otherFill = null;\n        this.id = (_a = log === null || log === void 0 ? void 0 : log.segmentId()) !== null && _a !== void 0 ? _a : -1;\n        this.start = start;\n        this.end = end;\n        this.myFill = {\n            above: copyMyFill ? copyMyFill.myFill.above : null,\n            below: copyMyFill ? copyMyFill.myFill.below : null,\n        };\n    }\n}\nclass Event {\n    constructor(isStart, p, seg, primary) {\n        this.status = null;\n        this.isStart = isStart;\n        this.p = p;\n        this.seg = seg;\n        this.primary = primary;\n    }\n}\nclass Intersecter {\n    constructor(selfIntersection, geo, log = null) {\n        this.events = new List();\n        this.status = new List();\n        this.selfIntersection = selfIntersection;\n        this.geo = geo;\n        this.log = log;\n    }\n    compareEvents(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2) {\n        // compare the selected points first\n        const comp = this.geo.pointsCompare(p1_1, p2_1);\n        if (comp !== 0) {\n            return comp;\n        }\n        // the selected points are the same\n        if (this.geo.pointsSame(p1_2, p2_2)) {\n            // if the non-selected points are the same too...\n            return 0; // then the segments are equal\n        }\n        if (p1_isStart !== p2_isStart) {\n            // if one is a start and the other isn't...\n            return p1_isStart ? 1 : -1; // favor the one that isn't the start\n        }\n        // otherwise, we'll have to calculate which one is below the other manually\n        return this.geo.pointAboveOrOnLine(p1_2, p2_isStart ? p2_1 : p2_2, // order matters\n        p2_isStart ? p2_2 : p2_1)\n            ? 1\n            : -1;\n    }\n    addEvent(ev) {\n        this.events.insertBefore(ev, (here) => {\n            if (here === ev) {\n                return 0;\n            }\n            return this.compareEvents(ev.isStart, ev.p, ev.other.p, here.isStart, here.p, here.other.p);\n        });\n    }\n    divideEvent(ev, p) {\n        var _a;\n        const ns = new Segment(p, ev.seg.end, ev.seg, this.log);\n        // slides an end backwards\n        //   (start)------------(end)    to:\n        //   (start)---(end)\n        (_a = this.log) === null || _a === void 0 ? void 0 : _a.segmentChop(ev.seg, p);\n        this.events.remove(ev.other);\n        ev.seg.end = p;\n        ev.other.p = p;\n        this.addEvent(ev.other);\n        return this.addSegment(ns, ev.primary);\n    }\n    newSegment(p1, p2) {\n        const forward = this.geo.pointsCompare(p1, p2);\n        if (forward === 0) {\n            // points are equal, so we have a zero-length segment\n            return null; // skip it\n        }\n        return forward < 0\n            ? new Segment(p1, p2, null, this.log)\n            : new Segment(p2, p1, null, this.log);\n    }\n    addSegment(seg, primary) {\n        const evStart = new Event(true, seg.start, seg, primary);\n        const evEnd = new Event(false, seg.end, seg, primary);\n        evStart.other = evEnd;\n        evEnd.other = evStart;\n        this.addEvent(evStart);\n        this.addEvent(evEnd);\n        return evStart;\n    }\n    addRegion(region) {\n        // regions are a list of points:\n        //  [ [0, 0], [100, 0], [50, 100] ]\n        // you can add multiple regions before running calculate\n        let pt1;\n        let pt2 = region[region.length - 1];\n        for (let i = 0; i < region.length; i++) {\n            pt1 = pt2;\n            pt2 = region[i];\n            const seg = this.newSegment(pt1, pt2);\n            if (seg) {\n                this.addSegment(seg, true);\n            }\n        }\n    }\n    compareStatus(ev1, ev2) {\n        const a1 = ev1.seg.start;\n        const a2 = ev1.seg.end;\n        const b1 = ev2.seg.start;\n        const b2 = ev2.seg.end;\n        if (this.geo.pointsCollinear(a1, b1, b2)) {\n            if (this.geo.pointsCollinear(a2, b1, b2)) {\n                return 1;\n            }\n            return this.geo.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;\n        }\n        return this.geo.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;\n    }\n    statusFindSurrounding(ev) {\n        return this.status.findTransition(ev, (here) => {\n            if (here === ev) {\n                return 0;\n            }\n            return -this.compareStatus(ev, here);\n        });\n    }\n    checkIntersection(ev1, ev2) {\n        var _a;\n        // returns the segment equal to ev1, or null if nothing equal\n        const seg1 = ev1.seg;\n        const seg2 = ev2.seg;\n        const a1 = seg1.start;\n        const a2 = seg1.end;\n        const b1 = seg2.start;\n        const b2 = seg2.end;\n        (_a = this.log) === null || _a === void 0 ? void 0 : _a.checkIntersection(seg1, seg2);\n        const i = this.geo.linesIntersect(a1, a2, b1, b2);\n        if (i === null) {\n            // segments are parallel or coincident\n            // if points aren't collinear, then the segments are parallel, so no\n            // intersections\n            if (!this.geo.pointsCollinear(a1, a2, b1)) {\n                return null;\n            }\n            // otherwise, segments are on top of each other somehow (aka coincident)\n            if (this.geo.pointsSame(a1, b2) || this.geo.pointsSame(a2, b1)) {\n                return null; // segments touch at endpoints... no intersection\n            }\n            const a1_equ_b1 = this.geo.pointsSame(a1, b1);\n            const a2_equ_b2 = this.geo.pointsSame(a2, b2);\n            if (a1_equ_b1 && a2_equ_b2) {\n                return ev2; // segments are exactly equal\n            }\n            const a1_between = !a1_equ_b1 && this.geo.pointBetween(a1, b1, b2);\n            const a2_between = !a2_equ_b2 && this.geo.pointBetween(a2, b1, b2);\n            if (a1_equ_b1) {\n                if (a2_between) {\n                    //  (a1)---(a2)\n                    //  (b1)----------(b2)\n                    this.divideEvent(ev2, a2);\n                }\n                else {\n                    //  (a1)----------(a2)\n                    //  (b1)---(b2)\n                    this.divideEvent(ev1, b2);\n                }\n                return ev2;\n            }\n            else if (a1_between) {\n                if (!a2_equ_b2) {\n                    // make a2 equal to b2\n                    if (a2_between) {\n                        //         (a1)---(a2)\n                        //  (b1)-----------------(b2)\n                        this.divideEvent(ev2, a2);\n                    }\n                    else {\n                        //         (a1)----------(a2)\n                        //  (b1)----------(b2)\n                        this.divideEvent(ev1, b2);\n                    }\n                }\n                //         (a1)---(a2)\n                //  (b1)----------(b2)\n                this.divideEvent(ev2, a1);\n            }\n        }\n        else {\n            // otherwise, lines intersect at i.p, which may or may not be between the\n            // endpoints\n            // is A divided between its endpoints? (exclusive)\n            if (i.alongA === AlongIntersection.BetweenStartAndEnd) {\n                if (i.alongB === AlongIntersection.EqualStart) {\n                    this.divideEvent(ev1, b1);\n                }\n                else if (i.alongB === AlongIntersection.BetweenStartAndEnd) {\n                    this.divideEvent(ev1, i.p);\n                }\n                else if (i.alongB === AlongIntersection.EqualEnd) {\n                    this.divideEvent(ev1, b2);\n                }\n            }\n            // is B divided between its endpoints? (exclusive)\n            if (i.alongB === AlongIntersection.BetweenStartAndEnd) {\n                if (i.alongA === AlongIntersection.EqualStart) {\n                    this.divideEvent(ev2, a1);\n                }\n                else if (i.alongA === AlongIntersection.BetweenStartAndEnd) {\n                    this.divideEvent(ev2, i.p);\n                }\n                else if (i.alongA === AlongIntersection.EqualEnd) {\n                    this.divideEvent(ev2, a2);\n                }\n            }\n        }\n        return null;\n    }\n    calculate(primaryPolyInverted, secondaryPolyInverted) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const segments = [];\n        while (!this.events.isEmpty()) {\n            const ev = this.events.getHead();\n            (_a = this.log) === null || _a === void 0 ? void 0 : _a.vert(ev.p[0]);\n            if (ev.isStart) {\n                (_b = this.log) === null || _b === void 0 ? void 0 : _b.segmentNew(ev.seg, ev.primary);\n                const surrounding = this.statusFindSurrounding(ev);\n                const above = surrounding.before;\n                const below = surrounding.after;\n                (_c = this.log) === null || _c === void 0 ? void 0 : _c.tempStatus(ev.seg, above ? above.seg : false, below ? below.seg : false);\n                const checkBothIntersections = () => {\n                    if (above) {\n                        const eve = this.checkIntersection(ev, above);\n                        if (eve) {\n                            return eve;\n                        }\n                    }\n                    if (below) {\n                        return this.checkIntersection(ev, below);\n                    }\n                    return null;\n                };\n                const eve = checkBothIntersections();\n                if (eve) {\n                    // ev and eve are equal\n                    // we'll keep eve and throw away ev\n                    // merge ev.seg's fill information into eve.seg\n                    if (this.selfIntersection) {\n                        let toggle; // are we a toggling edge?\n                        if (ev.seg.myFill.below === null) {\n                            toggle = true;\n                        }\n                        else {\n                            toggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n                        }\n                        // merge two segments that belong to the same polygon\n                        // think of this as sandwiching two segments together, where\n                        // `eve.seg` is the bottom -- this will cause the above fill flag to\n                        // toggle\n                        if (toggle) {\n                            eve.seg.myFill.above = !eve.seg.myFill.above;\n                        }\n                    }\n                    else {\n                        // merge two segments that belong to different polygons\n                        // each segment has distinct knowledge, so no special logic is\n                        // needed\n                        // note that this can only happen once per segment in this phase,\n                        // because we are guaranteed that all self-intersections are gone\n                        eve.seg.otherFill = ev.seg.myFill;\n                    }\n                    (_d = this.log) === null || _d === void 0 ? void 0 : _d.segmentUpdate(eve.seg);\n                    this.events.remove(ev.other);\n                    this.events.remove(ev);\n                }\n                if (this.events.getHead() !== ev) {\n                    // something was inserted before us in the event queue, so loop back\n                    // around and process it before continuing\n                    (_e = this.log) === null || _e === void 0 ? void 0 : _e.rewind(ev.seg);\n                    continue;\n                }\n                //\n                // calculate fill flags\n                //\n                if (this.selfIntersection) {\n                    let toggle; // are we a toggling edge?\n                    if (ev.seg.myFill.below === null) {\n                        // if we are a new segment...\n                        // then we toggle\n                        toggle = true;\n                    }\n                    else {\n                        // we are a segment that has previous knowledge from a division\n                        // calculate toggle\n                        toggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n                    }\n                    // next, calculate whether we are filled below us\n                    if (!below) {\n                        // if nothing is below us...\n                        // we are filled below us if the polygon is inverted\n                        ev.seg.myFill.below = primaryPolyInverted;\n                    }\n                    else {\n                        // otherwise, we know the answer -- it's the same if whatever is\n                        // below us is filled above it\n                        ev.seg.myFill.below = below.seg.myFill.above;\n                    }\n                    // since now we know if we're filled below us, we can calculate\n                    // whether we're filled above us by applying toggle to whatever is\n                    // below us\n                    if (toggle) {\n                        ev.seg.myFill.above = !ev.seg.myFill.below;\n                    }\n                    else {\n                        ev.seg.myFill.above = ev.seg.myFill.below;\n                    }\n                }\n                else {\n                    // now we fill in any missing transition information, since we are\n                    // all-knowing at this point\n                    if (ev.seg.otherFill === null) {\n                        // if we don't have other information, then we need to figure out if\n                        // we're inside the other polygon\n                        let inside;\n                        if (!below) {\n                            // if nothing is below us, then we're inside if the other polygon\n                            // is inverted\n                            inside = ev.primary ? secondaryPolyInverted : primaryPolyInverted;\n                        }\n                        else {\n                            // otherwise, something is below us\n                            // so copy the below segment's other polygon's above\n                            if (ev.primary === below.primary) {\n                                if (below.seg.otherFill === null) {\n                                    throw new Error(\"otherFill is null\");\n                                }\n                                inside = below.seg.otherFill.above;\n                            }\n                            else {\n                                inside = below.seg.myFill.above;\n                            }\n                        }\n                        ev.seg.otherFill = {\n                            above: inside,\n                            below: inside,\n                        };\n                    }\n                }\n                (_f = this.log) === null || _f === void 0 ? void 0 : _f.status(ev.seg, above ? above.seg : false, below ? below.seg : false);\n                // insert the status and remember it for later removal\n                ev.other.status = surrounding.insert(ev);\n            }\n            else {\n                // end\n                const st = ev.status;\n                if (st === null) {\n                    throw new Error(\"PolyBool: Zero-length segment detected; your epsilon is \" +\n                        \"probably too small or too large\");\n                }\n                // removing the status will create two new adjacent edges, so we'll need\n                // to check for those\n                const i = this.status.getIndex(st);\n                if (i > 0 && i < this.status.nodes.length - 1) {\n                    const before = this.status.nodes[i - 1];\n                    const after = this.status.nodes[i + 1];\n                    this.checkIntersection(before, after);\n                }\n                (_g = this.log) === null || _g === void 0 ? void 0 : _g.statusRemove(st.seg);\n                // remove the status\n                this.status.remove(st);\n                // if we've reached this point, we've calculated everything there is to\n                // know, so save the segment for reporting\n                if (!ev.primary) {\n                    // make sure `seg.myFill` actually points to the primary polygon\n                    // though\n                    if (!ev.seg.otherFill) {\n                        throw new Error(\"otherFill is null\");\n                    }\n                    const s = ev.seg.myFill;\n                    ev.seg.myFill = ev.seg.otherFill;\n                    ev.seg.otherFill = s;\n                }\n                segments.push(ev.seg);\n            }\n            // remove the event and continue\n            this.events.removeHead();\n        }\n        (_h = this.log) === null || _h === void 0 ? void 0 : _h.done();\n        return segments;\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\n//\n// filter a list of segments based on boolean operations\n//\nfunction select(segments, selection, log) {\n    const result = [];\n    for (const seg of segments) {\n        const index = (seg.myFill.above ? 8 : 0) +\n            (seg.myFill.below ? 4 : 0) +\n            (seg.otherFill && seg.otherFill.above ? 2 : 0) +\n            (seg.otherFill && seg.otherFill.below ? 1 : 0);\n        if (selection[index] !== 0) {\n            // copy the segment to the results, while also calculating the fill status\n            const keep = new Segment(seg.start, seg.end, null, log);\n            keep.myFill.above = selection[index] === 1; // 1 if filled above\n            keep.myFill.below = selection[index] === 2; // 2 if filled below\n            result.push(keep);\n        }\n    }\n    log === null || log === void 0 ? void 0 : log.selected(result);\n    return result;\n}\nclass SegmentSelector {\n    static union(segments, log) {\n        // primary | secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   yes filled below    2\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   no                  0\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   yes filled above    1\n        //    1      0      1      1   =>   no                  0\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   no                  0\n        //    1      1      1      0   =>   no                  0\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], log);\n    }\n    static intersect(segments, log) {\n        // primary & secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   no                  0\n        //    0      0      1      0   =>   no                  0\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   no                  0\n        //    0      1      0      1   =>   yes filled below    2\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   yes filled below    2\n        //    1      0      0      0   =>   no                  0\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   yes filled above    1\n        //    1      0      1      1   =>   yes filled above    1\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled below    2\n        //    1      1      1      0   =>   yes filled above    1\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0], log);\n    }\n    static difference(segments, log) {\n        // primary - secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   no                  0\n        //    0      0      1      0   =>   no                  0\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   yes filled below    2\n        //    0      1      1      1   =>   no                  0\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   yes filled above    1\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   no                  0\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled above    1\n        //    1      1      1      0   =>   yes filled below    2\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0], log);\n    }\n    static differenceRev(segments, log) {\n        // secondary - primary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   no                  0\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   yes filled above    1\n        //    0      1      1      1   =>   yes filled above    1\n        //    1      0      0      0   =>   no                  0\n        //    1      0      0      1   =>   yes filled below    2\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   yes filled below    2\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   no                  0\n        //    1      1      1      0   =>   no                  0\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0], log);\n    }\n    static xor(segments, log) {\n        // primary ^ secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   yes filled above    1\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   yes filled below    2\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled above    1\n        //    1      1      1      0   =>   yes filled below    2\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0], log);\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\n//\n// converts a list of segments into a list of regions, while also removing\n// unnecessary verticies\n//\nfunction SegmentChainer(segments, geo, log) {\n    const chains = [];\n    const regions = [];\n    for (const seg of segments) {\n        const pt1 = seg.start;\n        const pt2 = seg.end;\n        if (geo.pointsSame(pt1, pt2)) {\n            console.warn(\"PolyBool: Warning: Zero-length segment detected; your epsilon is \" +\n                \"probably too small or too large\");\n            continue;\n        }\n        log === null || log === void 0 ? void 0 : log.chainStart(seg);\n        // search for two chains that this segment matches\n        const first_match = {\n            index: 0,\n            matches_head: false,\n            matches_pt1: false,\n        };\n        const second_match = {\n            index: 0,\n            matches_head: false,\n            matches_pt1: false,\n        };\n        let next_match = first_match;\n        function setMatch(index, matches_head, matches_pt1) {\n            // return true if we've matched twice\n            if (next_match) {\n                next_match.index = index;\n                next_match.matches_head = matches_head;\n                next_match.matches_pt1 = matches_pt1;\n            }\n            if (next_match === first_match) {\n                next_match = second_match;\n                return false;\n            }\n            next_match = null;\n            return true; // we've matched twice, we're done here\n        }\n        for (let i = 0; i < chains.length; i++) {\n            const chain = chains[i];\n            const head = chain[0];\n            const tail = chain[chain.length - 1];\n            if (geo.pointsSame(head, pt1)) {\n                if (setMatch(i, true, true)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(head, pt2)) {\n                if (setMatch(i, true, false)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(tail, pt1)) {\n                if (setMatch(i, false, true)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(tail, pt2)) {\n                if (setMatch(i, false, false)) {\n                    break;\n                }\n            }\n        }\n        if (next_match === first_match) {\n            // we didn't match anything, so create a new chain\n            chains.push([pt1, pt2]);\n            log === null || log === void 0 ? void 0 : log.chainNew(pt1, pt2);\n            continue;\n        }\n        if (next_match === second_match) {\n            // we matched a single chain\n            log === null || log === void 0 ? void 0 : log.chainMatch(first_match.index);\n            // add the other point to the apporpriate end, and check to see if we've closed the\n            // chain into a loop\n            const index = first_match.index;\n            const pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc\n            const addToHead = first_match.matches_head; // if we matched at head, then add to the head\n            const chain = chains[index];\n            let grow = addToHead ? chain[0] : chain[chain.length - 1];\n            const grow2 = addToHead ? chain[1] : chain[chain.length - 2];\n            const oppo = addToHead ? chain[chain.length - 1] : chain[0];\n            const oppo2 = addToHead ? chain[chain.length - 2] : chain[1];\n            if (geo.pointsCollinear(grow2, grow, pt)) {\n                // grow isn't needed because it's directly between grow2 and pt:\n                // grow2 ---grow---> pt\n                if (addToHead) {\n                    log === null || log === void 0 ? void 0 : log.chainRemoveHead(first_match.index, pt);\n                    chain.shift();\n                }\n                else {\n                    log === null || log === void 0 ? void 0 : log.chainRemoveTail(first_match.index, pt);\n                    chain.pop();\n                }\n                grow = grow2; // old grow is gone... new grow is what grow2 was\n            }\n            if (geo.pointsSame(oppo, pt)) {\n                // we're closing the loop, so remove chain from chains\n                chains.splice(index, 1);\n                if (geo.pointsCollinear(oppo2, oppo, grow)) {\n                    // oppo isn't needed because it's directly between oppo2 and grow:\n                    // oppo2 ---oppo--->grow\n                    if (addToHead) {\n                        log === null || log === void 0 ? void 0 : log.chainRemoveTail(first_match.index, grow);\n                        chain.pop();\n                    }\n                    else {\n                        log === null || log === void 0 ? void 0 : log.chainRemoveHead(first_match.index, grow);\n                        chain.shift();\n                    }\n                }\n                log === null || log === void 0 ? void 0 : log.chainClose(first_match.index);\n                // we have a closed chain!\n                regions.push(chain);\n                continue;\n            }\n            // not closing a loop, so just add it to the apporpriate side\n            if (addToHead) {\n                log === null || log === void 0 ? void 0 : log.chainAddHead(first_match.index, pt);\n                chain.unshift(pt);\n            }\n            else {\n                log === null || log === void 0 ? void 0 : log.chainAddTail(first_match.index, pt);\n                chain.push(pt);\n            }\n            continue;\n        }\n        // otherwise, we matched two chains, so we need to combine those chains together\n        function reverseChain(index) {\n            log === null || log === void 0 ? void 0 : log.chainReverse(index);\n            chains[index].reverse(); // gee, that's easy\n        }\n        function appendChain(index1, index2) {\n            // index1 gets index2 appended to it, and index2 is removed\n            const chain1 = chains[index1];\n            const chain2 = chains[index2];\n            let tail = chain1[chain1.length - 1];\n            const tail2 = chain1[chain1.length - 2];\n            const head = chain2[0];\n            const head2 = chain2[1];\n            if (geo.pointsCollinear(tail2, tail, head)) {\n                // tail isn't needed because it's directly between tail2 and head\n                // tail2 ---tail---> head\n                log === null || log === void 0 ? void 0 : log.chainRemoveTail(index1, tail);\n                chain1.pop();\n                tail = tail2; // old tail is gone... new tail is what tail2 was\n            }\n            if (geo.pointsCollinear(tail, head, head2)) {\n                // head isn't needed because it's directly between tail and head2\n                // tail ---head---> head2\n                log === null || log === void 0 ? void 0 : log.chainRemoveHead(index2, head);\n                chain2.shift();\n            }\n            log === null || log === void 0 ? void 0 : log.chainJoin(index1, index2);\n            chains[index1] = chain1.concat(chain2);\n            chains.splice(index2, 1);\n        }\n        const F = first_match.index;\n        const S = second_match.index;\n        log === null || log === void 0 ? void 0 : log.chainConnect(F, S);\n        const reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed\n        if (first_match.matches_head) {\n            if (second_match.matches_head) {\n                if (reverseF) {\n                    // <<<< F <<<< --- >>>> S >>>>\n                    reverseChain(F);\n                    // >>>> F >>>> --- >>>> S >>>>\n                    appendChain(F, S);\n                }\n                else {\n                    // <<<< F <<<< --- >>>> S >>>>\n                    reverseChain(S);\n                    // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                    // >>>> S >>>> --- >>>> F >>>>\n                    appendChain(S, F);\n                }\n            }\n            else {\n                // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                // >>>> S >>>> --- >>>> F >>>>\n                appendChain(S, F);\n            }\n        }\n        else {\n            if (second_match.matches_head) {\n                // >>>> F >>>> --- >>>> S >>>>\n                appendChain(F, S);\n            }\n            else {\n                if (reverseF) {\n                    // >>>> F >>>> --- <<<< S <<<<\n                    reverseChain(F);\n                    // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                    // >>>> S >>>> --- >>>> F >>>>\n                    appendChain(S, F);\n                }\n                else {\n                    // >>>> F >>>> --- <<<< S <<<<\n                    reverseChain(S);\n                    // >>>> F >>>> --- >>>> S >>>>\n                    appendChain(F, S);\n                }\n            }\n        }\n    }\n    return regions;\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass BuildLog {\n    constructor() {\n        this.list = [];\n        this.nextSegmentId = 0;\n        this.curVert = NaN;\n    }\n    push(type, data) {\n        this.list.push({\n            type,\n            data: JSON.parse(JSON.stringify(data)),\n        });\n    }\n    segmentId() {\n        return this.nextSegmentId++;\n    }\n    checkIntersection(seg1, seg2) {\n        this.push(\"check\", { seg1, seg2 });\n    }\n    segmentChop(seg, p) {\n        this.push(\"div_seg\", { seg, p });\n        this.push(\"chop\", { seg, p });\n    }\n    statusRemove(seg) {\n        this.push(\"pop_seg\", { seg });\n    }\n    segmentUpdate(seg) {\n        this.push(\"seg_update\", { seg });\n    }\n    segmentNew(seg, primary) {\n        this.push(\"new_seg\", { seg, primary });\n    }\n    tempStatus(seg, above, below) {\n        this.push(\"temp_status\", { seg, above, below });\n    }\n    rewind(seg) {\n        this.push(\"rewind\", { seg });\n    }\n    status(seg, above, below) {\n        this.push(\"status\", { seg, above, below });\n    }\n    vert(x) {\n        if (x !== this.curVert) {\n            this.push(\"vert\", { x });\n            this.curVert = x;\n        }\n    }\n    selected(segs) {\n        this.push(\"selected\", { segs });\n    }\n    chainStart(seg) {\n        this.push(\"chain_start\", { seg });\n    }\n    chainRemoveHead(index, p) {\n        this.push(\"chain_rem_head\", { index, p });\n    }\n    chainRemoveTail(index, p) {\n        this.push(\"chain_rem_tail\", { index, p });\n    }\n    chainNew(p1, p2) {\n        this.push(\"chain_new\", { p1, p2 });\n    }\n    chainMatch(index) {\n        this.push(\"chain_match\", { index });\n    }\n    chainClose(index) {\n        this.push(\"chain_close\", { index });\n    }\n    chainAddHead(index, p) {\n        this.push(\"chain_add_head\", { index, p });\n    }\n    chainAddTail(index, p) {\n        this.push(\"chain_add_tail\", { index, p });\n    }\n    chainConnect(index1, index2) {\n        this.push(\"chain_con\", { index1, index2 });\n    }\n    chainReverse(index) {\n        this.push(\"chain_rev\", { index });\n    }\n    chainJoin(index1, index2) {\n        this.push(\"chain_join\", { index1, index2 });\n    }\n    done() {\n        this.push(\"done\", null);\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.fun\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass PolyBool {\n    constructor(geo) {\n        this.log = null;\n        this.geo = geo;\n    }\n    buildLog(enable) {\n        var _a;\n        this.log = enable ? new BuildLog() : null;\n        return (_a = this.log) === null || _a === void 0 ? void 0 : _a.list;\n    }\n    segments(poly) {\n        const i = new Intersecter(true, this.geo, this.log);\n        for (const region of poly.regions) {\n            i.addRegion(region);\n        }\n        return {\n            segments: i.calculate(poly.inverted, false),\n            inverted: poly.inverted,\n        };\n    }\n    combine(segments1, segments2) {\n        const i = new Intersecter(false, this.geo, this.log);\n        for (const seg of segments1.segments) {\n            i.addSegment(new Segment(seg.start, seg.end, seg, this.log), true);\n        }\n        for (const seg of segments2.segments) {\n            i.addSegment(new Segment(seg.start, seg.end, seg, this.log), false);\n        }\n        return {\n            combined: i.calculate(segments1.inverted, segments2.inverted),\n            inverted1: segments1.inverted,\n            inverted2: segments2.inverted,\n        };\n    }\n    selectUnion(combined) {\n        return {\n            segments: SegmentSelector.union(combined.combined, this.log),\n            inverted: combined.inverted1 || combined.inverted2,\n        };\n    }\n    selectIntersect(combined) {\n        return {\n            segments: SegmentSelector.intersect(combined.combined, this.log),\n            inverted: combined.inverted1 && combined.inverted2,\n        };\n    }\n    selectDifference(combined) {\n        return {\n            segments: SegmentSelector.difference(combined.combined, this.log),\n            inverted: combined.inverted1 && !combined.inverted2,\n        };\n    }\n    selectDifferenceRev(combined) {\n        return {\n            segments: SegmentSelector.differenceRev(combined.combined, this.log),\n            inverted: !combined.inverted1 && combined.inverted2,\n        };\n    }\n    selectXor(combined) {\n        return {\n            segments: SegmentSelector.xor(combined.combined, this.log),\n            inverted: combined.inverted1 !== combined.inverted2,\n        };\n    }\n    polygon(segments) {\n        return {\n            regions: SegmentChainer(segments.segments, this.geo, this.log),\n            inverted: segments.inverted,\n        };\n    }\n    // helper functions for common operations\n    union(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectUnion(comb);\n        return this.polygon(seg3);\n    }\n    intersect(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectIntersect(comb);\n        return this.polygon(seg3);\n    }\n    difference(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectDifference(comb);\n        return this.polygon(seg3);\n    }\n    differenceRev(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectDifferenceRev(comb);\n        return this.polygon(seg3);\n    }\n    xor(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectXor(comb);\n        return this.polygon(seg3);\n    }\n}\nconst polybool = new PolyBool(new GeometryEpsilon());\n\nexport { BuildLog, GeometryEpsilon, Intersecter, PolyBool, Segment, SegmentChainer, SegmentSelector, polybool as default };\n","import polybool from '@velipso/polybool';\r\nimport { PolyBool, GeometryEpsilon, Point } from '@velipso/polybool';\r\nimport { Diagram, DiagramType, polygon, curve, empty, diagram_combine } from './diagram.js';\r\nimport { V2 } from './vector.js';\r\n\r\ntype PolyBoolPoly = {\r\n    regions: Point[][];\r\n    inverted: boolean;\r\n}\r\nfunction dg_to_polybool(d : Diagram) : PolyBoolPoly {\r\n    const dg_points = d.path?.points ?? [];\r\n    const points = dg_points.map(p => [p.x, p.y] as Point);\r\n    return {\r\n        regions: [points],\r\n        inverted: false\r\n    };\r\n}\r\n\r\nfunction polybool_to_dg(poly : PolyBoolPoly) : Diagram {\r\n    const diagrams_per_region = poly.regions.map(region => {\r\n        const dg_points = region.map(p => V2(p[0], p[1]));\r\n        return polygon(dg_points);\r\n    });\r\n    if (diagrams_per_region.length < 1){\r\n        return empty();\r\n    } else if (diagrams_per_region.length == 1){\r\n        return diagrams_per_region[0];\r\n    } else {\r\n        return diagram_combine(...diagrams_per_region);\r\n    }\r\n}\r\n\r\n/*\r\n * get the union of two polygons\r\n * @param d1 a Polygon Diagram\r\n * @param d2 a Polygon Diagram\r\n * @tolerance the tolerance for the operation (default 1e-10)\r\n * @returns a Polygon that is the union of d1 and d2\r\n*/\r\nexport function union(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\r\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\r\n    const shape1 = dg_to_polybool(d1);\r\n    const shape2 = dg_to_polybool(d2);\r\n    const result = pol.union(shape1, shape2);\r\n    return polybool_to_dg(result);\r\n}\r\n\r\n/*\r\n * get the difference of two polygons (d1 - d2)\r\n * @param d1 a Polygon Diagram\r\n * @param d2 a Polygon Diagram\r\n * @tolerance the tolerance for the operation (default 1e-10)\r\n * @returns a Polygon that is the difference of d1 and d2\r\n*/\r\nexport function difference(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\r\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\r\n    const shape1 = dg_to_polybool(d1);\r\n    const shape2 = dg_to_polybool(d2);\r\n    const result = pol.difference(shape1, shape2);\r\n    return polybool_to_dg(result);\r\n}\r\n\r\n/*\r\n * get the intersection of two polygons\r\n * @param d1 a Polygon Diagram\r\n * @param d2 a Polygon Diagram\r\n * @param tolerance the tolerance for the operation (default 1e-10)\r\n * @returns a Polygon that is the intersection of d1 and d2\r\n*/\r\nexport function intersect(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\r\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\r\n    const shape1 = dg_to_polybool(d1);\r\n    const shape2 = dg_to_polybool(d2);\r\n    const result = pol.intersect(shape1, shape2);\r\n    return polybool_to_dg(result);\r\n}\r\n\r\n/*\r\n * get the xor of two polygons\r\n * @param d1 a Polygon Diagram\r\n * @param d2 a Polygon Diagram\r\n * @param tolerance the tolerance for the operation (default 1e-10)\r\n * @returns a Polygon that is the xor of d1 and d2\r\n*/\r\nexport function xor(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\r\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\r\n    const shape1 = dg_to_polybool(d1);\r\n    const shape2 = dg_to_polybool(d2);\r\n    const result = pol.xor(shape1, shape2);\r\n    return polybool_to_dg(result);\r\n}\r\n","\r\n\r\nexport module string_filter  {\r\n    export function outer_shadow(\r\n        dx: number, dy: number, radius: number, stdev: number, color: string, \r\n        id: string='outer-shadow',\r\n        width: number, height: number,\r\n        scale_factor: number=1\r\n    ){\r\n        const x = (width - 1) / 2;\r\n        const y = (height - 1)/2;\r\n        return `\r\n        <filter id=\"${id}\" x=\"-${x * 100}%\" y=\"-${y * 100}%\" width=\"${width * 100}%\" height=\"${height * 100}%\">\r\n            <feMorphology operator=\"dilate\" radius=\"${radius * scale_factor}\" in=\"SourceAlpha\" result=\"dilated\" />\r\n            <feGaussianBlur in=\"dilated\" stdDeviation=\"${stdev * scale_factor}\" />\r\n            <feOffset dx=\"${dx * scale_factor}\" dy=\"${dy * scale_factor}\" result=\"offsetblur\" />\r\n            <feFlood flood-color=\"${color}\" result=\"colorblur\"/>\r\n            <feComposite in=\"colorblur\" in2=\"offsetblur\" operator=\"in\" result=\"shadow\" />\r\n            <feComposite in=\"shadow\" in2=\"SourceAlpha\" operator=\"out\" result=\"clipped-shadow\"/>\r\n        </filter>\r\n        `\r\n    }\r\n}\r\n","import { Diagram, line, curve, diagram_combine } from '../diagram.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\nimport { linspace, range_inc } from '../utils.js';\r\nimport { arrow1, arrow2, textvar } from '../shapes.js'\r\nimport { TAG } from '../tag_names.js';\r\n\r\n/**\r\n * Options for axes\r\n * Since axes, plot, etc. are separate objects.\r\n * Axes options is used so that it's easier to have consistent\r\n * setting for multiple objects.\r\n */\r\nexport type axes_options = {\r\n    xrange    : [number, number],\r\n    yrange    : [number, number],\r\n    bbox?     : [Vector2, Vector2],\r\n    xticks?   : number[],\r\n    yticks?   : number[],\r\n    n_sample? : number,\r\n    ticksize  : number,\r\n    headsize  : number,\r\n    tick_label_offset? : number,\r\n}\r\n\r\nexport let default_axes_options : axes_options = {\r\n    // bbox   : [V2(-100,-100), V2(100,100)],\r\n    bbox     : undefined,\r\n    xrange   : [-2, 2],\r\n    yrange   : [-2, 2],\r\n    xticks   : undefined,\r\n    yticks   : undefined,\r\n    n_sample : 100,\r\n    ticksize : 0.1,\r\n    headsize : 0.05,\r\n    tick_label_offset : 0,\r\n}\r\n\r\nexport function axes_transform(axes_options? : Partial<axes_options>) : (v : Vector2) => Vector2 {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let [lowerleft, upperright] = opt.bbox;\r\n    let [xmin, xmax] = opt.xrange;\r\n    let [ymin, ymax] = opt.yrange;\r\n\r\n    return function(v : Vector2) : Vector2 {\r\n        let x = lowerleft.x + (v.x-xmin)/(xmax-xmin)*(upperright.x-lowerleft.x);\r\n        let y = lowerleft.y + (v.y-ymin)/(ymax-ymin)*(upperright.y-lowerleft.y);\r\n        return V2(x,y);\r\n    }\r\n}\r\nexport let ax = axes_transform\r\n\r\n\r\n/**\r\n * Draw xy axes without ticks\r\n * @param axes_options options for the axes\r\n * example: opt = {\r\n *    bbox   : [V2(-100,-100), V2(100,100)],\r\n * }\r\n * @returns a Diagram object\r\n */\r\nexport function axes_empty(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let [lowerleft, upperright] = opt.bbox;\r\n    // get the intersection point\r\n    let xorigin = lowerleft.x + (upperright.x-lowerleft.x)/(opt.xrange[1]-opt.xrange[0])*(0-opt.xrange[0]);\r\n    let yorigin = lowerleft.y + (upperright.y-lowerleft.y)/(opt.yrange[1]-opt.yrange[0])*(0-opt.yrange[0]);\r\n\r\n    let xaxis = arrow2(V2(lowerleft.x,yorigin), V2(upperright.x,yorigin), opt.headsize).append_tags(TAG.GRAPH_AXIS);\r\n    let yaxis = arrow2(V2(xorigin,lowerleft.y), V2(xorigin,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\r\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\r\n    // return xaxis;\r\n}\r\n\r\n/**\r\n * Draw xy corner axes without ticks\r\n * @param axes_options options for the axes\r\n * example: opt = {\r\n *    bbox   : [V2(-100,-100), V2(100,100)],\r\n * }\r\n * @returns a Diagram object\r\n */\r\nexport function axes_corner_empty(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let [lowerleft, upperright] = opt.bbox;\r\n    // get the intersection point\r\n\r\n    let xaxis = arrow1(lowerleft, V2(upperright.x,lowerleft.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\r\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\r\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\r\n    // return xaxis;\r\n}\r\n\r\n/**\r\n * Draw xy corner axes without ticks and with break mark in x axis\r\n * @param axes_options options for the axes\r\n */\r\nexport function axes_corner_empty_xbreak(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let [lowerleft, upperright] = opt.bbox;\r\n    // get the intersection point\r\n\r\n    let xbreak_ysize_ = opt.ticksize * 2;\r\n\r\n    if (opt.xticks == undefined) {\r\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\r\n        opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\r\n    }\r\n    let xbreak_xsize = (opt.xticks![1] - opt.xticks![0])/2;\r\n    let xbreak_xpos  = opt.xticks![0] - xbreak_xsize;\r\n    let trans_f = axes_transform(opt);\r\n\r\n    // suffix _ means in the transformed coordinate\r\n    let xbreak_pleft_  = trans_f(V2(xbreak_xpos - xbreak_xsize/2,0));\r\n    let xbreak_pright_ = trans_f(V2(xbreak_xpos + xbreak_xsize/2,0));\r\n    let xbreak_xsize_  = xbreak_pright_.x - xbreak_pleft_.x;\r\n    let xbreak_pbottom_= xbreak_pleft_.add(V2(xbreak_xsize_*1/3, -xbreak_ysize_/2));\r\n    let xbreak_ptop_   = xbreak_pleft_.add(V2(xbreak_xsize_*2/3, xbreak_ysize_/2));\r\n    let xbreak_curve   = curve([xbreak_pleft_, xbreak_pbottom_, xbreak_ptop_, xbreak_pright_]);\r\n\r\n    let xaxis_left = line(lowerleft, xbreak_pleft_);\r\n    let xaxis_right = arrow1(xbreak_pright_, V2(upperright.x,lowerleft.y), opt.headsize);\r\n    let xaxis = diagram_combine(xaxis_left, xbreak_curve, xaxis_right).append_tags(TAG.GRAPH_AXIS);\r\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\r\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\r\n}\r\n\r\n/**\r\n * Create a single tick mark in the x axis\r\n * @param x x coordinate of the tick mark\r\n * @param y y coordinate of the tick mark\r\n * @param height height of the tick mark\r\n */\r\nexport function xtickmark_empty(x : number, y : number, axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let height = opt.ticksize;\r\n    let pos = axes_transform(opt)(V2(x,y));\r\n    return line(V2(pos.x,pos.y+height/2), V2(pos.x,pos.y-height/2))\r\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\r\n}\r\n\r\nexport function xtickmark(x : number, y : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\r\n    let tick = xtickmark_empty(x, y, axes_options);\r\n    let label = textvar(str).move_origin_text(\"top-center\").translate(tick.get_anchor(\"bottom-center\"))\r\n                .translate(V2(0, -(axes_options?.tick_label_offset || 0)))\r\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\r\n    return diagram_combine(tick, label);\r\n}\r\n\r\n/**\r\n * Create a single tick mark in the y axis\r\n * @param y y coordinate of the tick mark\r\n * @param x x coordinate of the tick mark\r\n * @param height height of the tick mark\r\n */\r\nexport function ytickmark_empty(y : number, x : number, axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let height = opt.ticksize;\r\n    let pos = axes_transform(opt)(V2(x,y));\r\n    return line(V2(pos.x+height/2,pos.y), V2(pos.x-height/2,pos.y))\r\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\r\n}\r\nexport function ytickmark(y : number, x : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\r\n    let tick = ytickmark_empty(y, x, axes_options);\r\n    let label = textvar(str).move_origin_text(\"center-right\").translate(tick.get_anchor(\"center-left\"))\r\n                .translate(V2(-(axes_options?.tick_label_offset || 0), 0))\r\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\r\n    return diagram_combine(tick, label);\r\n}\r\n\r\n// ======= BEGIN utility to calculate ticks\r\n\r\n/// TODO: find a smarter way to calculate this\r\nfunction tweak_interval(interval: number) : number {\r\n  if (0.1 < interval && interval < 2) return 1;\r\n  return interval;\r\n}\r\nfunction get_tick_interval(min : number, max : number) : number {\r\n    let range = max-min;\r\n    let range_order = Math.floor(Math.log10(range));\r\n    let interval_to_try = [0.1, 0.15, 0.2, 0.5, 1.0].map(x => x*Math.pow(10,range_order));\r\n    let tick_counts = interval_to_try.map(x => Math.floor(range/x));\r\n    // choose the interval so that the number of ticks is between the biggest one but less than 10\r\n    for (let i = 0; i < tick_counts.length; i++) {\r\n        if (tick_counts[i] <= 10) {\r\n            return tweak_interval(interval_to_try[i]);\r\n        }\r\n    }\r\n    return tweak_interval(interval_to_try.slice(-1)[0]);\r\n}\r\n\r\nfunction get_tick_numbers_range(min : number, max : number) : number[] {\r\n    let interval = get_tick_interval(min, max);\r\n    // round min and max to the nearest interval\r\n    let new_min = Math.round(min/interval)*interval;\r\n    let new_max = Math.round(max/interval)*interval;\r\n    let new_count = Math.round((new_max-new_min)/interval);\r\n    let l = range_inc(0, new_count).map(x => new_min + x*interval);\r\n    // round l to the nearest interval\r\n    let interval_prec = -Math.floor(Math.log10(interval)-1);\r\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\r\n    return l;\r\n}\r\nfunction get_tick_numbers_aroundzero(neg : number, pos : number, nozero : boolean = true) : number[] {\r\n    if (neg > 0) throw new Error('neg must be negative');\r\n    if (pos < 0) throw new Error('pos must be positive');\r\n    let magnitude = Math.max(-neg, pos);\r\n    let interval = get_tick_interval(-magnitude, magnitude);\r\n\r\n    // round min and max to the nearest interval\r\n    let new_min = Math.ceil(neg/interval)*interval;\r\n    let new_max = Math.floor(pos/interval)*interval;\r\n    let new_count = Math.floor((new_max-new_min)/interval);\r\n\r\n    let l = linspace(new_min, new_max, new_count+1);\r\n    // round l to the nearest interval\r\n    let interval_prec = -Math.floor(Math.log10(interval));\r\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\r\n\r\n    if (nozero){\r\n        return l.filter(x => x != 0);\r\n    }else{\r\n        return l;\r\n    }\r\n}\r\nexport function get_tick_numbers(min : number, max : number, exclude_zero : boolean = true) : number[] {\r\n    if (exclude_zero && min < 0 && max > 0) {\r\n        return get_tick_numbers_aroundzero(min, max);\r\n    } else {\r\n        return get_tick_numbers_range(min, max);\r\n    }\r\n}\r\n\r\n// ======= END utility to calculate ticks\r\n\r\nexport function xticks(axes_options : Partial<axes_options>, y : number = 0, empty = false) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.xticks == undefined) {\r\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], y == 0);\r\n    }\r\n\r\n    // remove ticks outside of the range\r\n    // opt.xticks = opt.xticks.filter(x => x >= opt.xrange[0] && x <= opt.xrange[1]);\r\n    opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\r\n\r\n    let xticks_diagrams = empty ? \r\n        opt.xticks.map(x => xtickmark_empty(x, y, opt)) :\r\n        opt.xticks.map(x => xtickmark(x, y, x.toString(), opt));\r\n    return diagram_combine(...xticks_diagrams);\r\n}\r\nexport function yticks(axes_options : Partial<axes_options>, x : number = 0, empty = false) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.yticks == undefined) {\r\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], x == 0);\r\n    }\r\n\r\n    // remove ticks outside of the range\r\n    // opt.yticks = opt.yticks.filter(y => y >= opt.yrange[0] && y <= opt.yrange[1]);\r\n    opt.yticks = opt.yticks.filter(y => y > opt.yrange[0] && y < opt.yrange[1]);\r\n\r\n    let yticks_diagrams = empty ? \r\n        opt.yticks.map(y => ytickmark_empty(y, x, opt)) :\r\n        opt.yticks.map(y => ytickmark(y, x, y.toString(), opt));\r\n    return diagram_combine(...yticks_diagrams);\r\n}\r\n\r\n\r\n/**\r\n * Draw xy corner axes with ticks\r\n * @param axes_options options for the axes\r\n */\r\nexport function xycorneraxes(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let xmin = opt.xrange[0];\r\n    let ymin = opt.yrange[0];\r\n    return diagram_combine(axes_corner_empty(opt), xticks(opt, ymin), yticks(opt, xmin));\r\n}\r\n\r\n/**\r\n * Draw xy corner axes with ticks and break mark in x axis\r\n * @param axes_options options for the axes\r\n */\r\nexport function xycorneraxes_xbreak(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let xmin = opt.xrange[0];\r\n    let ymin = opt.yrange[0];\r\n    return diagram_combine(axes_corner_empty_xbreak(opt), xticks(opt, ymin), yticks(opt, xmin));\r\n}\r\n\r\n\r\n/**\r\n * Draw xy axes with ticks\r\n * @param axes_options options for the axes\r\n */\r\nexport function xyaxes(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    return diagram_combine(axes_empty(opt), xticks(opt), yticks(opt));\r\n}\r\n\r\n/**\r\n * Draw x axis with ticks\r\n * @param axes_options options for the axis\r\n */\r\nexport function xaxis(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let ax_origin = axes_transform(opt)(V2(0,0));\r\n    let xaxis = arrow2(V2(opt.bbox[0].x, ax_origin.y), V2(opt.bbox[1].x, ax_origin.y), opt.headsize)\r\n        .append_tags(TAG.GRAPH_AXIS);\r\n    let xtickmarks = xticks(opt, 0);\r\n    return diagram_combine(xaxis, xtickmarks);\r\n}\r\n\r\n/**\r\n * Draw y axis with ticks\r\n * @param axes_options options for the axis\r\n */\r\nexport function yaxis(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.bbox == undefined) {\r\n        // get values from xrange and yrange\r\n        let [xmin, xmax] = opt.xrange;\r\n        let [ymin, ymax] = opt.yrange;\r\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\r\n    }\r\n\r\n    let ax_origin = axes_transform(opt)(V2(0,0));\r\n    let yaxis = arrow2(V2(ax_origin.x, opt.bbox[0].y), V2(ax_origin.x, opt.bbox[1].y), opt.headsize)\r\n        .append_tags(TAG.GRAPH_AXIS);\r\n    let ytickmarks = yticks(opt, 0);\r\n    return diagram_combine(yaxis, ytickmarks);\r\n}\r\n\r\nexport function ygrid(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.xticks == undefined) {\r\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\r\n    }\r\n\r\n    let ygrid_diagrams = opt.xticks.map(x => \r\n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\r\n    );\r\n    return diagram_combine(...ygrid_diagrams).append_tags(TAG.GRAPH_GRID);\r\n}\r\n\r\nexport function xgrid(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.yticks == undefined) {\r\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\r\n    }\r\n\r\n    let xgrid_diagrams = opt.yticks.map(y =>\r\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\r\n    );\r\n    return diagram_combine(...xgrid_diagrams).append_tags(TAG.GRAPH_GRID);\r\n}\r\n\r\n//  TODO: add xticks and ytiks as argument\r\nexport function xygrid(axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    if (opt.xticks == undefined) {\r\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\r\n    }\r\n    if (opt.yticks == undefined) {\r\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\r\n    }\r\n\r\n    let xgrid_diagrams = opt.xticks.map(x => \r\n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\r\n    );\r\n    let ygrid_diagrams = opt.yticks.map(y =>\r\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\r\n    );\r\n    return diagram_combine(...xgrid_diagrams, ...ygrid_diagrams);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// TODO : \r\n// export function axes(axes_options? : Partial<axes_options>) : Diagram {\r\n//     let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n// }\r\n\r\n/**\r\n * Plot a curve given a list of points\r\n * @param data list of points\r\n * @param axes_options options for the axes\r\n * example: opt = {\r\n *  bbox   : [V2(-100,-100), V2(100,100)],\r\n *  xrange : [-2, 2],\r\n *  yrange : [-2, 2],\r\n * }\r\n */\r\nexport function plotv(data : Vector2[], axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let [xmin, xmax] = opt.xrange;\r\n    let [ymin, ymax] = opt.yrange;\r\n\r\n    // split data into segments that are within the range\r\n    let segments : Vector2[][] = [];\r\n    let current_segment : Vector2[] = [];\r\n    for (let i=0; i < data.length; i++) {\r\n        let p = data[i];\r\n        let is_inside = (p.x >= xmin && p.x <= xmax && p.y >= ymin && p.y <= ymax);\r\n        if (!is_inside) {\r\n            if (current_segment.length > 1) segments.push(current_segment);\r\n            current_segment = [];\r\n        } else {\r\n            current_segment.push(p);\r\n        }\r\n    }\r\n    if (current_segment.length > 1) segments.push(current_segment);\r\n\r\n    let d : Diagram;\r\n    // create separate paths for each segment\r\n    let path_diagrams = segments.map(segment => curve(segment));\r\n    if (path_diagrams.length == 1){\r\n        d = path_diagrams[0];\r\n    } else {\r\n        d = diagram_combine(...path_diagrams).stroke('black').fill('none');\r\n    }\r\n\r\n    return d.transform(axes_transform(opt));\r\n}\r\n\r\n/**\r\n * Plot a curve given xdata and ydata\r\n * @param xdata x coordinates of the data\r\n * @param ydata y coordinates of the data\r\n * @param axes_options options for the axes\r\n * example: opt = {\r\n *   bbox   : [V2(-100,-100), V2(100,100)],\r\n *   xrange : [-2, 2],\r\n *   yrange : [-2, 2],\r\n * }\r\n */\r\nexport function plot(xdata : number[], ydata : number[], axes_options? : Partial<axes_options>) : Diagram {\r\n    if (xdata.length != ydata.length) throw new Error('xdata and ydata must have the same length');\r\n    let vdata = xdata.map((x,i) => V2(x,ydata[i]));\r\n    return plotv(vdata, axes_options);\r\n}\r\n\r\n/**\r\n * Plot a function\r\n * @param f function to plot\r\n * @param n number of points to plot\r\n * @param axes_options options for the axes\r\n */\r\nexport function plotf(f : (x:number)=>number, axes_options? : Partial<axes_options>) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n    let xdata = linspace(...opt.xrange, opt.n_sample);\r\n    let vdata = xdata.map(x => V2(x,f(x)));\r\n    return plotv(vdata, axes_options);\r\n}\r\n\r\nexport function under_curvef(f : (x:number)=>number, x_start : number, x_end : number,  axes_options? : Partial<axes_options> ) : Diagram {\r\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\r\n\r\n    let new_opt = {...opt}; // copy opt\r\n    new_opt.xrange = [x_start, x_end];\r\n    new_opt.bbox = undefined;\r\n\r\n    // draw plot from x_start to x_end\r\n    let fplot = plotf(f, new_opt);\r\n    let area_under = fplot.add_points([V2(x_end,0), V2(x_start,0)]).to_polygon();\r\n    return area_under.transform(axes_transform(opt));\r\n}\r\n","import { Diagram, line, diagram_combine, curve } from '../diagram.js';\r\nimport { arrow, textvar, arc } from '../shapes.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\n\r\n/**\r\n * Create an annotation vector\r\n * @param v vector to be annotated\r\n * @param str string to be annotated (will be converted to mathematical italic)\r\n * if you don't want to convert to mathematical italic, use annotation.vector_text\r\n * @param arrow_head_size size of the arrow head\r\n * @param text_offset position offset of the text\r\n */\r\nexport function vector(v : Vector2, str? : string, text_offset? : Vector2, arrow_head_size? : number) : Diagram {\r\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\r\n    let vec = arrow(v, arrow_head_size);\r\n    if (str == \"\" || str == undefined){ return vec; } // if str is empty, return only the vector\r\n\r\n    let txt = textvar(str).position(v.add(text_offset));\r\n    return diagram_combine(vec, txt);\r\n}\r\n\r\n/**\r\n * Create an annotation for angle\r\n * @param p three points to define the angle\r\n * @param str string to be annotated (will be converted to mathematical italic)\r\n * @param radius radius of the arc\r\n * @param text_offset position offset of the text\r\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\r\n * if given as a vector, the text will be placed at the given position offset\r\n */\r\nexport function angle(p : [Vector2, Vector2, Vector2], \r\n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\r\n) : Diagram {\r\n\r\n    let [p1, p2, p3] = p;\r\n    let va = p1.sub(p2);\r\n    let vb = p3.sub(p2);\r\n\r\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\r\n    if (typeof text_offset == \"number\"){ \r\n        let vd = va.normalize().add(vb.normalize()).normalize().scale(text_offset);\r\n        text_offset = vd;\r\n    } \r\n\r\n    let angle_a = va.angle();\r\n    let angle_b = vb.angle();\r\n    // angle_b must be larger than angle_a\r\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\r\n\r\n    let angle_arc = arc(radius, angle_b-angle_a).rotate(angle_a)\r\n        .add_points([V2(0,0)]).to_polygon();\r\n    if (str == \"\" || str == undefined){ return angle_arc.position(p2); } // if str is empty, return only the arc\r\n\r\n    let angle_text = textvar(str)\r\n        .translate(text_offset);\r\n\r\n    return diagram_combine(angle_arc, angle_text).position(p2);\r\n}\r\n\r\n/**\r\n * Create an annotation for angle (always be the smaller angle)\r\n * @param p three points to define the angle\r\n * @param str string to be annotated (will be converted to mathematical italic)\r\n * @param radius radius of the arc\r\n * @param text_offset position offset of the text\r\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\r\n * if given as a vector, the text will be placed at the given position offset\r\n */\r\nexport function angle_smaller(p : [Vector2, Vector2, Vector2],\r\n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\r\n) : Diagram {\r\n\r\n    let [p1, p2, p3] = p;\r\n    let va = p1.sub(p2);\r\n    let vb = p3.sub(p2);\r\n\r\n    let angle_a = va.angle();\r\n    let angle_b = vb.angle();\r\n    // angle_b must be larger than angle_a\r\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\r\n    let dangle = angle_b - angle_a;\r\n\r\n\r\n    // if dangle is larger than 180 degree, swap the two vectors\r\n    let ps : typeof p = dangle > Math.PI ? [p3, p2, p1] : [p1, p2, p3];\r\n    return angle(ps, str, radius, text_offset);\r\n}\r\n\r\n/**\r\n * Create an annotation for right angle\r\n * make sure the angle is 90 degree\r\n * @param p three points to define the angle\r\n * @param size size of the square\r\n */\r\nexport function right_angle(p : [Vector2, Vector2, Vector2], size : number = 1) : Diagram {\r\n    let [p1, p2, p3] = p;\r\n    let p1_ = p1.sub(p2).normalize().scale(size).add(p2);\r\n    let p3_ = p3.sub(p2).normalize().scale(size).add(p2);\r\n    let p2_ = V2(p1_.x, p3_.y);\r\n    return curve([p1_, p2_, p3_]);\r\n}\r\n\r\nexport function length(p1 : Vector2, p2 : Vector2, str : string, offset : number, \r\n    tablength? : number, textoffset? : number, tabsymmetric : boolean = true\r\n) : Diagram {\r\n\r\n    // setup defaults\r\n    tablength = tablength ?? p2.sub(p1).length()/20;\r\n    textoffset = textoffset ?? offset * 2;\r\n\r\n    let v = p1.equals(p2) ? V2(0,0) : p2.sub(p1).normalize();\r\n    let n = V2(v.y, -v.x);\r\n    let pA = p1.add(n.scale(offset));\r\n    let pB = p2.add(n.scale(offset));\r\n\r\n    let tabA = tabsymmetric ?\r\n        line(pA.sub(n.scale(tablength/2)), pA.add(n.scale(tablength/2))) :\r\n        line(pA, pA.sub(n.scale(tablength)));\r\n    let tabB = tabsymmetric ?\r\n        line(pB.sub(n.scale(tablength/2)), pB.add(n.scale(tablength/2))) :\r\n        line(pB, pB.sub(n.scale(tablength)));\r\n    let lineAB = line(pA, pB);\r\n    let lines = diagram_combine(lineAB, tabA, tabB);\r\n\r\n    let pmid = p1.add(p2).scale(0.5);\r\n    let label = textvar(str).position(pmid.add(n.scale(textoffset)));\r\n\r\n    return diagram_combine(lines, label);\r\n}\r\n\r\n/**\r\n * Create a congruence mark\r\n * @param p1 start point of the line\r\n * @param p2 end point of the line\r\n * @param count number of marks\r\n * @param size size of the mark\r\n * @param gap gap between the marks\r\n */\r\nexport function congruence_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number) : Diagram {\r\n    let v = p2.sub(p1)\r\n    let n_angle = Math.atan2(v.x, -v.y);\r\n    let p_mid = p1.add(p2).scale(0.5);\r\n    gap = gap ?? size/2;\r\n\r\n    let marks = [];\r\n    for (let i = 0; i < count; i++){\r\n        let l = line(V2(-size/2, i*gap), V2(size/2, i*gap));\r\n        marks.push(l)\r\n    }\r\n    let dg_marks = diagram_combine(...marks);\r\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\r\n}\r\n\r\n/**\r\n * Create a parallel mark\r\n * @param p1 start point of the line\r\n * @param p2 end point of the line\r\n * @param count number of marks\r\n * @param size size of the mark\r\n * @param gap gap between the marks\r\n * @param arrow_angle angle of the arrow\r\n */\r\nexport function parallel_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number, arrow_angle : number = 0.5) : Diagram {\r\n    let v = p2.sub(p1)\r\n    let n_angle = Math.atan2(v.x, -v.y);\r\n    let p_mid = p1.add(p2).scale(0.5);\r\n    gap = gap ?? size/2;\r\n\r\n    let marks = [];\r\n    let dy = size/2 * Math.cos(arrow_angle);\r\n    for (let i = 0; i < count; i++){\r\n        let p0 = V2(0, i*gap - dy);\r\n        let l1 = line(V2(-size/2, i*gap), p0)\r\n        let l2 = line(V2(size/2, i*gap), p0)\r\n        marks.push(l1.combine(l2));\r\n    }\r\n    let dg_marks = diagram_combine(...marks);\r\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\r\n}\r\n","import { Diagram, polygon, curve } from '../diagram.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\nimport { linspace } from '../utils.js';\r\n\r\n/**\r\n * Create an inclined plane.\r\n * @param length The length of the inclined plane.\r\n * @param angle The angle of the inclined plane.\r\n * @returns A diagram of the inclined plane.\r\n */\r\nexport function inclined_plane(length : number, angle : number) : Diagram {\r\n    return polygon([V2(0,0), V2(length, length*Math.tan(angle)), V2(length,0)]);\r\n}\r\n\r\n/**\r\n * Create a spring between two points.\r\n * @param p1 The first point.\r\n * @param p2 The second point.\r\n * @param radius The radius of the spring.\r\n * @param coil_number The number of coils in the spring.\r\n * @param separation_coefficient The coefficient of separation between coils.\r\n * \\* at 0, no coils are overlapping. (there is no max value)\r\n * @param sample_number The number of points to sample in the spring.\r\n * @returns A diagram of the spring.\r\n */\r\nexport function spring(p1 : Vector2, p2 : Vector2, radius : number = 1, coil_number : number = 10,\r\n    separation_coefficient : number = 0.5, sample_number : number = 100) : Diagram {\r\n\r\n    // I got this equation from https://www.reddit.com/r/desmos/comments/i3m3yd/interactive_spring_graphic/\r\n\r\n    let angle  = p2.sub(p1).angle();\r\n    let length = p2.sub(p1).length();\r\n\r\n    // abbrev\r\n    let R = separation_coefficient;\r\n    let n = coil_number;\r\n\r\n    let k = radius/R; // k*R = radius\r\n\r\n    let a = (2 * n + 1) * Math.PI;\r\n    let b = (length - 2*R) / a;\r\n\r\n    let parametric_function = (t : number) => V2(b*t + R - R*Math.cos(t), k*R*Math.sin(t));\r\n    let points = linspace(0, a, sample_number).map(parametric_function);\r\n    return curve(points).rotate(angle).translate(p1);\r\n}\r\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\nimport { rectangle, } from '../shapes.js'\r\nimport { axes_options, yticks, axes_transform } from './shapes_graph.js'\r\n\r\nexport type bar_options = {\r\n    gap : number,\r\n    yrange? : [number, number],\r\n    yticks? : number[],\r\n    bbox? : [Vector2, Vector2],\r\n    ticksize : number,\r\n}\r\n\r\nexport let default_bar_options : bar_options = {\r\n    gap: 0.1,\r\n    ticksize: 0.2,\r\n    bbox: [V2(0,0), V2(10,10)],\r\n}\r\n\r\n\r\nfunction to_ax_options(datavalues : number[], baropt : Partial<bar_options>) : axes_options {\r\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\r\n    let n = datavalues.length;\r\n\r\n    let ymax = Math.max(...datavalues);\r\n    let yrange = opt.yrange ?? [0, ymax];\r\n    let bbox = opt.bbox ?? [V2(0,0), V2(10,ymax)];\r\n\r\n    let ax_opt : axes_options = {\r\n        xrange   : [-1, n],\r\n        yrange   : yrange,\r\n        headsize : 0,\r\n        ticksize : opt.ticksize,\r\n        bbox     : bbox,\r\n    }\r\n    return ax_opt;\r\n}\r\n\r\n/**\r\n * Plot a bar chart\r\n * @param datavalues the data values to plot\r\n * @param bar_options options for the bar chart\r\n * @returns a diagram of the bar chart\r\n */\r\nexport function plot(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n\r\n    let ax_opt = to_ax_options(datavalues, opt);\r\n    let ax_f = axes_transform(ax_opt);\r\n\r\n    let bar_arr = datavalues.map((y,i) => \r\n        rectangle(1.0-opt.gap, y).move_origin('bottom-center')\r\n            .position(V2(Number(i), 0)).transform(ax_f)\r\n    );\r\n    return diagram_combine(...bar_arr);\r\n}\r\n\r\n/**\r\n * x-axes with label for bar chart\r\n * @param datanames the data names\r\n * @param bar_options options for the bar chart\r\n * @returns a diagram of the x-axes\r\n */\r\nexport function xaxes(datanames : string[], bar_options : Partial<bar_options> = {}) : Diagram {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n    let n = datanames.length;\r\n\r\n    let ax_opt = to_ax_options(datanames.map(() => 1), opt);\r\n    let ax_f = axes_transform(ax_opt);\r\n\r\n    let l = line(V2(-1,0), V2(n,0)).transform(ax_f).stroke('gray');\r\n    let label_arr = datanames.map((name,i) => \r\n        text(name).move_origin_text('top-center').position(V2(Number(i), 0)).transform(ax_f)\r\n            .translate(V2(0,-opt.ticksize/2)).textfill('gray')\r\n    );\r\n    return diagram_combine(l, ...label_arr);\r\n}\r\n\r\n/**\r\n * y-axes with label for bar chart\r\n * @param datavalues the data values\r\n * @param bar_options options for the bar chart\r\n */\r\nexport function yaxes(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n\r\n    let ax_opt = to_ax_options(datavalues, opt);\r\n\r\n    let ymax   = ax_opt.yrange[1];\r\n    let yrange = opt.yrange ?? [0, ymax];\r\n\r\n    let ax_f = axes_transform(ax_opt);\r\n\r\n    let l = line(V2(-1,0), V2(-1,yrange[1])).transform(ax_f).stroke('gray');\r\n    return yticks(ax_opt, -1).combine(l);\r\n}\r\n\r\nexport function axes_tansform(datavalues : number[], bar_options : Partial<bar_options> = {}) : (v : Vector2) => Vector2 {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n    let ax_opt = to_ax_options(datavalues, opt);\r\n    return axes_transform(ax_opt);\r\n}\r\n","import { Diagram, diagram_combine } from '../diagram.js';\r\nimport { rectangle_corner } from '../shapes.js';\r\nimport { V2, Vector2 } from '../vector.js';\r\nimport { transpose, expand_directional_value } from '../utils.js';\r\nimport { TAG } from '../tag_names.js';\r\n\r\nenum TableOrientation {\r\n    ROWS    = 'rows',\r\n    COLUMNS = 'columns',\r\n}\r\n\r\nexport type cell_style = { index : [number,number], fill? : string, stroke? : string, strokewidth? : number };\r\n\r\n/**\r\n * Create a table with diagrams inside\r\n * @param diagrams 2D array of diagrams\r\n * @param orientation orientation of the table (default: 'rows')\r\n * can be 'rows' or 'columns'\r\n * @param min_rowsize minimum size of each row\r\n * @param min_colsize minimum size of each column\r\n * @returns a diagram of the table with the diagrams inside\r\n */\r\nexport function table(diagrams : Diagram[][], padding : number | number[] = 0, orientation : TableOrientation = TableOrientation.ROWS, \r\n    min_rowsize : number = 0, min_colsize : number = 0) : Diagram {\r\n    // if the orientation is columns, then we just transpose the rows and columns\r\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\r\n\r\n    const pad = expand_directional_value(padding);\r\n    function f_size(d? : Diagram) : [number, number] {\r\n        if (d == undefined) return [min_colsize, min_rowsize];\r\n        let [bottomleft, topright] = d.bounding_box();\r\n        let width  = topright.x - bottomleft.x + pad[1] + pad[3];\r\n        let height = topright.y - bottomleft.y + pad[0] + pad[2];\r\n        return [width, height];\r\n    }\r\n\r\n    let row_count = diagram_rows.length;\r\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\r\n    let rowsizes : number[] = Array(row_count).fill(min_rowsize);\r\n    let colsizes : number[] = Array(col_count).fill(min_colsize);\r\n    // find the maximum size of each row and column\r\n    for (let r = 0; r < row_count; r++) {\r\n        for (let c = 0; c < col_count; c++) {\r\n            let [w, h] = f_size(diagram_rows[r][c]);\r\n            rowsizes[r] = Math.max(rowsizes[r], h);\r\n            colsizes[c] = Math.max(colsizes[c], w);\r\n        }\r\n    }\r\n\r\n    return fixed_size(diagrams, rowsizes, colsizes, orientation);\r\n}\r\n\r\n/**\r\n * WARNING: Deprecated, use tags instead\r\n * Style the cells of a table\r\n * @param table_diagram a diagram of a table\r\n * @param styles an array of cell styles\r\n * each style has an index of the cell and the style\r\n * e.g. { index : [0,0], fill : 'red', stroke : 'black', strokewidth : 2 }\r\n * not all styles are required\r\n * e.g. { index : [0,0], fill : 'red' }\r\n * @returns a new diagram with the cells styled\r\n */\r\nexport function style_cell(table_diagram : Diagram, styles : cell_style[]) : Diagram {\r\n    let newd = table_diagram.copy();\r\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\r\n        let table_index = newd.children.findIndex(d => d.tags.includes(TAG.TABLE));\r\n        let new_table = style_cell(newd.children[table_index], styles);\r\n        newd.children[table_index] = new_table;\r\n        return newd;\r\n    }\r\n    else if (!table_diagram.tags.includes(TAG.TABLE)) { return table_diagram; }\r\n\r\n    for (let style of styles) {\r\n        let [r, c] = style.index;\r\n        let cell = newd.children[r].children[c];\r\n        if (style.fill) { cell = cell.fill(style.fill); }\r\n        if (style.stroke) { cell = cell.stroke(style.stroke); }\r\n        if (style.strokewidth) { cell = cell.strokewidth(style.strokewidth); }\r\n        newd.children[r].children[c] = cell;\r\n    }\r\n    return newd;\r\n}\r\n\r\n/**\r\n * Create a table with fixed size\r\n * @param diagrams 2D array of diagrams\r\n * @param rowsizes size of each row\r\n * if `rowsizes.length` is less than `diagrams.length`, the last value will be repeated\r\n * e.g. [1,2,3] -> [1,2,3,3,3]\r\n * @param colsizes size of each column\r\n * if `colsizes.length` is less than `diagrams[0].length`, the last value will be repeated\r\n * @param orientation orientation of the table (default: 'rows')\r\n * can be 'rows' or 'columns'\r\n * @returns a diagram of the table with the diagrams inside\r\n */\r\nexport function fixed_size(diagrams : Diagram[][], rowsizes : number[], colsizes : number[]\r\n    , orientation : TableOrientation = TableOrientation.ROWS ) : Diagram \r\n{\r\n    // if the orientation is columns, then we just transpose the rows and columns\r\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\r\n    let row_count = diagram_rows.length;\r\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\r\n\r\n    const empty_map = get_empty_map(diagrams);\r\n    let table = empty_fixed_size(row_count, col_count, rowsizes, colsizes, empty_map);\r\n    let points = get_points(table);\r\n\r\n    let diagram_grid : Diagram[] = [];\r\n    for (let r = 0; r < row_count; r++) {\r\n        for (let c = 0; c < col_count; c++) {\r\n            let d = diagram_rows[r][c];\r\n            if (d == undefined) continue;\r\n            d = d.move_origin('center-center').position(points[r][c])\r\n                .append_tags(TAG.TABLE_CONTENT)\r\n                .append_tags(TAG.ROW_ + r)\r\n                .append_tags(TAG.COL_ + c);\r\n            diagram_grid.push(d);\r\n        }\r\n    }\r\n    let diagram_grid_combined = diagram_combine(...diagram_grid);\r\n    return diagram_combine(table, diagram_grid_combined).append_tags(TAG.CONTAIN_TABLE);\r\n}\r\n\r\nfunction get_empty_map(diagrams : Diagram[][]) : boolean[][] {\r\n    let row_count = diagrams.length;\r\n    let col_count = Math.max(...diagrams.map(row => row.length));\r\n    let empty_indices_map : boolean[][] = Array(row_count).fill(false).map(() => Array(col_count).fill(false));\r\n    for (let r = 0; r < row_count; r++) {\r\n        for (let c = 0; c < col_count; c++) {\r\n            const d = diagrams[r][c];\r\n            if (d == undefined || d?.is_empty?.()) \r\n                empty_indices_map[r][c] = true;\r\n        }\r\n    }\r\n    return empty_indices_map;\r\n}\r\n\r\n/**\r\n * Create an empty table with fixed size\r\n * @param row_count number of rows\r\n * @param col_count number of columns\r\n * @param rowsizes size of each row\r\n * if `rowsizes.length` is less than `row_count`, the last value will be repeated\r\n * e.g. [1,2,3] -> [1,2,3,3,3]\r\n * @param colsizes size of each column\r\n * if `colsizes.length` is less than `col_count`, the last value will be repeated\r\n */\r\nexport function empty_fixed_size(row_count : number, col_count : number, \r\n    rowsizes : number[], colsizes : number[], empty_map : boolean[][]\r\n) : Diagram \r\n{\r\n    while (rowsizes.length < row_count) { rowsizes.push(rowsizes[rowsizes.length-1]); }\r\n    while (colsizes.length < col_count) { colsizes.push(colsizes[colsizes.length-1]); }\r\n\r\n    let rows : Diagram[] = [];\r\n    let y_top = 0;\r\n    for (let r = 0; r < row_count; r++) {\r\n        let y_bot   = y_top - rowsizes[r];\r\n        let x_left = 0;\r\n        let cols : Diagram[] = [];\r\n        for (let c = 0; c < col_count; c++) {\r\n            let x_right = x_left + colsizes[c];\r\n            let x_mid = (x_left + x_right) / 2;\r\n            let y_mid = (y_top + y_bot) / 2;\r\n\r\n            //TODO: draw line instead of recangles\r\n            let rect = rectangle_corner(V2(x_left, y_bot), V2(x_right, y_top)).move_origin(V2(x_mid, y_mid))\r\n                .append_tags(TAG.TABLE_CELL)\r\n                .append_tags(TAG.ROW_ + r)\r\n                .append_tags(TAG.COL_ + c);\r\n            if (empty_map[r][c]) rect = rect.append_tags(TAG.EMPTY_CELL);\r\n            cols.push(rect);\r\n            x_left = x_right;\r\n        }\r\n        rows.push(diagram_combine(...cols));\r\n        y_top = y_bot;\r\n    }\r\n\r\n    return diagram_combine(...rows).append_tags(TAG.TABLE);\r\n}\r\n\r\n/**\r\n * Get the midpoints of the cells from a table diagram\r\n * @param table_diagram a table diagram\r\n * @returns a 2D array of points\r\n * the first index is the row, the second index is the column\r\n */\r\nexport function get_points(table_diagram : Diagram) : Vector2[][] {\r\n    let table_diagram_ = table_diagram;\r\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\r\n        for (let d of table_diagram.children){\r\n            if (d.tags.includes(TAG.TABLE)) {\r\n                table_diagram_ = d;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!table_diagram_.tags.includes(TAG.TABLE)) return [];\r\n\r\n    let rows : Vector2[][] = [];\r\n    for (let row of table_diagram_.children){\r\n        let cols : Vector2[] = [];\r\n        for (let cell of row.children){\r\n            cols.push(cell.origin);\r\n        }\r\n        rows.push(cols);\r\n    }\r\n    return rows;\r\n}\r\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\r\nimport { V2 } from '../vector.js';\r\nimport { arrow2 } from '../shapes.js'\r\nimport { TAG } from '../tag_names.js';\r\n\r\n/**\r\n * Draw an empty axis from xmin to xmax with arrowsize\r\n * @param xmin minimum value of the numberline\r\n * @param xmax maximum value of the numberline\r\n * @param arrowsize the size of the arrowhead\r\n * returns a Diagram\r\n */\r\nexport function axis(xmin : number, xmax : number, arrowsize : number = 1) : Diagram {\r\n    return arrow2(V2(xmin, 0), V2(xmax,0), arrowsize).fill('black').append_tags(TAG.GRAPH_AXIS);\r\n}\r\n\r\n/**\r\n * Draw a numbered ticks for a numberline\r\n * @param xs the values of the ticks\r\n * @param ticksize the size of the ticks\r\n * @param number_offset the offset of the number from the ticks\r\n * returns a Diagram\r\n */\r\nexport function numbered_ticks(xs : number[], ticksize : number, number_offset : number) : Diagram {\r\n    let d_ticks : Diagram[] = [];\r\n    for (let i of xs) {\r\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\r\n        let num  = text(i.toString()).move_origin('top-center').position(V2(i, -ticksize/2 - number_offset))\r\n            .append_tags(TAG.GRAPH_TICK_LABEL);\r\n        d_ticks.push(diagram_combine(tick, num));\r\n    }\r\n    return diagram_combine(...d_ticks);\r\n}\r\n\r\n/**\r\n * Draw ticks for a numberline\r\n * @param xs the values of the ticks\r\n * @param ticksize the size of the ticks\r\n * returns a Diagram\r\n */\r\nexport function ticks(xs : number[], ticksize : number) : Diagram {\r\n    let d_ticks : Diagram[] = [];\r\n    for (let i of xs) {\r\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\r\n        d_ticks.push(tick);\r\n    }\r\n    return diagram_combine(...d_ticks);\r\n}\r\n\r\n/**\r\n * Draw a single tick for a numberline\r\n * @param x the value of the tick\r\n * @param txt the text of the tick\r\n * @param ticksize the size of the tick\r\n * @param text_offset the offset of the text from the tick\r\n * returns a Diagram\r\n */\r\nexport function single_tick(x : number, txt : string, ticksize : number, text_offset : number) : Diagram {\r\n    let tick = line(V2(x, -ticksize/2), V2(x, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\r\n    if (txt == '') return tick;\r\n\r\n    let num  = text(txt).move_origin('top-center').position(V2(x, -ticksize/2 - text_offset))\r\n        .append_tags(TAG.GRAPH_TICK_LABEL);\r\n    return diagram_combine(tick, num);\r\n}\r\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\r\nimport { Vector2, V2 } from '../vector.js';\r\nimport { rectangle, arrow2 } from '../shapes.js'\r\nimport { axes_options, xticks, yticks, axes_transform, xtickmark_empty, ytickmark_empty } from './shapes_graph.js'\r\n\r\nexport type boxplot_options = {\r\n    range? : [number, number],\r\n    ticks? : number[],\r\n    bbox? : [Vector2, Vector2],\r\n    ticksize : number,\r\n    headsize : number,\r\n    orientation : 'x' | 'y',\r\n    tick_label_offset? : number,\r\n}\r\n\r\nexport let default_bar_options : boxplot_options = {\r\n    ticksize: 0.2,\r\n    range : [0,1],\r\n    bbox: [V2(0,0), V2(10,10)],\r\n    orientation: 'x',\r\n    headsize : 0.05,\r\n    tick_label_offset : 0,\r\n}\r\n\r\nexport function to_ax_options(baropt : Partial<boxplot_options>) : axes_options {\r\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\r\n    opt.bbox = opt.bbox ?? [V2(0,0), V2(10,10)]; // just to make sure it is defined\r\n\r\n    if (opt.orientation == 'x') {\r\n        let ax_opt : axes_options = {\r\n            xrange   : opt.range as [number, number],\r\n            yrange   : [opt.bbox[0].y, opt.bbox[1].y],\r\n            xticks   : opt.ticks,\r\n            headsize : opt.headsize,\r\n            ticksize : opt.ticksize,\r\n            bbox     : opt.bbox,\r\n            tick_label_offset : opt.tick_label_offset,\r\n        }\r\n        return ax_opt;\r\n    } else {\r\n        let ax_opt : axes_options = {\r\n            xrange   : [opt.bbox[0].x, opt.bbox[1].x],\r\n            yrange   : opt.range as [number, number],\r\n            yticks   : opt.ticks,\r\n            headsize : opt.headsize,\r\n            ticksize : opt.ticksize,\r\n            bbox     : opt.bbox,\r\n            tick_label_offset : opt.tick_label_offset,\r\n        }\r\n        return ax_opt;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * axis for boxplot\r\n * @param bar_options options for the bar chart\r\n * @returns a diagram of the axes\r\n */\r\nexport function axes(bar_options : Partial<boxplot_options> = {}) : Diagram {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n    let ax_opt = to_ax_options(opt);\r\n    // let ax_f = axes_transform(ax_opt);\r\n\r\n    let [lowerleft, upperright] = opt.bbox as [Vector2, Vector2];\r\n\r\n    if (opt.orientation == 'x') {\r\n        let xaxis = arrow2(V2(lowerleft.x,0), V2(upperright.x,0), opt.headsize);\r\n        let xtickmarks = xticks(ax_opt, 0);\r\n        return diagram_combine(xaxis, xtickmarks).stroke('gray').fill('gray');\r\n    } else {\r\n        let yaxis = arrow2(V2(0,lowerleft.y), V2(0,upperright.y), opt.headsize);\r\n        let ytickmarks = yticks(ax_opt, 0);\r\n        return diagram_combine(yaxis, ytickmarks).stroke('gray').fill('gray');\r\n    }\r\n}\r\n\r\n/**\r\n */\r\nexport function empty_tickmarks(xs: number[], bar_options : Partial<boxplot_options> = {}) : Diagram {\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n    let ax_opt = to_ax_options(opt);\r\n    // let ax_f = axes_transform(ax_opt);\r\n    if (opt.orientation == 'x') {\r\n        ax_opt.xticks = xs;\r\n        return xticks(ax_opt, 0, true);\r\n    } else {\r\n        ax_opt.yticks = xs;\r\n        return yticks(ax_opt, 0, true);\r\n    }\r\n}\r\n\r\n/**\r\n * Plot a boxplot from quartiles\r\n * @param quartiles [Q0, Q1, Q2, Q3, Q4]\r\n * @param pos position of the boxplot\r\n * @param size size of the boxplot\r\n * @param bar_options options for the bar chart\r\n * @returns a diagram of the boxplot\r\n */\r\nexport function plotQ(quartiles : number[], pos : number, size : number, bar_options : Partial<boxplot_options>){\r\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\r\n    let ax_opt = to_ax_options(opt);\r\n    let ax_f = axes_transform(ax_opt);\r\n    let [Q0, Q1, Q2, Q3, Q4] = quartiles;\r\n\r\n    let whisker_size = 0.8 * size;\r\n    if (opt.orientation == 'x') {\r\n        let box = rectangle(Q3-Q1, size).move_origin('center-left').position(V2(Q1, pos)).transform(ax_f);\r\n        let min    = line(V2(Q0, pos - whisker_size/2), V2(Q0, pos + whisker_size/2)).transform(ax_f);\r\n        let max    = line(V2(Q4, pos - whisker_size/2), V2(Q4, pos + whisker_size/2)).transform(ax_f);\r\n        let median = line(V2(Q2, pos - size/2), V2(Q2, pos + size/2)).transform(ax_f);\r\n        let whisker_min = line(V2(Q0, pos), V2(Q1, pos)).transform(ax_f);\r\n        let whisker_max = line(V2(Q3, pos), V2(Q4, pos)).transform(ax_f);\r\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\r\n    } else {\r\n        let box = rectangle(size, Q3-Q1).move_origin('bottom-center').position(V2(pos, Q1)).transform(ax_f);\r\n        let min    = line(V2(pos - whisker_size/2, Q0), V2(pos + whisker_size/2, Q0)).transform(ax_f);\r\n        let max    = line(V2(pos - whisker_size/2, Q4), V2(pos + whisker_size/2, Q4)).transform(ax_f);\r\n        let median = line(V2(pos - size/2, Q2), V2(pos + size/2, Q2)).transform(ax_f);\r\n        let whisker_min = line(V2(pos, Q0), V2(pos, Q1)).transform(ax_f);\r\n        let whisker_max = line(V2(pos, Q3), V2(pos, Q4)).transform(ax_f);\r\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\r\n    }\r\n}\r\n\r\n// TODO: plot boxplot from data\r\n// TODO: plot multiple boxplots at once\r\n","import { Diagram, line as dgline, text, diagram_combine, empty  } from '../diagram.js';\r\nimport { circle, textvar } from '../shapes.js';\r\nimport { V2, Vector2, Vdir } from '../vector.js';\r\n\r\nenum GeoType {\r\n    LINE = 'LINE',\r\n}\r\nexport type GeoCtx = {[key : string] : (GeoObj | Vector2 | number)}\r\nexport interface GeoObj { type : GeoType; }\r\n\r\nexport interface GeoLine extends GeoObj {\r\n    type : GeoType.LINE;\r\n    p : Vector2\r\n    dir : Vector2 // not necessarily a unit vector\r\n}\r\n// TODO : CeoCircle\r\n\r\nexport function intersect(o1 : GeoObj, o2 : GeoObj) : Vector2[] {\r\n    if (o1.type === GeoType.LINE && o2.type === GeoType.LINE) {\r\n        let l1 = o1 as GeoLine;\r\n        let l2 = o2 as GeoLine;\r\n        let p = line_intersection(l1, l2);\r\n        return [p]\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\n/**\r\n * Get a point that is `d` distance away from `p` in the direction of `dir`\r\n * *ideally, point `p` should be in line `l`*\r\n */\r\nexport function point_onLine_atDistance_from(l : GeoLine, d : number, p : Vector2) : Vector2 {\r\n    let dir = l.dir.normalize();\r\n    return p.add(dir.scale(d));\r\n}\r\n\r\n/**\r\n * Get a point\r\n * - that is collinear with `p1` and `p2`\r\n * - that is `len` away from `p2` in the direction away from `p1`\r\n */\r\nexport function point_collinear_extend_length(p1 : Vector2, p2 : Vector2, len : number) : Vector2 {\r\n    let dir = p2.sub(p1).normalize();\r\n    return p2.add(dir.scale(len));\r\n}\r\n\r\n/** Get a point that is `t` fraction of the way from `p1` to `p2` */\r\nexport function point_collinear_fraction(p1 : Vector2, p2 : Vector2, t : number) : Vector2 {\r\n    let dir = p2.sub(p1);\r\n    return p1.add(dir.scale(t));\r\n}\r\n\r\n/** Get a point on line `l` with x-coordinate `x` */\r\nexport function point_onLine_with_x(l : GeoLine, x : number) : Vector2 {\r\n    let m = l.dir.y / l.dir.x;\r\n    let c = l.p.y - m * l.p.x;\r\n    return V2(x, m * x + c);\r\n}\r\n\r\n/** Get a point on line `l` with y-coordinate `y` */\r\nexport function point_onLine_with_y(l : GeoLine, y : number) : Vector2 {\r\n    let m = l.dir.y / l.dir.x;\r\n    let c = l.p.y - m * l.p.x;\r\n    return V2((y - c) / m, y);\r\n}\r\n\r\n\r\n/** Get the intersection point of two lines */\r\nexport function line_intersection(l1 : GeoLine, l2 : GeoLine) : Vector2 {\r\n    let a1 = l1.p; let b1 = l1.p.add(l1.dir);\r\n    let a2 = l2.p; let b2 = l2.p.add(l2.dir);\r\n\r\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\r\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\r\n\r\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\r\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\r\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\r\n    return V2(x, y);\r\n}\r\n\r\n\r\n// Constructing lines\r\nexport function line(p : Vector2, dir : Vector2) : GeoLine {\r\n    return {type:GeoType.LINE, p, dir};\r\n}\r\nexport function line_from_points(p1 : Vector2, p2 : Vector2) : GeoLine {\r\n    return line(p1, p2.sub(p1));\r\n}\r\nexport function line_from_slope(p : Vector2, slope : number) : GeoLine {\r\n    return line(p, V2(1, slope));\r\n}\r\nexport function line_from_angle(p : Vector2, angle : number) : GeoLine {\r\n    return line(p, Vdir(angle));\r\n}\r\n\r\n/** Define a line that is parallel to `l` and passes through `p` */\r\nexport function line_parallel_at_point(l : GeoLine, p : Vector2) : GeoLine {\r\n    return line(p, l.dir);\r\n}\r\n/** Define a line that is perpendicular to `l` and passes through `p` */\r\nexport function line_perpendicular_at_point(l : GeoLine, p : Vector2) : GeoLine {\r\n    return line(p, V2(-l.dir.y, l.dir.x));\r\n}\r\n/** Define a line that has the direction of `l` rotated by `angle` and passes through `p` */\r\nexport function line_rotated_at_point(l : GeoLine, angle : number, p : Vector2) : GeoLine {\r\n    return line(p, l.dir.rotate(angle));\r\n}\r\n\r\nfunction line_intersect_bbox(l : GeoLine, bbox : [Vector2, Vector2]) : Diagram | undefined {\r\n    let [bottom_left, top_right] = bbox;\r\n    let bl = bottom_left;\r\n    let tr = top_right;\r\n    let tl = V2(bl.x, tr.y);\r\n    let br = V2(tr.x, bl.y);\r\n    let intersections = [\r\n        line_intersection(l, line_from_points(tl, tr)),\r\n        line_intersection(l, line_from_points(tr, br)),\r\n        line_intersection(l, line_from_points(br, bl)),\r\n        line_intersection(l, line_from_points(bl, tl)),\r\n    ];\r\n    const tol = 1e-6; // tolerance\r\n    const is_inside_bbox = (p : Vector2) => { \r\n        return p.x >= bl.x - tol && p.x <= tr.x + tol && p.y >= bl.y - tol && p.y <= tr.y + tol;\r\n    }\r\n    let points = intersections.filter(p => is_inside_bbox(p));\r\n    if (points.length <= 1) return undefined;\r\n    return dgline(points[0], points[1]);\r\n}\r\n\r\n// drawing\r\nfunction normalize_padding(padding : number[] | number) : [number, number, number, number] {\r\n    let p = (typeof padding === 'number') ? [padding] : padding;\r\n    switch (p.length) {\r\n        case 0: return [0, 0, 0, 0];\r\n        case 1: return [p[0], p[0], p[0], p[0]];\r\n        case 2: return [p[0], p[1], p[0], p[1]];\r\n        case 3: return [p[0], p[1], p[2], p[1]];\r\n        default: return [p[0], p[1], p[2], p[3]];\r\n    }\r\n}\r\n\r\n/**\r\n * Get a preview diagram of the context\r\n * @param ctx the Geo context (a dictionary of GeoObj and Vector2)\r\n * @param pad padding around the diagram (determine how far away from the defined point the visible diagram is)\r\n */\r\nexport function get_preview_diagram(ctx : GeoCtx, pad? : number[] | number) : Diagram {\r\n    let points : {name : string, p : Vector2}[] = [];\r\n    let lines : {name : string, obj : GeoLine}[] = [];\r\n\r\n    let typelist : {[key in GeoType] : {name: string, obj : GeoObj}[]} = {\r\n        [GeoType.LINE] : lines\r\n    }\r\n\r\n    let object_names = Object.keys(ctx);\r\n    for (let name of object_names) {\r\n        let obj = ctx[name];\r\n        if (typeof(obj) === 'number'){\r\n            continue;\r\n        }\r\n        else if (obj instanceof Vector2) {\r\n            points.push({name, p:obj});\r\n        } else {\r\n            typelist[obj.type].push({name, obj});\r\n        }\r\n    }\r\n\r\n    let minx = Math.min(...points.map(p => p.p.x));\r\n    let maxx = Math.max(...points.map(p => p.p.x));\r\n    let miny = Math.min(...points.map(p => p.p.y));\r\n    let maxy = Math.max(...points.map(p => p.p.y));\r\n\r\n    if (pad == undefined) pad = Math.max(maxx - minx, maxy - miny) * 0.1;\r\n    pad = normalize_padding(pad);\r\n    let bbox = [V2(minx - pad[0], miny - pad[1]), V2(maxx + pad[2], maxy + pad[3])] as [Vector2, Vector2];\r\n\r\n    let dg_lines = lines.map(l => line_intersect_bbox(l.obj, bbox)).filter(d => d !== undefined) as Diagram[];\r\n    let r = Math.max(bbox[1].x - bbox[0].x, bbox[1].y - bbox[0].y) * 0.01 * 2/3;\r\n    let dg_points = points.map(p => {\r\n        let c = circle(r).translate(p.p).fill('black');\r\n        let name = textvar(p.name).translate(p.p.add(V2(r*2, r*2))).move_origin_text('bottom-left');\r\n        let namebg = name.copy().textfill('white').textstroke('white').textstrokewidth(10).opacity(0.7)\r\n        return c.combine(namebg, name)\r\n    });\r\n    return diagram_combine(...dg_lines, ...dg_points);\r\n}\r\n","import { Diagram } from '../diagram.js';\r\nimport { V2 } from '../vector.js';\r\nimport { size } from './shapes_geometry.js';\r\nimport type { TreeNode } from './shapes_tree.js';\r\n\r\n// C. Buchheim, M. J Unger, and S. Leipert. Improving Walker's algorithm to run in linear time. In Proc. Graph Drawing (GD), 2002. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.8757\r\n// article : https://llimllib.github.io/pymag-trees/\r\nexport class TreeDraw  {\r\n    diagram: Diagram;\r\n    size: [number,number];\r\n    tree: TreeNode;\r\n    children: TreeDraw[];\r\n    x : number; \r\n    y : number;\r\n    parent: TreeDraw | undefined;\r\n    thread: TreeDraw | undefined;\r\n    mod: number;\r\n    ancestor: TreeDraw;\r\n    change: number;\r\n    shift: number;\r\n    number: number;\r\n\r\n    constructor(tree: TreeNode, parent : TreeDraw | undefined, depth : number = 0, number : number = 0) {\r\n        this.diagram = tree.value;\r\n        this.size = size(this.diagram);\r\n        this.x = -1.0;\r\n        this.y = depth;\r\n        this.tree = tree;\r\n        let tree_children = tree.children ?? [];\r\n        this.children = tree_children.map((child, i) => new TreeDraw(child, this, depth + 1, i));\r\n        this.parent = parent;\r\n        this.thread = undefined;\r\n        this.mod = 0;\r\n        this.ancestor = this;\r\n        this.change = 0;\r\n        this.shift = 0;\r\n        this.number = number;\r\n    }\r\n\r\n    left() : TreeDraw | undefined {\r\n        if (this.thread) return this.thread;\r\n        if (this.children.length > 0) return this.children[0];\r\n        return undefined;\r\n    }\r\n    right() : TreeDraw | undefined{\r\n        if (this.thread) return this.thread;\r\n        if (this.children.length > 0) return this.children[this.children.length-1];\r\n        return undefined;\r\n    }\r\n    lsibling() : TreeDraw | undefined {\r\n        if (!this.parent) return undefined;\r\n        if (this.number > 0) return this.parent.children[this.number-1];\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport function calculate_tree_buchheim(tree : TreeNode, vertical_dist : number, horizontal_gap : number) : TreeDraw{\r\n    let treeDraw = new TreeDraw(tree, undefined);\r\n    let dt = first_walk(treeDraw, horizontal_gap);\r\n    let min = second_walk(dt, 0, 0, vertical_dist, 0);\r\n    if (min < 0) third_walk(dt, -min);\r\n    position_diagram(dt);\r\n    return dt;\r\n}\r\n\r\nfunction position_diagram(tree : TreeDraw) {\r\n    tree.diagram = tree.diagram.position(V2(tree.x, tree.y));\r\n    tree.children.forEach(position_diagram);\r\n}\r\n\r\nfunction third_walk(td : TreeDraw, n : number){\r\n    td.x += n;\r\n    td.children.forEach(child => third_walk(child, n));\r\n}\r\n\r\nfunction first_walk(td : TreeDraw, horizontal_gap : number){\r\n    let self_halfwidth = td.size[0] / 2;\r\n    if (td.children.length === 0){\r\n        let lbrother = td.lsibling();\r\n        if (lbrother) {\r\n            let lbrother_halfwidth = lbrother.size[0] / 2;\r\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\r\n            td.x = lbrother.x + dist;\r\n        } else {\r\n            td.x = 0\r\n        }\r\n    } else {\r\n        let default_ancestor = td.children[0];\r\n        td.children.forEach(w => {\r\n            first_walk(w, horizontal_gap);\r\n            default_ancestor = apportion(w, default_ancestor, horizontal_gap);\r\n        });\r\n        execute_shifts(td);\r\n        let midpoint = (td.children[0].x + td.children[td.children.length-1].x) / 2;\r\n        let lbrother = td.lsibling();\r\n        if (lbrother){\r\n            let lbrother_halfwidth = lbrother.size[0] / 2;\r\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\r\n            td.x = lbrother.x + dist;\r\n            td.mod = td.x - midpoint;\r\n        } else {\r\n            td.x = midpoint;\r\n        }\r\n    }\r\n    return td;\r\n}\r\n\r\ntype V = TreeDraw | undefined;\r\nfunction apportion(v : TreeDraw, default_ancestor : TreeDraw, horizontal_gap : number) {\r\n    let w = v.lsibling();\r\n    if (w !== undefined) {\r\n        let lmost_sibling = (!v.parent || v.number === 0) ? undefined : v.parent.children[0];\r\n        let vir : V = v;\r\n        let vor : V = v;\r\n        let vil : V = w;\r\n        let vol : V = lmost_sibling ;\r\n        let sir = v.mod;\r\n        let sor = v.mod;\r\n        let sil = vil.mod;\r\n        let sol = vol!.mod;\r\n\r\n        while (vil?.right() !== undefined && vir?.left() !== undefined) {\r\n            vil = vil.right();\r\n            vir = vir.left();\r\n            vol = vol?.left();\r\n            vor = vor?.right();\r\n            vor!.ancestor = v;\r\n            let lhalfwidth = vil!.size[0] / 2;\r\n            let rhalfwidth = vir!.size[0] / 2;\r\n            let dist = lhalfwidth + rhalfwidth + horizontal_gap;\r\n            let shift = (vil!.x + sil) - (vir!.x + sir) + dist;\r\n            if (shift > 0) {\r\n                let a = ancestor(vil!, v, default_ancestor);\r\n                move_subtree(a, v, shift);\r\n                sir += shift;\r\n                sor += shift;\r\n            }\r\n            sil += vil!.mod;\r\n            sir += vir!.mod;\r\n            sol += vol!.mod;\r\n            sor += vor!.mod;\r\n        }\r\n        if (vil!.right() !== undefined && vor!.right() === undefined) {\r\n            vor!.thread = vil!.right();\r\n            vor!.mod += sil - sor;\r\n        } else {\r\n            if (vir?.left() !== undefined && vol?.left() === undefined) {\r\n                vol!.thread = vir.left();\r\n                vol!.mod += sir - sol;\r\n            }\r\n            default_ancestor = v;\r\n        }\r\n    }\r\n    return default_ancestor;\r\n}\r\n\r\nfunction move_subtree(wl : TreeDraw, wr : TreeDraw, shift : number){\r\n    let subtrees = wr.number - wl.number;\r\n    wr.change -= shift / subtrees;\r\n    wr.shift += shift;\r\n    wl.change += shift / subtrees;\r\n    wr.x += shift;\r\n    wr.mod += shift;\r\n}\r\n\r\nfunction execute_shifts(td : TreeDraw){\r\n    let shift = 0;\r\n    let change = 0;\r\n    for (let i = td.children.length - 1; i >= 0; i--){\r\n        let w = td.children[i];\r\n        w.x += shift;\r\n        w.mod += shift;\r\n        change += w.change;\r\n        shift += w.shift + change;\r\n    }\r\n}\r\n\r\nfunction ancestor(vil : TreeDraw, v : TreeDraw, default_ancestor : TreeDraw){\r\n    if (v.parent?.children.includes(vil.ancestor)) return vil.ancestor;\r\n    return default_ancestor;\r\n}\r\n\r\nfunction second_walk(td : TreeDraw, m : number, depth : number, vertical_dist : number, min? : number){\r\n    td.x += m;\r\n    td.y = -depth * vertical_dist;\r\n\r\n    // if (min === undefined) min = v.x;\r\n    min = Math.min(min ?? td.x, td.x);\r\n\r\n    td.children.forEach(w => {\r\n        min = second_walk(w, m + td.mod, depth + 1, vertical_dist, min);\r\n    });\r\n    return min;\r\n}\r\n","import { Diagram, diagram_combine, line } from '../diagram.js';\r\nimport { calculate_tree_buchheim, TreeDraw } from './utils_tree.js';\r\n\r\n\r\nexport interface TreeNode {\r\n    value: Diagram;\r\n    children?: TreeNode[];\r\n}\r\n\r\n/**\r\n * Create a tree diagram from a tree node\r\n * @param node root node of the tree\r\n * @param vertical_dist vertical distance between nodes\r\n * @param horizontal_gap horizontal gap between nodes\r\n * @returns tree diagram\r\n */\r\nexport function tree(node : TreeNode, vertical_dist : number, horizontal_gap : number) : Diagram {\r\n    let treeDraw = calculate_tree_buchheim(node, vertical_dist, horizontal_gap);\r\n    return diagram_from_treeDraw(treeDraw);\r\n}\r\n\r\n/**\r\n * Mirror a tree node\r\n * @param node root node of the tree\r\n * @returns mirrored tree node\r\n */\r\nexport function mirror_treenode(node : TreeNode) : TreeNode {\r\n    return {value: node.value, children: (node.children ?? []).map(mirror_treenode).reverse()};\r\n}\r\n\r\n/**\r\n * Helper function to create a diagram from a treeDraw\r\n * @param node treeDraw node\r\n * @returns diagram\r\n */\r\nfunction diagram_from_treeDraw(node : TreeDraw) : Diagram {\r\n    let node_dg = node.diagram;\r\n    let children_dglist = node.children.map(diagram_from_treeDraw);\r\n    let line_diagrams = node.children.map(child_node => {\r\n        let start = node_dg.get_anchor('bottom-center');\r\n        let end = child_node.diagram.get_anchor('top-center');\r\n        return line(start, end);\r\n    });\r\n    return diagram_combine(node_dg, ...line_diagrams, ...children_dglist);\r\n}\r\n\r\n","import { Diagram, curve } from '../diagram.js';\r\nimport { V2, Vector2 } from '../vector.js';\r\n\r\n/**\r\n* Combine multiple curves into a single curve\r\n* @param curves an array of curves\r\n* \\* you can reverse the order of the point in a curve by using the reverse() method\r\n*/\r\nexport function curve_combine(...curves : Diagram[]) : Diagram {\r\n    const points = curves.map(c => c.path?.points ?? []).flat();\r\n    return curve(points);\r\n}\r\n\r\nexport function bezier_quadratic(p0 : Vector2, p1 : Vector2, p2 : Vector2, n_sample = 100 ) {\r\n    const dt = 1/(n_sample-1);\r\n    const points = Array<Vector2>(n_sample);\r\n    for (let i = 0; i < n_sample; i++) {\r\n        const t = i*dt;\r\n        // B(t) = (1-t)^2 * P0 + 2t(1-t)P1 + t^2P2\r\n        const a = p0.scale((1-t)*(1-t));\r\n        const b = p1.scale(2*t*(1-t));\r\n        const c = p2.scale(t*t);\r\n        points[i] = a.add(b).add(c);\r\n    }\r\n    return curve(points);\r\n}\r\n\r\nexport function bezier_cubic(p0 : Vector2, p1 : Vector2, p2 : Vector2, p3 : Vector2, n_sample = 100 ) {\r\n    const dt = 1/(n_sample-1);\r\n    const points = Array<Vector2>(n_sample);\r\n    for (let i = 0; i < n_sample; i++) {\r\n        const t = i*dt;\r\n        // B(t) = (1-t)^3 * P0 + 3t(1-t)^2P1 + 3t^2(1-t)P2 + t^3P3\r\n        const a = p0.scale((1-t)*(1-t)*(1-t));\r\n        const b = p1.scale(3*t*(1-t)*(1-t));\r\n        const c = p2.scale(3*t*t*(1-t));\r\n        const d = p3.scale(t*t*t);\r\n        points[i] = a.add(b).add(c).add(d);\r\n    }\r\n    return curve(points);\r\n}\r\n\r\n// interpolations\r\n\r\n/**\r\n* Create a curve from the cubic spline interpolation of the given points\r\n* @param points array of points to interpolate\r\n* @param n number of points to interpolate between each pair of points (default 10)\r\n*/\r\nexport function cubic_spline(points : Vector2[], n : number = 10) : Diagram {\r\n    const interpolated_points = interpolate_cubic_spline(points, n);\r\n    return curve(interpolated_points);\r\n}\r\n\r\n/**\r\n * Cubic spline interpolation\r\n * @param points array of points to interpolate\r\n * @param n number of points to interpolate between each pair of points (default 10)\r\n * @returns array of interpolated points\r\n */\r\nexport function interpolate_cubic_spline(points: Vector2[], n: number = 10): Vector2[] {\r\n    const n_points = points.length;\r\n    let a: number[] = points.map(p => p.y);\r\n    let b: number[] = new Array(n_points).fill(0);\r\n    let d: number[] = new Array(n_points).fill(0);\r\n    let h: number[] = new Array(n_points - 1);\r\n    for (let i = 0; i < n_points - 1; i++) {\r\n        h[i] = points[i + 1].x - points[i].x;\r\n    }\r\n\r\n    // Solve tridiagonal system for the c[i] coefficients (second derivatives)\r\n    let alpha : number[] = new Array(n_points - 1).fill(0);\r\n    let c     : number[] = new Array(n_points).fill(0);\r\n    let l     : number[] = new Array(n_points).fill(1);\r\n    let mu    : number[] = new Array(n_points).fill(0);\r\n    let z     : number[] = new Array(n_points).fill(0);\r\n\r\n    for (let i = 1; i < n_points - 1; i++) {\r\n        alpha[i] = (3 / h[i]) * (a[i + 1] - a[i]) - (3 / h[i - 1]) * (a[i] - a[i - 1]);\r\n    }\r\n\r\n    for (let i = 1; i < n_points - 1; i++) {\r\n        l[i] = 2 * (points[i + 1].x - points[i - 1].x) - h[i - 1] * mu[i - 1];\r\n        mu[i] = h[i] / l[i];\r\n        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i];\r\n    }\r\n\r\n    // Back substitution\r\n    for (let j = n_points - 2; j >= 0; j--) {\r\n        c[j] = z[j] - mu[j] * c[j + 1];\r\n        b[j] = (a[j + 1] - a[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3;\r\n        d[j] = (c[j + 1] - c[j]) / (3 * h[j]);\r\n    }\r\n\r\n    // Now that we have coefficients, we can construct the spline between each pair of points\r\n    let spline_points: Vector2[] = [];\r\n    for (let i = 0; i < n_points - 1; i++) {\r\n        for (let j = 0; j <= n; j++) {\r\n            let x = points[i].x + j * (points[i + 1].x - points[i].x) / n;\r\n            let y = a[i] + b[i] * (x - points[i].x) + c[i] * Math.pow(x - points[i].x, 2) + d[i] * Math.pow(x - points[i].x, 3);\r\n            spline_points.push(V2(x, y));\r\n        }\r\n    }\r\n\r\n    return spline_points;\r\n}\r\n","// Simple encoding/decoding utilities using btoa, atob and encodeURIComponent, decodeURIComponent\r\n// can be used to store user code and pass it in the URL\r\n\r\nexport function encode(s: string): string {\r\n    return btoa(encodeURIComponent(s));\r\n}\r\n\r\nexport function decode(s: string): string {\r\n    return decodeURIComponent(atob(s));\r\n}\r\n"],"names":["Vector2","constructor","x","y","this","add","v","sub","scale","s","mul","rotate","angle","Math","cos","sin","dot","cross","equals","length","sqrt","length_sq","atan2","normalize","len","copy","apply","f","V2","Vdir","Transform","translate","p","pivot","origin","reflect_over_point","q","PI","reflect_over_line","p1","p2","n","d","skewX","ybase","tan","skewY","xbase","BB_TokenType","TAG","DiagramType","BB_Lexer","parse_tag_content","str","name","substring","type","CLOSE_TAG","attributes","_tag_name","space_id","indexOf","equal_id","OPEN_TAG","value","Error","parse","text","tokens","pos","TagLeft","push","TEXT","_text","TagRight","nextTagLeft","tag_content","BB_multiline","from_BBCode","linespace","tspans","tag_stack","console","error","token","dy","_a","build_style","style","pop","split_tspans_by_words","text_span_data","new_text_span_data","span","words","split","i","word","JSON","stringify","tag","DEFAULT_FONTSIZE","Diagram","type_","args","children","path","undefined","textdata","multilinedata","imgdata","mutable","tags","_bbox_cache","mut","mut_parent_only","immut","newd","deep_setPrototypeOf","obj","Object","setPrototypeOf","prototype","objd","c","Path","copy_if_not_mutable","append_tags","Array","isArray","includes","remove_tags","filter","t","reset_tags","contain_tag","contain_all_tags","collect_children","concat","flatten","func","apply_recursive","apply_to_tagged_recursive","get_tagged_elements","result","combine","diagrams","diagram_combine","to_curve","Polygon","Curve","to_polygon","add_points","points","last_child","update_style","stylename","stylevalue","excludedType","Text","Image","MultilineText","clone_style_from","diagram","assign","fill","color","stroke","opacity","toString","strokewidth","width","strokelinecap","linecap","strokelinejoin","linejoin","strokedasharray","dasharray","join","vectoreffect","textfill","textstroke","textstrokewidth","update_textdata","textdataname","textdatavalue","fontfamily","fontstyle","fontsize","fontweight","fontscale","textanchor","textdy","textangle","text_tovar","TEXTVAR","text_totext","bounding_box","minx","Infinity","miny","maxx","maxy","child","min","max","bbox","point","transform","transform_function","prev_cached_bbox","map","position","dv","scaletext","parseFloat","base","reflect","vflip","a","hflip","get_anchor","anchor","midx","midy","move_origin","__move_origin_text","anchor_to_textdata","move_origin_text","path_length","reverse_path","reverse","parametric_point","segment_index","cumuative_length","total_length","cumulative_t","l","child_id","prev_t","segment_t","debug_bbox","rect_bbox","polygon","origin_x","debug","show_index","style_path","style_index","bg","dd","empty","f_obj","curve","deb_bbox","deb_object","prev_point","point_texts","minimum_dist_tolerance","is_empty","EMPTY","newpoints","newp","closed","extended_points","cumulative_length","segment_id","start","dir","newdiagrams","all_children_mutable","line","end","LINE","condition","message","assert","image","src","height","multiline","spans","content","multiline_bb","bbstr","split_by_word","to_radian","to_degree","array_repeat","arr","new_arr","linspace","step","linspace_exc","range","floor","range_inc","transpose","j","expand_directional_value","padding","tab_color","blue","lightblue","orange","lightorange","green","lightgreen","red","lightred","purple","lightpurple","brown","lightbrown","pink","lightpink","grey","lightgrey","gray","lightgray","olive","lightolive","cyan","lightcyan","get_color","colorname","palette","unicode_mathematical_italic","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","b","e","g","h","k","m","o","r","u","w","z","fromEntries","entries","latex_greek","latex_symbols","textfractionsolidus","leftrightsquigarrow","textpertenthousand","blacktriangleright","blacktriangledown","blacktriangleleft","twoheadrightarrow","leftrightharpoons","rightleftharpoons","textreferencemark","circlearrowright","rightrightarrows","vartriangleright","textordmasculine","textvisiblespace","twoheadleftarrow","downharpoonright","ntrianglerighteq","rightharpoondown","textperthousand","leftrightarrows","textmusicalnote","nleftrightarrow","rightleftarrows","bigtriangledown","textordfeminine","ntrianglelefteq","rightthreetimes","trianglerighteq","vartriangleleft","rightsquigarrow","downharpoonleft","curvearrowright","circlearrowleft","leftharpoondown","nLeftrightarrow","curvearrowleft","guilsinglright","leftthreetimes","leftrightarrow","rightharpoonup","guillemotright","downdownarrows","hookrightarrow","dashrightarrow","leftleftarrows","trianglelefteq","ntriangleright","doublebarwedge","upharpoonright","rightarrowtail","looparrowright","Leftrightarrow","sphericalangle","divideontimes","measuredangle","blacktriangle","ntriangleleft","mathchar1356","texttrademark","mathchar2208","triangleright","leftarrowtail","guilsinglleft","upharpoonleft","fallingdotseq","looparrowleft","textbrokenbar","hookleftarrow","smallsetminus","dashleftarrow","guillemotleft","leftharpoonup","bigtriangleup","textcircledP","risingdotseq","triangleleft","mathsterling","textcurrency","triangledown","blacklozenge","preccurlyeq","Rrightarrow","circledcirc","nRightarrow","vartriangle","Updownarrow","nrightarrow","succcurlyeq","diamondsuit","curlyeqsucc","blacksquare","curlyeqprec","updownarrow","backepsilon","circleddash","eqslantless","nsupseteqq","textrecipe","nsubseteqq","subsetneqq","upuparrows","nleftarrow","eqslantgtr","curlywedge","varepsilon","supsetneqq","rightarrow","sqsubseteq","sqsupseteq","complement","Rightarrow","gtreqqless","lesseqqgtr","circledast","nLeftarrow","Lleftarrow","varnothing","Leftarrow","gvertneqq","supsetneq","leftarrow","nleqslant","llbracket","spadesuit","rrbracket","supseteqq","copyright","gtreqless","pitchfork","estimated","ngeqslant","therefore","triangleq","varpropto","subsetneq","heartsuit","lvertneqq","checkmark","nparallel","lesseqgtr","downarrow","backsimeq","Downarrow","subseteqq","setminus","succnsim","doteqdot","clubsuit","emptyset","sqsupset","curlyvee","varkappa","llcorner","varsigma","approxeq","backcong","supseteq","circledS","circledR","textcent","urcorner","lrcorner","boxminus","texteuro","vartheta","barwedge","sqsubset","subseteq","intercal","ulcorner","recorder","precnsim","parallel","boxtimes","multimap","maltese","nearrow","swarrow","lozenge","succsim","dotplus","lessgtr","Upsilon","Cdprime","gtrless","backsim","nexists","searrow","lessdot","boxplus","upsilon","epsilon","diamond","bigstar","ddagger","cdprime","Uparrow","between","sqangle","digamma","uparrow","nwarrow","precsim","because","bigcirc","lesssim","partial","natural","supset","hstrok","Tstrok","coprod","models","otimes","degree","gtrdot","preceq","Lambda","lambda","cprime","varrho","Bumpeq","hybull","lmidot","nvdash","lbrace","bullet","varphi","bumpeq","Lmidot","Cprime","female","rtimes","gtrsim","mapsto","daleth","square","nVDash","rangle","tstrok","oslash","ltimes","lfloor","marker","Subset","Vvdash","propto","Hstrok","dlcrop","forall","nVdash","Supset","langle","ominus","rfloor","circeq","eqcirc","drcrop","veebar","ulcrop","nvDash","urcrop","exists","approx","dagger","boxdot","succeq","bowtie","subset","notin","Sigma","Omega","nabla","colon","boxHu","boxHd","aleph","gnsim","boxHU","boxHD","equiv","lneqq","alpha","amalg","boxhU","boxhD","uplus","boxhu","kappa","sigma","boxDL","Theta","Vdash","boxDR","boxDl","sqcap","boxDr","dashv","vDash","boxdl","boxVl","boxVh","boxVr","boxdr","boxdL","boxVL","boxVH","boxVR","boxdR","theta","lhblk","uhblk","ldotp","ldots","boxvL","boxvH","boxvR","boxvl","boxvh","boxvr","Delta","boxUR","boxUL","oplus","boxUr","boxUl","doteq","happy","varpi","smile","boxul","simeq","boxuR","boxuL","boxhd","gimel","Gamma","lnsim","sqcup","omega","sharp","times","block","wedge","vdash","infty","gamma","asymp","rceil","lceil","delta","gneqq","frown","phone","vdots","boxr","perp","surd","vert","prec","mldr","cong","star","geqq","cdot","cdots","Vert","lnot","leqq","beta","beth","prod","circ","flat","oint","odot","nldr","nmid","zeta","iota","gneq","boxH","hbar","boxv","boxh","male","succ","lneq","boxV","leq","Cup","Psi","neq","cup","geq","mho","Dzh","cap","bot","psi","chi","Phi","ast","ell","top","lll","tau","Cap","sad","iff","eta","eth","rho","dzh","div","phi","Rsh","vee","int","sim","Lsh","yen","ggg","mid","sum","neg","Dz","Re","oe","DH","ll","ng","wr","wp","AE","AA","ss","dz","ae","aa","th","to","Pi","mp","Im","pm","pi","in","ni","ne","TH","Xi","nu","NG","xi","OE","gg","DJ","mu","dj","str_latex_to_unicode","key","replaceAll","str_to_mathematical_italic","default_diagram_style","_init_default_diagram_style","default_text_diagram_style","_init_default_text_diagram_style","default_textdata","_init_default_textdata","reset_default_styles","_IMAGE_DATAURL_CACHE_MAP","Map","draw_image","target_element","embed_image","svgtag","document","createElementNS","setAttribute","ex","ey","xpos","ypos","img","test","has","dataURL","get","canvas","createElement","ctx","getContext","base_image","crossOrigin","onload","drawImage","toDataURL","set","remove","set_image_href_dataURL","appendChild","collect_text","calculate_text_scale","referencesvgelement","pad","getBBox","refsvgelement_width","baseVal","refsvgelement_height","get_tagged_svg_element","svgelement","SVGElement","getAttribute","f_draw_to_svg","render_text","text_scaling_factor","defs","querySelector","gradientId","random","substr","gradient","x1","x2","y1","y2","stops","forEach","stop","stopElement","offset","createSVGPoint","appendItem","draw_polygon","polyline","draw_curve","warn","text_diagrams","multiline_diagrams","calculated_scale","angle_deg","font_size","text_content","is_texstr","innerHTML","draw_texts","textsvg","diagram_font_size","dg_scale_factor","_b","is_firstline","is_in_front","newline_dy","tspandata","_c","tspan","not_setting_dy","tspanstyle","dx","textdata_dy","_d","font_size_scale_factor","_e","whiteSpace","draw_multiline_texts","draw_to_svg","outer_svgelement","set_html_attribute","clear_svg","draw_to_svg_element","options","SVGSVGElement","filter_strings","insertBefore","firstChild","filter_string","handle_filter_strings","text_scaling_reference_svg","text_scaling_reference_padding","_f","pad_px","_g","svg_width","svg_height","overflow","background_color","viewBox","rect","startsWith","endsWith","is_texdisplaystr","handle_tex_in_svg","svg","texhandler","SVGTextElement","fontsizestr","svgstr","display","xstr","ystr","outerHTML","widthexstr","widthex","heightexstr","magic_number","xval","yval","download_svg_as_svg","inner_svgelement","locator_svgelement","copy_inner_svgelement","cloneNode","svg_string","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","href","download","click","download_svg_as_png","svgelem","svg_blob","DOMURL","window","webkitURL","revokeObjectURL","imgURI","replace","rectangle","rectangle_corner","bottomleft","topright","side","regular_polygon","radius","regular_polygon_side","sidelength","circle","CIRCLE","arc","arrow","headsize","ARROW_LINE","ARROW_HEAD","arrow1","arrow2","line_diagram","direction","raw_triangle","textvar","circle_radius","center","p0","line_points","size","bb","area","vertices","yi","xj","abs","calculate_polygon_area","reduce","acc","d0_2","r_2","v0","sLeft","vLeft","sRight","vRight","len1","len2","p0_new","p1_new","newl","l1","l2","a1","b1","a2","b2","x3","y3","x4","y4","align_vertical","alignment","top_y","center_y","bottom_y","align_horizontal","left_x","center_x","right_x","distribute_horizontal","space","distributed_diagrams","prev_diagram","this_diagram","distribute_vertical","distribute_horizontal_and_align","horizontal_space","distribute_vertical_and_align","vertical_space","distribute_grid_row","column_count","vectical_space","row_count","ceil","rows","slice","row","grid_diagrams","distribute_variable_row","container_width","vertical_alignment","horizontal_alignment","current_row","current_row_w","add_diagrams_to_rows","distributed_row_dg","row_diagrams","FOCUS_RECT_CLASSNAME","defaultFormat_f","val","val_str","toFixed","format_number","control_svg_name","HTML_INT_TARGET","dnd_type","Interactive","control_container_div","diagram_outer_svg","inp_object_","event_target","SVG","inp_variables","inp_setter","display_mode","diagram_svg","locator_svg","dnd_svg","custom_svg","button_svg","locatorHandler","dragAndDropHandler","buttonHandler","focus_padding","draw_function","_","display_precision","intervals","registeredEventListenerRemoveFunctions","single_int_mode","draw","setViewBox","set_viewbox","variable_name","label","display_format_func","labeldiv","classList","container","locator_draw","locator_initial_draw","drag_and_drop_initial_draw","dnd_initial_draw","drawSvg","registerEventListener","element","callback","addEventListener","removeEventListener","removeRegisteredEventListener","get_svg_element","metaname","force_recreate","svg_element","call","isTargetingDocument","get_diagram_svg","DOCUMENT","set_focus_padding","locator","track_diagram","blink","control_svg","LocatorHandler","eventTarget","evt","drag","endDrag","registerCallback","redraw","setter","create_locator_circle_pointer_svg","blinking_outers","getElementsByClassName","addBlinkingCircleOuter","startDrag","track","coord","closest_point_from_points","registerSetter","init_pos","setPos","locator_custom","callback_rightclick","create_locator_diagram_svg","preventDefault","slider","time","oninput","create_slider","interval_time","playbutton","symboldiv","onclick","setInterval","clearInterval","leftcontainer","rightcontainer","init_drag_and_drop","dnd","DragAndDropHandler","dnd_container","capacity","config","add_container","dnd_draggable_to_container","container_name","onclickstart_callback","add_draggable_to_container","register_clickstart_callback","dnd_draggable","container_diagram","add_draggable_with_container","dnd_register_drop_outside_callback","register_dropped_outside_callback","dnd_register_move_validation_function","fun","register_move_validation_function","dnd_move_to_container","try_move_draggable_to_container","get_dnd_data","getData","set_dnd_data","data","setData","dnd_reorder_tabindex","container_names","reorder_svg_container_tabindex","get_dnd_container_content_size","get_container_content_size","NaN","set_dnd_content_sort","sort_content","remove_dnd_draggable","remove_draggable","remove_locator","remove_button","custom_object","id","classlist","custom","custom_object_g","init_button","button","ButtonHandler","button_toggle","diagram_on","diagram_off","state","main_callback","try_add_toggle","button_click","diagram_pressed","try_add_click","button_click_hover","diagram_hover","taget","source","closest_d2","closest_p","d2","clientPos_to_svgPos","clientPos","CTM","navigator","userAgent","toLowerCase","ctm","getScreenCTM","screenWidth","screenHeight","scalex","scaley","translateX","translateY","DOMMatrix","fromMatrix","firefox_calcCTM","getMousePosition","TouchEvent","touches","clientX","clientY","get_SVGPos_from_event","selectedElement","selectedVariable","mouseOffset","callbacks","svg_elements","blinking_circle_outers","first_touch_callback","element_pos","MouseEvent","mousepos","elementpos","handleBlinking","circle_outer","cursor","replaceWith","circle_inner","inner_radius","containers","draggables","hoveredContainerName","draggedElementName","draggedElementGhost","dropped_outside_callback","move_validation_function","active_draggable_name","dom_to_id_map","WeakMap","replace_container_svg","generate_position_map","p_center","x0","y0","nx","ny","p_top_center","sizelist","diagram_size","p_center_left","distributed","content_diagrams","replace_draggable_svg","draggable","outer_g","parentNode","add_draggable_svg","reposition_container_content","get_container_outer_g","add_container_svg","move_draggable_to_container","initial_container_name","diagram_container_from_draggable","container_data","append","draggable_name","draggable_data","reconfigure_container_tabindex","containerdata","register_tap_enter","onkeydown","tap_enter_draggable","keyboard","reset_picked_class","target_container","tap_enter_container","onmousedown","prepend","add_focus_rect","ontouchstart","focus_rect","move_svg_draggable_to_container","draggable_svg","container_outer_g","reorder_svg_container_content","activeElement","focus","sort","sorting_function","custom_region_box","position_map","remove_draggable_from_container","ignore_callback","original_container_name","draggedElement","other_draggable_name","reset_hovered_class","ghosts","ghost","pointerEvents","get_dnd_element_data_from_evt","evt_touch","elementFromPoint","evt_","localName","parentElement","dg_tag","parent","element_data","_evt","states","svg_g_element","touchdownName","add_toggle","g_off","g_on","set_display","update_state","add_click","g_normal","g_pressed","g_hover","pressed","hovered","pressed_state","hover_state","update_display","onblur","onmouseenter","onmouseleave","onmouseup","onkeyup","function_handle_path_type","modified_func","resample","new_points","get_round_corner_arc_points","count","p3","v1","v3","corner_angle","s_dist","d1","d3","pa","pb","distc","pc","angle_a","angle_b","angle_b_plus","angle_b_minus","angle_a_b","AlongIntersection","flip","new_arrowhead","arrowhead","v_tip","v_base1","v_base2","v_base","arrowhead_angle","point_indices","diagram_point_indices","curr_i","prev_i","next_i","prev_p","curr_p","next_p","arc_points","t_start","t_end","n_total","dnew","xs","ys","subdivide_points","Geometry","pointsSame","pointsSameX","pointsSameY","pointsCompare","GeometryEpsilon","super","pointAboveOrOnLine","left","right","Ax","Ay","Bx","By","Cx","pointBetween","d_py_ly","d_rx_lx","d_px_lx","d_ry_ly","pointsCollinear","dx1","dy1","dx2","dy2","linesIntersect","aStart","aEnd","bStart","bEnd","adx","ady","bdx","bdy","axb","categorize","BeforeStart","EqualStart","BetweenStartAndEnd","EqualEnd","AfterEnd","alongA","alongB","List","nodes","node","splice","getIndex","isEmpty","getHead","removeHead","shift","check","findTransition","insert","high","before","after","Segment","copyMyFill","log","otherFill","segmentId","myFill","above","below","Event","isStart","seg","primary","status","Intersecter","selfIntersection","geo","events","compareEvents","p1_isStart","p1_1","p1_2","p2_isStart","p2_1","p2_2","comp","addEvent","ev","here","other","divideEvent","ns","segmentChop","addSegment","newSegment","forward","evStart","evEnd","addRegion","region","pt1","pt2","compareStatus","ev1","ev2","statusFindSurrounding","checkIntersection","seg1","seg2","a1_equ_b1","a2_equ_b2","a1_between","a2_between","calculate","primaryPolyInverted","secondaryPolyInverted","_h","segments","segmentNew","surrounding","tempStatus","checkBothIntersections","eve","toggle","segmentUpdate","rewind","inside","st","statusRemove","done","select","selection","index","keep","selected","SegmentSelector","union","intersect","difference","differenceRev","xor","SegmentChainer","chains","regions","chainStart","first_match","matches_head","matches_pt1","second_match","next_match","setMatch","chain","head","tail","chainNew","chainMatch","pt","addToHead","grow","grow2","oppo","oppo2","chainRemoveHead","chainRemoveTail","chainClose","chainAddHead","unshift","chainAddTail","reverseChain","chainReverse","appendChain","index1","index2","chain1","chain2","tail2","head2","chainJoin","chainConnect","reverseF","BuildLog","list","nextSegmentId","curVert","segs","PolyBool","buildLog","enable","poly","inverted","segments1","segments2","combined","inverted1","inverted2","selectUnion","selectIntersect","selectDifference","selectDifferenceRev","selectXor","poly1","poly2","comb","seg3","polybool","dg_to_polybool","polybool_to_dg","diagrams_per_region","string_filter","tolerance","pol","shape1","shape2","outer_shadow","stdev","scale_factor","default_axes_options","xrange","yrange","xticks","yticks","n_sample","ticksize","tick_label_offset","axes_transform","axes_options","opt","xmin","xmax","ymin","ymax","lowerleft","upperright","ax","axes_empty","xorigin","yorigin","GRAPH_AXIS","axes_corner_empty","axes_corner_empty_xbreak","xbreak_ysize_","get_tick_numbers","xbreak_xsize","xbreak_xpos","trans_f","xbreak_pleft_","xbreak_pright_","xbreak_xsize_","xbreak_pbottom_","xbreak_ptop_","xbreak_curve","xaxis","xtickmark_empty","GRAPH_TICK","xtickmark","tick","GRAPH_TICK_LABEL","ytickmark_empty","ytickmark","tweak_interval","interval","get_tick_interval","range_order","log10","interval_to_try","pow","tick_counts","exclude_zero","nozero","magnitude","new_min","new_max","interval_prec","get_tick_numbers_aroundzero","round","get_tick_numbers_range","xycorneraxes","xyaxes","ax_origin","yaxis","ygrid","GRAPH_GRID","xgrid","xygrid","plotv","current_segment","path_diagrams","segment","plot","xdata","ydata","plotf","under_curvef","x_start","x_end","new_opt","text_offset","va","vb","angle_arc","gap","n_angle","p_mid","marks","tablength","textoffset","tabsymmetric","pA","pB","tabA","tabB","lines","pmid","arrow_angle","p1_","p3_","arrow_head_size","vec","coil_number","separation_coefficient","sample_number","default_bar_options","to_ax_options","datavalues","baropt","bar_options","ax_f","Number","datanames","ax_opt","TableOrientation","arrowsize","number_offset","d_ticks","num","txt","fixed_size","rowsizes","colsizes","orientation","ROWS","diagram_rows","col_count","empty_map","empty_indices_map","get_empty_map","table","empty_fixed_size","get_points","diagram_grid","TABLE_CONTENT","ROW_","COL_","diagram_grid_combined","CONTAIN_TABLE","y_top","y_bot","x_left","cols","x_right","x_mid","y_mid","TABLE_CELL","EMPTY_CELL","TABLE","table_diagram","table_diagram_","cell","style_cell","styles","table_index","findIndex","new_table","min_rowsize","min_colsize","f_size","ticks","GeoType","quartiles","Q0","Q1","Q2","Q3","Q4","whisker_size","line_intersection","line_from_points","line_intersect_bbox","bottom_left","top_right","bl","tr","tl","br","intersections","tol","is_inside_bbox","dgline","typelist","object_names","keys","normalize_padding","dg_lines","namebg","o1","o2","slope","TreeDraw","tree","depth","number","tree_children","thread","mod","ancestor","change","lsibling","calculate_tree_buchheim","vertical_dist","horizontal_gap","dt","first_walk","second_walk","third_walk","position_diagram","td","self_halfwidth","lbrother","dist","default_ancestor","vir","vor","vil","vol","sir","sor","sil","sol","move_subtree","apportion","execute_shifts","midpoint","wl","subtrees","diagram_from_treeDraw","node_dg","children_dglist","line_diagrams","child_node","mirror_treenode","interpolate_cubic_spline","n_points","spline_points","curves","decodeURIComponent","atob","btoa","encodeURIComponent"],"mappings":"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CXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACX,SAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACV9rB,MAAU,IACV+rB,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,MAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS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","x_google_ignoreList":[13]}